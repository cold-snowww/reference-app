{
   "data": "<h2 class=\"conspect__header\">\r\n   Синтаксис JSX\r\n   <a href=\"https://ru.reactjs.org/docs/introducing-jsx.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Дочерние элементы в JSX</h3>\r\n<pre><code>\r\n<span data-reference=\"Если тег пуст, то его можно сразу же закрыть.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementOne = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{user.avatarUrl}</span> /&gt;</span></span>;\r\n\r\n<span data-reference=\"Если JSX выражение на нескольких строках, его следует заключать в круглые скобки, чтобы избежать проблем, связанных с автоматической вставкой точек с запятой\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementTwo = (\r\n<span data-reference=\"JSX-теги могут и содержать дочерние элементы\" class=\"conspect__reference\">i</span>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуйте!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Рады вас видеть.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Встраивание выражений</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;John Smith&#x27;</span>;\r\n<span data-reference=\"В фигурные скобки можно встраивать любое js выражение\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello {name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Результат компиляции JSX</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getGreeting</span>(<span class=\"hljs-params\">user</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (user) {\r\n<span data-reference=\"Результат компиляции JSC - объект JS, его можно передовать в код и возвращать из функций\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуй, {formatName(user)}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n      }\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуй, незнакомец.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n   }\r\n\r\n<span data-reference=\"Создание элемента через JSX, Babel компилирует JSX в вызовы React.createElement\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = (\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;greeting&quot;</span>&gt;</span>\r\n         Привет, мир!\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n   );\r\n\r\n<span data-reference=\"Создание аналогичного элемента через вызов функции React.createElement напрямую\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(\r\n      <span class=\"hljs-string\">&#x27;h1&#x27;</span>,\r\n      {<span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;greeting&#x27;</span>},\r\n      <span class=\"hljs-string\">&#x27;Привет, мир!&#x27;</span>\r\n  );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Атрибуты в JSX</h3>\r\n<pre><code>\r\n<span data-reference=\"Если в атрибут передается строковый литерал - то используются ковычки\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementOne = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">tabIndex</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\r\n<span data-reference=\"Если в атрибут передается JavaScript выражение - то используются фигурные скобки. React экранирует все значения, включённые в JSX для безопасности, перед тем как отрендерить их.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementTwo = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{user.avatarUrl}</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">img</span>&gt;</span></span>;\r\n</code></pre>\r\n<p class=\"conspect__text\">\r\n   При именовани атрибутов в JSX используется <span class=\"conspect__marked-text\">стиль CamelCase</span>\r\n   при этом class становится className, а tabindex - tabIndex.\r\n   JSX удаляет пустые строки и пробелы в начале и конце строки. \r\n   Новые строки, примыкающие к тегу будут удалены. Новые строки \r\n   между строковых литералов сжимаются в один пробел. \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Атрибуты расширения</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Greeting</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Hello, {props.name} {props.lastName}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\r\n      );\r\n   }\r\n   \r\n<span data-reference=\"Компонент рендерит красивую рамку, принимает через пропсы тип рамки, остальные же пропсы прозрачно передает дочерним компонентам\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FancyBorder</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Вариант 1, неизбирательный - выделяем нужный пропс в type, ВСЕ остальные пропсы складываем в объект otherProps, в дочерний компонент могут попасть ненужные пропсы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> {type, ...otherProps} = props;\r\n<span data-reference=\"Вариант 2, избирательный - создаем объект содержащий ТОЛЬКО пропсы необходимые дочерним компонентам\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> greetingProps = {\r\n         <span class=\"hljs-attr\">name</span>: props.<span class=\"hljs-property\">name</span>, \r\n         <span class=\"hljs-attr\">lastname</span>: props.<span class=\"hljs-property\">lastName</span>\r\n      };               \r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Пропс type используется текущим компонентом\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{type}</span>&gt;</span>\r\n<span data-reference=\"Используем атрибут расширения, неизбирательно передаем ВСЕ оставшиеся пропсы компоненту Greeting\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Greeting</span> {<span class=\"hljs-attr\">...otherProps</span>} /&gt;</span>\r\n<span data-reference=\"Используем атрибут расширения, передаем объект с необъодимыми пропсами дочернему компоненту\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Greeting</span> {<span class=\"hljs-attr\">...greetingProps</span>} /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Функции как дочерние компоненты</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонент возвращает список, с количеством элементов указанных в атрибуте numTimes\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">List</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Создаем массив\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> items = [];\r\n   \r\n<span data-reference=\"Количество итераций цикла соответствует numTimes\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; props.<span class=\"hljs-property\">numTimes</span>; i++) {\r\n<span data-reference=\"Помещаем в созданный массив компоненты возвращаемые вызываемой функцией\" class=\"conspect__reference\">i</span>         items.<span class=\"hljs-title function_\">push</span>(\r\n<span data-reference=\"Вызываем функцию которая содержится в props.children\" class=\"conspect__reference\">i</span>            props.<span class=\"hljs-title function_\">children</span>(i)\r\n         );\r\n      }\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"При передаче массива с компонентами (элементами) в другой компонент (элемент), массив распаковывается, его содержимое вставляется в родительский компонент (элемент)\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>{items}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\r\n      );\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Возвращаем компонент List с количеством пунктов 10\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> <span class=\"hljs-attr\">numTimes</span>=<span class=\"hljs-string\">{10}</span>&gt;</span>\r\n<span data-reference=\"Функция переданные таким образом доступна внутри компонента как props.children\" class=\"conspect__reference\">i</span>            {(i) =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{i}</span>&gt;</span>Элемент {i}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Игнорируемые значения</h3>\r\n<p class=\"conspect__text\">\r\n   Следующие значения при передаче для рендера не рендарятся,\r\n   что можно использовать при условном рендере.\r\n</p>\r\n<pre><code>\r\n   &lt;div /&gt;\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{false}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{null}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{undefined}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{true}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Если showHeader true будет передан Header, иначе false, значение которое не рендерится\" class=\"conspect__reference\">i</span>            {showHeader &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> /&gt;</span>}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>  ",
   "title": "Синтаксис JSX"
}
