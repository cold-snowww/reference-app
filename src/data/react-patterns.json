{
   "pages": {
      "1-functional-programming": {
         "data": "<h2 class=\"conspect__header\">\r\n   Функциональное программирование\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Основные критерии:\r\n</h3>\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Неизменяемость</span> - данные \r\n      должны быть неизменны. При необходимости внесения изменений в объект или \r\n      массив, создается копия которая затем изменяется. Оригинальный объект \r\n      изменению не подлежит.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Чистые функции</span> - функции, \r\n      возвращющие значение вычисленное на основе полученных аргументов. Принимают \r\n      по крайней мере один аргумент и всегда возвращают значение или другую функцию. \r\n      Не вызывают побочных эффектов, не изменяют глобальные переменные и состояние \r\n      приложения. Их аргументы рассматриваются как неизменяемые данные.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Преобразование данных</span> - преобразование\r\n      данных из одной формы в другую должно осуществляться чистыми функциями, \r\n      использующими декларативные методы JS, возвращющие новые структуры данных, \r\n      не изменяя исходные - Object.keys/values/entries/assign, \r\n      arr.concat/filter/map/reduce/reduceRight/find.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Функции высшего порядка</span> - использование \r\n      функции, которые могут управлять другими функциями: принимать функции в качестве \r\n      аргументов и/или возвращать функции. Колбэки, асинхронное программирование,\r\n      каррирование и т.д.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Рекурсия</span> - использование ункций, \r\n      которые вызывают сами себя. Может быть использовано в качестве альтернативы \r\n      в задачах, связанных с циклами.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Композиция</span> - логика разбивается \r\n      на небольшие чистые функции, выполняющие отдельные задачи. Эти функции собираются \r\n      вместе: объединяются в более крупные функции, вызываются последовательно \r\n      или параллельно, пока не сформируется готовое приложение.\r\n   </li>   \r\n</ul>",
         "title": "Функциональное программирование"
      },
      "2-important-points": {
         "data": "<h2 class=\"conspect__header\">\r\n   Новые фишки\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Пакет с SVG иконками для React, которые импортируются как \r\n   компоненты: \r\n   <a href=\"https://react-icons.github.io/react-icons/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      React Icons\r\n   </a>\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Использование деструктуризации и расширения при\r\n   объявлении компонентов:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Свойство personalData объекта props становится локальной переменной, можно использовать значение по умолчанию personalData = ...\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Component</span>(<span class=\"hljs-params\">{ personalData }</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Все свойства объекта personalData становятся свойствами компонента Worker\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Worker</span> {<span class=\"hljs-attr\">...personalData</span>} /&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   API Github для получения даных пользователя\r\n   https://api.github.com/users/YOUR_GITHUB_USER_NAME\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Создание персонального токена пользователя GitHub\r\n   Settings > Developer > Settings > PersonalAccess Tokens. \r\n   Токен можно использовать для получения личной информации из\r\n   GitHub API.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Пакет для генерации большого количества фиктивных данных \r\n   в браузере и node.js \r\n   <a href=\"https://www.npmjs.com/package/faker\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      faker.js\r\n   </a>\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Пакет для генерации уникальных идентификаторов\r\n   <a href=\"https://www.npmjs.com/package/uuid\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      uuid\r\n   </a> генерация идентификатора - v4().\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Пакет отображения очень длинных списков в React\r\n   <a href=\"https://www.npmjs.com/package/react-window\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      react-window.js\r\n   </a> \r\n   <a href=\"https://www.npmjs.com/package/react-virtualized\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      react-virtualized.js\r\n   </a>.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Пакет для работы с Mark Down в React\r\n   <a href=\"https://www.npmjs.com/package/react-markdown\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      react-markdown.js\r\n   </a>.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Сервис для тестирования запросов GraphQL на GitHub\r\n   <a href=\"https://docs.github.com/en/graphql/overview/explorer\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      GraphQL Explorer\r\n   </a>.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Библиотека для работы с GraphQL\r\n   <a href=\"https://www.npmjs.com/package/graphql-request\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      graphql-request.js\r\n   </a>.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Набор копонентов со спиннерами для React \r\n   <a href=\"https://www.npmjs.com/package/react-spinners\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      react-spinners.js\r\n   </a>.\r\n</p>",
         "title": "Новые фишки"
      },
      "1-star-raiting": {
         "data": "<h2 class=\"conspect__header\">\r\n   Компонент оценки рейтинга\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент Star\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n<span data-reference=\"Импорт иконки из react-icons\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FaStar</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-icons/fa&quot;</span>;\r\n\r\n<span data-reference=\"Использование деструктуризации объекта props, значение selected по умолчанию - false\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Star</span>(<span class=\"hljs-params\">{selected = <span class=\"hljs-literal\">false</span>, onSelect}</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FaStar</span> \r\n<span data-reference=\"Цвет звезды в зависимости от переданного свойства\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">{selected</span> ? &#x27;<span class=\"hljs-attr\">orange</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">grey</span>&#x27;} \r\n<span data-reference=\"При клике вызывается метод, переданный родительским компонентом\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onSelect}</span>\r\n         /&gt;</span></span>\r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Star</span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент StarRaiting\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Star</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Star&quot;</span>;\r\n\r\n<span data-reference=\"Функция для создания пустого массива необходимой длинны\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createArray</span> = length =&gt; [...<span class=\"hljs-title class_\">Array</span>(length)];\r\n\r\n<span data-reference=\"Свойство totalStars отвечает за общее количество звезд в рейтинге\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">StarRating</span>(<span class=\"hljs-params\">{totalStars = <span class=\"hljs-number\">5</span>}</span>) {\r\n<span data-reference=\"Текущая оценка хронится в состоянии\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [selectedStars, setSelectedStars] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">3</span>);\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n<span data-reference=\"Создание звезд из пустого массива с помощью метода map\" class=\"conspect__reference\">i</span>            {createArray(totalStars).map((n, i) =&gt; ( \r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Star</span> \r\n                  <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{i}</span> \r\n<span data-reference=\"Свойство selected рассчитывается на основании номера текущего элемента в массиве\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedStars</span> &gt;</span> i}\r\n<span data-reference=\"Дочернему компоненту передается функция, которая использует замыкание, для хранения номера звезды\" class=\"conspect__reference\">i</span>                  onSelect={() =&gt; setSelectedStars(i + 1)}\r\n               /&gt;      \r\n            ))}\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{selectedStars} of {totalStars} stars<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>          \r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n      );  \r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">StarRating</span>;\r\n</code></pre>",
         "title": "Компонент оценки рейтинга"
      },
      "2-color-organizer": {
         "data": "<h2 class=\"conspect__header\">\r\n   Компонент оценки цветов\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Исходные данные:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-comment\">/* color-data.json */</span>\r\n   [\r\n      {\r\n         <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;0175d1f0-a8c6-41bf-8d02-df5734d829a4&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;ocean at dusk&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;color&quot;</span>: <span class=\"hljs-string\">&quot;#00c4e2&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;rating&quot;</span>: <span class=\"hljs-number\">5</span>\r\n      },\r\n      {\r\n         <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;83c7ba2f-7392-4d7d-9e23-35adbe186046&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;lawn&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;color&quot;</span>: <span class=\"hljs-string\">&quot;#26ac56&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;rating&quot;</span>: <span class=\"hljs-number\">3</span>\r\n      },\r\n      {\r\n         <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;a11e3995-b0bd-4d58-8c48-5e49ae7f7f23&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;bright red&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;color&quot;</span>: <span class=\"hljs-string\">&quot;#ff0000&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;rating&quot;</span>: <span class=\"hljs-number\">0</span>\r\n      }\r\n   ]\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент StarRating:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">StarRating</span>(<span class=\"hljs-params\">{\r\n      totalStars = <span class=\"hljs-number\">5</span>, \r\n      rating = <span class=\"hljs-number\">0</span>, \r\n      onRate\r\n   }</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n<span data-reference=\"При создании массива компонентов Star используется замыкание индекса массива\" class=\"conspect__reference\">i</span>            {createArray(totalStars).map((n, i) =&gt; (\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Star</span> \r\n                  <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{i}</span> \r\n                  <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{rating</span> &gt;</span> i} \r\n<span data-reference=\"Передача функции, созданной на базе полученной от родительского компонента функции\" class=\"conspect__reference\">i</span>                  onSelect={() =&gt; onRate(i + 1)}      \r\n               /&gt;\r\n            ))}\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{rating} of {totalStars} stars<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент отдельного цвета:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Color</span>(<span class=\"hljs-params\">{\r\n      id, \r\n      title, \r\n      color, \r\n      rating, \r\n      onRemoveColor, \r\n      onRateColor\r\n   }</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{position:</span> &#x27;<span class=\"hljs-attr\">relative</span>&#x27;}}&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> <span class=\"hljs-attr\">30</span>, <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">color</span>}}&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StarRating</span>                                                 \r\n<span data-reference=\"Компоненту передается начальный рейтинг\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">rating</span>=<span class=\"hljs-string\">{rating}</span>\r\n<span data-reference=\"Функция, созданная на базе функции, полученной от родительского компонента, таким образом можно изменять количество аргументов, захватывая данные (id) из компонента\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onRate</span>=<span class=\"hljs-string\">{rating</span> =&gt;</span> onRateColor(id, rating)}             \r\n            /&gt;\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> \r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{buttonStyle}</span>\r\n<span data-reference=\"Также функция, созданная на базе функции, полученной от родительского компонента\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> onRemoveColor(id)}\r\n            &gt;\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FiTrash2</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент ColorList:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorList</span>(<span class=\"hljs-params\">{\r\n      colors = [], \r\n      onRemoveColor, \r\n      onRateColor\r\n   }</span>) {   \r\n<span data-reference=\"Пример условного рендеринга\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(!colors.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>No colors listed!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            {colors.map(color =&gt; (\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Color</span> \r\n                  <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{color.id}</span> \r\n<span data-reference=\"Транзитная передача функции от родительского компонента к дочернему\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">onRemoveColor</span>=<span class=\"hljs-string\">{onRemoveColor}</span>\r\n                  <span class=\"hljs-attr\">onRateColor</span>=<span class=\"hljs-string\">{onRateColor}</span>\r\n<span data-reference=\"Расширение свойств объекта данных в свойства компонента\" class=\"conspect__reference\">i</span>                  {<span class=\"hljs-attr\">...color</span>}\r\n               /&gt;</span>\r\n            ))}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Базовый компонент Application\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Application</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Только базовый копонент верхнего уровня хранит состояние приложения, данные из которого передаются дочерним компонентам по цепочке\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [colors, setColors] = <span class=\"hljs-title function_\">useState</span>(colorData);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorList</span> \r\n            <span class=\"hljs-attr\">colors</span>=<span class=\"hljs-string\">{colors}</span> \r\n<span data-reference=\"Создание и одновременная передача функции, отвечающей за восходящий поток данных от дочернего компонента в состояние родительского компонента. В данном случае - удаление цветов при нажатии на кнопку\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">onRemoveColor</span>=<span class=\"hljs-string\">{id</span> =&gt;</span> {\r\n               const newColors = colors.filter(\r\n                  color =&gt; color.id !== id\r\n               );\r\n               setColors(newColors);\r\n            }}\r\n<span data-reference=\"То же, но изменение оценки конкретного цвета, при нажатии на компонент Star в StarRating\" class=\"conspect__reference\">i</span>            onRateColor={(id, rating) =&gt; {\r\n               const newColors = colors.map(\r\n                  color =&gt; color.id === id ? \r\n                  {...color, rating} : color\r\n               );\r\n               setColors(newColors);\r\n            }}\r\n         /&gt;</span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Компонент оценки цветов"
      },
      "3-use-input": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук useInput\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Пользовательский хук для управляемых \r\n   полей формы:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n<span data-reference=\"Хук получает начальное значение поля\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useInput</span>(<span class=\"hljs-params\">initial</span>) {\r\n<span data-reference=\"Внутри используется хук useState\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(initial);\r\n\r\n      <span class=\"hljs-keyword\">return</span> [\r\n<span data-reference=\"Возвращается объект свойств, который может целиком быть использован при формировании атрибутов элемента input\" class=\"conspect__reference\">i</span>         {value, <span class=\"hljs-attr\">onChange</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)},\r\n<span data-reference=\"Второй элемент - функция для сброса input в исходное состояние, initial хранится в замыкании хука\" class=\"conspect__reference\">i</span>         <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(initial)\r\n      ];\r\n   }\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useInput;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент AddColorForm\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AddColorForm</span>(<span class=\"hljs-params\">{ onAddNewColor }</span>) {                  \r\n<span data-reference=\"Использование хука useInput для управления полем title\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [titleProps, titleReset] = <span class=\"hljs-title function_\">useInput</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n<span data-reference=\"Использование хука useInput для управления полем color\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [colorProps, colorReset] = <span class=\"hljs-title function_\">useInput</span>(<span class=\"hljs-string\">&#x27;#000000&#x27;</span>);\r\n   \r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onSubmit</span> = e =&gt; {\r\n         e.<span class=\"hljs-title function_\">preventDefault</span>();\r\n<span data-reference=\"Передача текущих значений состояния родительскому компоненту через вызов функции\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">onAddNewColor</span>(\r\n            titleProps.<span class=\"hljs-property\">value</span>,\r\n            colorProps.<span class=\"hljs-property\">value</span>\r\n         );\r\n<span data-reference=\"Сброс полей ввода в исходное состояние\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">titleReset</span>();\r\n         <span class=\"hljs-title function_\">colorReset</span>();\r\n      };   \r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{onSubmit}</span>&gt;</span>\r\n<span data-reference=\"Использование объекта, возвращенного хуком useInput при формировании атрибутов полей ввода\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> {<span class=\"hljs-attr\">...titleProps</span>} /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> {<span class=\"hljs-attr\">...colorProps</span>} /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\r\n                  <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">100</span>,\r\n                  <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">20</span>,\r\n                  <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">colorProps.value</span>,\r\n               }}\r\n            &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Add new color!&quot;</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Может быть использован <span class=\"conspect__marked-text\">неуправляемый</span>\r\n   вариант AddColorForm, который получает ссылку на поле ввода через рефы,\r\n   а затем отправляет значение родительскому компоненту. Но такой компонент не интерактивен.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AddColorFormS</span>(<span class=\"hljs-params\">{ onAddNewColor }</span>) {\r\n<span data-reference=\"Создание рефов со ссылками на поля ввода\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> titleInput = <span class=\"hljs-title function_\">useRef</span>();\r\n      <span class=\"hljs-keyword\">const</span> colorInput = <span class=\"hljs-title function_\">useRef</span>();\r\n   \r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onSubmit</span> = e =&gt; {\r\n         e.<span class=\"hljs-title function_\">preventDefault</span>();\r\n   \r\n<span data-reference=\"Получение значений из полей ввода\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> title = titleInput.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>;\r\n         <span class=\"hljs-keyword\">const</span> color = colorInput.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>;\r\n   \r\n<span data-reference=\"Передача данных родительскому компоненту\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">onAddNewColor</span>(title, color);\r\n   \r\n<span data-reference=\"Обнуление значений полей\" class=\"conspect__reference\">i</span>         titleInput.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;\r\n         colorInput.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;\r\n      };   \r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{onSubmit}</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> \r\n<span data-reference=\"Привязка рефа к компоненту\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{titleInput}</span>\r\n<span data-reference=\"Вместо value нужно использовать placeholder\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Color title&quot;</span>\r\n<span data-reference=\"Большая часть валидации формы может быть осуществлена браузером\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">required</span>\r\n            /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> \r\n               <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{colorInput}</span> \r\n               <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Color code&quot;</span>\r\n               <span class=\"hljs-attr\">required</span> \r\n            /&gt;</span>         \r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Add new color!&quot;</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   компонент Application:\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт v4 для генерирования уникальных uuid\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { v4 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;uuid&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Application</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [colors, setColors] = <span class=\"hljs-title function_\">useState</span>(colorData);\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorList</span> \r\n               <span class=\"hljs-attr\">colors</span>=<span class=\"hljs-string\">{colors}</span> \r\n               <span class=\"hljs-attr\">onRemoveColor</span>=<span class=\"hljs-string\">{id</span> =&gt;</span> {\r\n                  const newColors = colors.filter(\r\n                     color =&gt; color.id !== id\r\n                  );\r\n                  setColors(newColors);\r\n               }}\r\n               onRateColor={(id, rating) =&gt; {\r\n                  const newColors = colors.map(\r\n                     color =&gt; color.id === id ? \r\n                     {...color, rating} : color\r\n                  );\r\n                  setColors(newColors);\r\n               }}\r\n            /&gt;\r\n<span data-reference=\"Определение функции изменяющей state с помощью данных получаемых от дочерних элементов\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AddColorForm</span> <span class=\"hljs-attr\">onAddNewColor</span>=<span class=\"hljs-string\">{</span>\r\n               (<span class=\"hljs-attr\">title</span>, <span class=\"hljs-attr\">color</span>) =&gt;</span> {\r\n<span data-reference=\"Создаем новый объект состояния\" class=\"conspect__reference\">i</span>                  const newColors = [\r\n<span data-reference=\"Добавляем в него данные предыдущего состояния\" class=\"conspect__reference\">i</span>                     ...colors,\r\n<span data-reference=\"Добавляем новые данные, полученные от дочернего компонента и сгенерированные v4\" class=\"conspect__reference\">i</span>                     {id: v4(), rating: 0, title, color}\r\n                  ];\r\n<span data-reference=\"Изменяем состояние родительского компонента\" class=\"conspect__reference\">i</span>                  setColors(newColors);\r\n               }\r\n            } /&gt;\r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук useInput"
      },
      "4-color-organizer-context": {
         "data": "<h2 class=\"conspect__header\">\r\n   ColorOrganizer с использованием контекста\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Версия ColorOrganizer, в которой исходные данные\r\n   и функции по управлению ими находятся в отдельном \r\n   компоненте верхнего уровня. Данные и функции передаются \r\n   дочерним компонентам с помощью контекста.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент ColorProvider:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { createContext, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> colorData <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../6-125/color-data.json&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { v4 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;uuid&quot;</span>;\r\n\r\n<span data-reference=\"Создаем контекст\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ColorContext</span> = <span class=\"hljs-title function_\">createContext</span>();\r\n\r\n<span data-reference=\"Компонент будет хранить актуальные данные и методы их управлением, рендерить дочерние компоненты\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorProvider</span>(<span class=\"hljs-params\">{children}</span>) {\r\n<span data-reference=\"Массив с цветами находится в состоянии\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [colors, setColors] = <span class=\"hljs-title function_\">useState</span>(colorData);\r\n\r\n<span data-reference=\"Функция добавления цветов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">addColor</span> = (<span class=\"hljs-params\">title, color</span>) =&gt; {\r\n         <span class=\"hljs-keyword\">const</span> newColors = [\r\n            ...colors,\r\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-title function_\">v4</span>(), title, color, <span class=\"hljs-attr\">rating</span>: <span class=\"hljs-number\">0</span>}\r\n         ];\r\n         <span class=\"hljs-title function_\">setColors</span>(newColors);\r\n      };\r\n\r\n<span data-reference=\"Функция удаления цветов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">removeColor</span> = (<span class=\"hljs-params\">id</span>) =&gt; {\r\n         <span class=\"hljs-keyword\">const</span> newColors = colors.<span class=\"hljs-title function_\">filter</span>(\r\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">color</span>) =&gt;</span> color.<span class=\"hljs-property\">id</span> !== id\r\n         );\r\n         <span class=\"hljs-title function_\">setColors</span>(newColors);\r\n      };\r\n\r\n<span data-reference=\"Функция оценки цветов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">rateColor</span> = (<span class=\"hljs-params\">id, rating</span>) =&gt; {\r\n         <span class=\"hljs-keyword\">const</span> newColors = colors.<span class=\"hljs-title function_\">map</span>(\r\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">color</span>) =&gt;</span> color.<span class=\"hljs-property\">id</span> === id ? \r\n            {...color, rating} : color\r\n         );\r\n         <span class=\"hljs-title function_\">setColors</span>(newColors);\r\n      };\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Компонент Provider предоставляет доступ потомкам к обьекту, содержащему актуальный массив цветов и функции для управлением состоянием\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorContext.Provider</span>\r\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span>                                     \r\n               <span class=\"hljs-attr\">colors</span>, \r\n               <span class=\"hljs-attr\">addColor</span>,\r\n               <span class=\"hljs-attr\">rateColor</span>,\r\n               <span class=\"hljs-attr\">removeColor</span>\r\n            }}\r\n         &gt;</span>\r\n<span data-reference=\"Рендер дочерних компонентов\" class=\"conspect__reference\">i</span>            {children}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ColorContext.Provider</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Экспорт основного компонента и контекста, для обеспечения доступа к данным провайдера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">ColorContext</span>, <span class=\"hljs-title class_\">ColorProvider</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">default</span> };\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Хук для использования контекста в компонентах:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n<span data-reference=\"Импортируем контекст из ColorProvider\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ColorContext</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./ColorProvider&quot;</span>;\r\n\r\n<span data-reference=\"Хук для извлечения данных из контекста, передаваемых от провайдера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useColor</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ColorContext</span>);\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useColor;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент Application:\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонент больше не содержит состояния и методов для управления им\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Application</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorProvider</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorList</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AddColorForm</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ColorProvider</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент ColorList:\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импортируем хук для извлечения данных\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> useColor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./useColor&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorList</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Получаем актуальный массив с цветами из хука\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> { colors } = <span class=\"hljs-title function_\">useColor</span>();\r\n\r\n      <span class=\"hljs-keyword\">if</span>(!colors.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>No colors listed!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Рендерим актуальный массив с цветами, полученный из контекста\" class=\"conspect__reference\">i</span>            {colors.map(color =&gt; (\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Color</span> \r\n                  <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{color.id}</span>\r\n                  {<span class=\"hljs-attr\">...color</span>} \r\n               /&gt;</span>\r\n            ))}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }     \r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент Color:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Color</span>(<span class=\"hljs-params\">{ id, title, color, rating }</span>) {\r\n\r\n<span data-reference=\"Получаем из хука функции для удаления и оценки цветов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> {rateColor, removeColor} = <span class=\"hljs-title function_\">useColor</span>();\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{position:</span> &#x27;<span class=\"hljs-attr\">relative</span>&#x27;}}&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> <span class=\"hljs-attr\">30</span>, <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">color</span>}}&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StarRating</span> \r\n               <span class=\"hljs-attr\">rating</span>=<span class=\"hljs-string\">{rating}</span> \r\n<span data-reference=\"Передаем компоненту функцию, созданную на основе rateColor, полученной из контекста\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onRate</span>=<span class=\"hljs-string\">{rating</span> =&gt;</span> rateColor(id, rating)}\r\n            /&gt;\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> \r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{buttonStyle}</span>\r\n<span data-reference=\"Передаем компоненту функцию, созданную на основе removeColor, полученной из контекста\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> removeColor(id)}\r\n            &gt;\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FiTrash2</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Компонент AddCodeForm:\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AddColorForm</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [titleProps, titleReset] = <span class=\"hljs-title function_\">useInput</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n      <span class=\"hljs-keyword\">const</span> [colorProps, colorReset] = <span class=\"hljs-title function_\">useInput</span>(<span class=\"hljs-string\">&#x27;#000000&#x27;</span>);\r\n      \r\n<span data-reference=\"Получаем из хука функцию для добавления цветов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> { addColor } = <span class=\"hljs-title function_\">useColor</span>();\r\n   \r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onSubmit</span> = e =&gt; {\r\n         e.<span class=\"hljs-title function_\">preventDefault</span>();\r\n<span data-reference=\"Используем полученную из контекста функцию addColor\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">addColor</span>(\r\n            titleProps.<span class=\"hljs-property\">value</span>,\r\n            colorProps.<span class=\"hljs-property\">value</span>\r\n         );\r\n         <span class=\"hljs-title function_\">titleReset</span>();\r\n         <span class=\"hljs-title function_\">colorReset</span>();\r\n      };   \r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{onSubmit}</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> {<span class=\"hljs-attr\">...titleProps</span>} /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> {<span class=\"hljs-attr\">...colorProps</span>} /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\r\n                  <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">100</span>,\r\n                  <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">20</span>,\r\n                  <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">colorProps.value</span>,\r\n               }}\r\n            &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Add new color!&quot;</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "ColorOrganizer с использованием контекста"
      },
      "1-effect-hook": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук эффектов и зависимости\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук эффектов вызывается <span class=\"conspect__marked-text\">после</span> \r\n   рендеринга и последующей отрисовки страницы браузером.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Использование массива зависимостей:\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Без указания правильных зависимостей в массиве зависимостей\r\n   хуков эффекта, оба хука будут вызываться при изменении любого из\r\n   состояний.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PhraseLogger</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"В первом состоянии - текущее значение поля ввода\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [val, setVal] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n<span data-reference=\"Во втором состоянии сформированная полем ввода фраза\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [phrase, setPhrase] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n      \r\n<span data-reference=\"Эффект логирования в консоль данных из поля ввода\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Typed: <span class=\"hljs-subst\">${val}</span>`</span>);\r\n<span data-reference=\"Эффект будет вызван только при изменении val, при изменении phrase он не вызывается\" class=\"conspect__reference\">i</span>      }, [val]);\r\n\r\n<span data-reference=\"Эффект логирования в консоль сформированной фразы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Phrase formed: <span class=\"hljs-subst\">${phrase}</span>`</span>);\r\n<span data-reference=\"Эффект будет вызван только при изменении phrase, при изменении val он не вызывается\" class=\"conspect__reference\">i</span>      }, [phrase]);\r\n   \r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createPhrase</span> = (<span class=\"hljs-params\"></span>) =&gt; {\r\n         <span class=\"hljs-title function_\">setPhrase</span>(val);\r\n         <span class=\"hljs-title function_\">setVal</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>); \r\n      };\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Favorite fraze: {phrase}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>             \r\n               <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setVal(e.target.value)}\r\n               value={val}\r\n            /&gt;\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{createPhrase}</span>&gt;</span>\r\n               Save phrase!\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук эффектов и зависимости"
      },
      "2-effect-deps": {
         "data": "<h2 class=\"conspect__header\">\r\n   Зависимости хука эффектов\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   useMemo\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Пользовательский хук для принудительного\r\n   рендеринга:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useAnyKeyRender</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"При изменении состояния будет происходить повторный рендеринг\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [, forceRender] = <span class=\"hljs-title function_\">useState</span>();\r\n   \r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Добавляем слушатель к объекту window, изменяющий состояние на объект события при нажатии любой клавиши\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, forceRender);\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> \r\n            <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, forceRender);\r\n      }, []);\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент выводящий в консоль сообщение\r\n   о вызове хука useEffect:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">EffectLogger</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Выполнить повторный рендеринг компонента при нажатии любой клавиши\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useAnyKeyRender</span>();\r\n   \r\n<span data-reference=\"Без массива зависимостей, сообщение выводится каждый раз\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Fresh render!&#x27;</span>);\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Open console!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Добавим зависимость от примитивного текстового\r\n   значения:\r\n</p>\r\n<pre><code>   \r\n   <span class=\"hljs-keyword\">const</span> word = <span class=\"hljs-string\">&quot;gnar&quot;</span>;\r\n\r\n<span data-reference=\"Сообщение выводится только при первом рендере, так как примитивное значение не изменяется\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Fresh render!&#x27;</span>);\r\n   }, [word]);\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Добавим зависимость от объекта в виде\r\n   массива строк:\r\n</p>\r\n<pre><code>   \r\n   <span class=\"hljs-keyword\">const</span> words = [<span class=\"hljs-string\">&quot;sick&quot;</span>, <span class=\"hljs-string\">&quot;powder&quot;</span>, <span class=\"hljs-string\">&quot;day&quot;</span>];\r\n\r\n<span data-reference=\"Сообщение выводится при каждом рендере, так как каждый рендер создается новый массив, а объекты сравниваются по ссылкам\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Fresh render!&#x27;</span>);\r\n   }, [words]);\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Используем хук useMemo, чтобы кэшировать \r\n   объект:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Используем хук для кэширования объекта\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> words = <span class=\"hljs-title function_\">useMemo</span>(\r\n<span data-reference=\"Передаем функцию, вычисляющую кэшированный объект\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">() =&gt;</span> [<span class=\"hljs-string\">&quot;sick&quot;</span>, <span class=\"hljs-string\">&quot;powder&quot;</span>, <span class=\"hljs-string\">&quot;day&quot;</span>],\r\n<span data-reference=\"Передаем массив зависимостей, на основании которого функция первый аргумент, вычисляет возвращаемое значение\" class=\"conspect__reference\">i</span>      []\r\n   ); \r\n\r\n<span data-reference=\"Сообщение выводится только при первом рендере, так как при каждом рендере ссылка на кэшированный объект массива не изменяется\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Fresh render!&#x27;</span>);\r\n   }, [words]);\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   useCallback\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Для кэширования функций аналогичным образом\r\n   используется useCallback:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Используем хук для кэширования функции\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-title function_\">useCallback</span>(\r\n<span data-reference=\"Передаем функцию, подлежащую кэшированию\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Hi!&#x27;</span>),\r\n<span data-reference=\"Передаем массив зависимостей, от которых зависит кэшируемая функция\" class=\"conspect__reference\">i</span>      []\r\n   );\r\n\r\n   <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Сообщение выводится только при первом рендере, так как при каждом рендере ссылка на кэшированную функцию не изменяется\" class=\"conspect__reference\">i</span>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Fresh render!&#x27;</span>);\r\n   }, [fn]);\r\n</code></pre>",
         "title": "Зависимости хука эффектов"
      },
      "3-layoutEffect-hook": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук эффектов макета\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук эффектов макета вызывается после рендеринга\r\n   и но <span class=\"conspect__marked-text\">перед</span> \r\n   последующей отрисовкой страницы браузером, и соответственно\r\n   перед хуком useEffect.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Использование пользоветельского хука, для работы\r\n   с изменением размера окна, подразумевает выполнение \r\n   каких либо действий до отрисовки страницы браузером:      \r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useWindowSize</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Используем состояние для хранения высоты и ширины окна\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [height, setHeight] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\r\n      <span class=\"hljs-keyword\">const</span> [width, setWidth] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\r\n   \r\n<span data-reference=\"Определяем функцию для изменения состояния при изменении размеров окна\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">resize</span> = (<span class=\"hljs-params\"></span>) =&gt; {\r\n         <span class=\"hljs-title function_\">setHeight</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>);\r\n         <span class=\"hljs-title function_\">setWidth</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span>);\r\n      };\r\n   \r\n<span data-reference=\"В хуке вызываем функцию изменения состояния, и привязываем слушатель к объекту window\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useLayoutEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, resize);\r\n         <span class=\"hljs-title function_\">resize</span>();\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> \r\n            <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, resize);\r\n      }, []);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> {width, height};\r\n   }\r\n</code></pre>",
         "title": "Хук эффектов макета"
      },
      "4-hooks-rules": {
         "data": "<h2 class=\"conspect__header\">\r\n   Правила использования хуков\r\n</h2>\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Хуки работают только в рамках компонента,\r\n      либо пользовательских хуков, которые также \r\n      вызываются в рамках компонентов.\r\n   </li>\r\n   <li>\r\n      Функциональность разного назначения следует разбивать\r\n      на разные хуки, чтобы они имели небольшой размер,\r\n      и не смешивали код разной функциональности.\r\n   </li>\r\n   <li>\r\n      Хуки следует вызывать только на верхнем уровне\r\n      внутри компонента. Любую условную логику, циклы или\r\n      асинхронное поведение нужно реализовывать внутри хуков. \r\n      При этом асинхронную функцию можно создать внутри \r\n      синхронного колбэка useEffect.\r\n   </li>\r\n</ol>",
         "title": "Правила использования хуков"
      },
      "5-reducer-hook": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук редуктора\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук позволяет использовать для работы с состоянием \r\n   функцию редуктор, которая принимает начальное \r\n   состояние и возвращает новое состояние.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Checkbox</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [\r\n<span data-reference=\"Переменная с текущим состоянием\" class=\"conspect__reference\">i</span>         checked,\r\n<span data-reference=\"Функция, при вызове которой состояние изменяется определенным образом\" class=\"conspect__reference\">i</span>         toggle\r\n      ] = <span class=\"hljs-title function_\">useReducer</span>(\r\n<span data-reference=\"Функция редуктор реализует логику изменения состояния, принимает исходное состояние и возвращает новое\" class=\"conspect__reference\">i</span>         <span class=\"hljs-function\"><span class=\"hljs-params\">checked</span> =&gt;</span> !checked,\r\n<span data-reference=\"Начальное значение состояния\" class=\"conspect__reference\">i</span>         <span class=\"hljs-literal\">false</span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>\r\n<span data-reference=\"Передаем элементу функцию для изменения состояния\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{toggle}</span>\r\n<span data-reference=\"Передаем элементу переменную с текущим состоянием\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\r\n            /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\r\n               {checked ? &#x27;checked&#x27; : &#x27;not checked&#x27;}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук редуктора может быть использован с функцией\r\n   редуктором, принимающей 2 аргумента:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> [value, addValue] = <span class=\"hljs-title function_\">useReducer</span>(\r\n<span data-reference=\"В переменной current - текущее значение состояния, в additional дополнительное значение\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">(<span class=\"hljs-params\">current, additional</span>) =&gt;</span> current + additional,\r\n      <span class=\"hljs-number\">0</span>\r\n   );\r\n\r\n<span data-reference=\"Такой синтаксис редуктора позволяет пердать дополнительный аргумент\" class=\"conspect__reference\">i</span>   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> addValue(50)}&gt;\r\n      Current value: {value}\r\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Управление сложным состоянием:\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Сложное состояние, объект с большим количеством полей\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> userData = {\r\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&quot;0391-3233-3201&quot;</span>,\r\n      <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&quot;Bill&quot;</span>,\r\n      <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&quot;Wilson&quot;</span>,\r\n      <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;Missoula&quot;</span>,\r\n      <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&quot;Montana&quot;</span>,\r\n      <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;bwilson@mtnwilsons.com&quot;</span>,\r\n      <span class=\"hljs-attr\">admin</span>: <span class=\"hljs-literal\">false</span>   \r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserCard</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [user, setUser] = <span class=\"hljs-title function_\">useReducer</span>(\r\n<span data-reference=\"Создаем новый объект состояния, с обновленными полями из newDetails\" class=\"conspect__reference\">i</span>         <span class=\"hljs-function\">(<span class=\"hljs-params\">user, newDetails</span>) =&gt;</span> (\r\n            {...user, ...newDetails}\r\n         ),\r\n         userData\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>\r\n               {user.firstName} {user.lastName} - {user.admin ? &#x27;Admin&#x27; : &#x27;User&#x27;}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Email: {user.email}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Location: {user.city} {user.state}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n<span data-reference=\"Просто передаем функции объект с новыми полями\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setUser({admin: true})}&gt;\r\n               Make admin\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">UserCard</span>;\r\n</code></pre>",
         "title": "Хук редуктора"
      },
      "6-rendering-improving": {
         "data": "<h2 class=\"conspect__header\">\r\n   Повышение производительности рендеринга\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   React создан быть быстрым. Он уже быстрый. \r\n   Любой рефакторинг может быть только крайней мерой, \r\n   у которой должна быть конкретная цель. Рефакторинг\r\n   проводится только для готового рабочего приложения, \r\n   Педварительное измерение производительности компонентов \r\n   которого нужно использовать React Profiler.\r\n   Рефакторинг влечет за собой компромиссы. Частое использование хуков\r\n   useCallback и useMemo может снизить производительность приложения, которое\r\n   требует больше строк кода и больше времени разработчика.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Паттерны оптимизации рендеринга\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Использование memo для функциональных компонентов (аналог\r\n   PureComponent для классовых), позволяет создавать компоненты, \r\n   повторный рендер которых происходит только при изменении пропов.   \r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Импорт memo из react\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { memo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n<span data-reference=\"Компонет будет повторно рендерится только при изменении пропов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Cat</span>(<span class=\"hljs-params\">{name, meow}</span>) {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Rendering <span class=\"hljs-subst\">${name}</span>`</span>);\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{meow}</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Создание чистого компонента, вторым аргументом можно передать функцию проверки сложных пропов, возвращающую true (пропы одинаковы, рендера нет) или false (повторный рендер).\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PureCat</span> = <span class=\"hljs-title function_\">memo</span>(<span class=\"hljs-title class_\">Cat</span>, fn);\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">PureCat</span>;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   При использовании чистых компонентов, для предотвращения\r\n   повторных рендеров при передаче функций или объектов \r\n   дочерним компонентам (создаются каждый раз заново и проверяются\r\n   на равенство по ссылке), используются useMemo и useContext:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> initialCats = [<span class=\"hljs-string\">&#x27;Bob&#x27;</span>, <span class=\"hljs-string\">&#x27;Murka&#x27;</span>, <span class=\"hljs-string\">&#x27;Bisquit&#x27;</span>];\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Shelter</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [cats, addCat] = <span class=\"hljs-title function_\">useState</span>(initialCats);  \r\n\r\n<span data-reference=\"Кэширование колбэка передаваемого дочерним компонентам хуком useCallback\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> meow = <span class=\"hljs-title function_\">useCallback</span>(\r\n         <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Meow!!!&#x27;</span>),\r\n         []\r\n      );\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n            {cats.map((name, i) =&gt; (\r\n<span data-reference=\"Рендеринг чистых компонентов\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PureCat</span>\r\n                  <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{i}</span>                    \r\n<span data-reference=\"Простое свойство, проверяется на идентичность по значению\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{name}</span>\r\n<span data-reference=\"Функция закэширована, ссылка на функцию идентична при каждом рендере\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">meow</span>=<span class=\"hljs-string\">{meow}</span>\r\n               /&gt;</span>  \r\n            ))}\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> \r\n               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> addCat(\r\n                  [...cats, prompt(&#x27;Enter cat\\&#x27;s name:&#x27;)]\r\n               )}\r\n            &gt;\r\n               Save a cat!\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n         \r\n      )\r\n   }\r\n</code></pre>",
         "title": "Повышение производительности рендеринга"
      },
      "1-data-exchange": {
         "data": "<h2 class=\"conspect__header\">\r\n   Способы обмена данными\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Получение данных с сервера\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Код содержит принципиальные схемы для разъяснения \r\n   методов обмена данными и <span class=\"conspect__marked-text\">\r\n   не включает</span> предварительую проверку аргументов функций\r\n   и обработку возможных ошибок.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\">url</span>) {\r\n<span data-reference=\"Отправка запроса на сервер\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url);\r\n<span data-reference=\"Получение ответа в формате json, также возможно получить данные в text, formData, blob, arrayBuffer форматах\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> dataObject = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\r\n      <span class=\"hljs-keyword\">return</span> dataObject;\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Отправка данных на сервер\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">postData</span>(<span class=\"hljs-params\">url, data</span>) {\r\n      <span class=\"hljs-keyword\">const</span> response =  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url, {\r\n<span data-reference=\"Используется метод POST\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\r\n<span data-reference=\"Отправка даных в формате JSON\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">body</span>: <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data)\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">const</span> answer = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\r\n      <span class=\"hljs-keyword\">return</span> answer;\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Отправка на сервер данных формы\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendData</span>(<span class=\"hljs-params\">url, formID</span>) {\r\n<span data-reference=\"Получаем объект формы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> form = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(formID);\r\n<span data-reference=\"Создаем объект данных формы, который может содержать даже файлы. Объект можно создать вручную.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>(form);\r\n   \r\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url, {\r\n<span data-reference=\"Используется метод POST\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\r\n<span data-reference=\"Отправка данных в формате multipart/form-data\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">body</span>: formData\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">const</span> answer = response.<span class=\"hljs-title function_\">json</span>();\r\n      <span class=\"hljs-keyword\">return</span> answer;\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Авторизованные запросы\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getDataAuth</span>(<span class=\"hljs-params\">url, token</span>) {\r\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url, {\r\n         <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;GET&#x27;</span>,\r\n<span data-reference=\"Необходимо указать заголовок\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">headers</span>: {\r\n<span data-reference=\"В свойстве authorization предаем строку с токеном JWT\" class=\"conspect__reference\">i</span>            <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${token}</span>`</span>\r\n         }\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">const</span> data = response.<span class=\"hljs-title function_\">json</span>();\r\n      <span class=\"hljs-keyword\">return</span> data;\r\n   }\r\n</code></pre>",
         "title": "Способы обмена данными"
      },
      "2-data-fetching": {
         "data": "<h2 class=\"conspect__header\">\r\n   Запрос данных с сервера\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент запрашивает данные с сервера\r\n   а затем отображает их:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GitHubUser</span>(<span class=\"hljs-params\">{login}</span>) {\r\n<span data-reference=\"В состоянии компонента хронится текущий объект пользователя\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\r\n\r\n<span data-reference=\"В хуке эффектов осуществляется запрос даных на сервер\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Запрос данных осуществляется методом fetch\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`https://api.github.com/users/<span class=\"hljs-subst\">${login}</span>`</span>)\r\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\r\n<span data-reference=\"При получении данных, мы изменяем состояние, что инициирует повторный рендер компонента\" class=\"conspect__reference\">i</span>            .<span class=\"hljs-title function_\">then</span>(setData)\r\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">error</span>);\r\n<span data-reference=\"Массив зависимостей разрешает запуск хука только при начальном рендере и изменении login\" class=\"conspect__reference\">i</span>      }, [login]);\r\n   \r\n      <span class=\"hljs-keyword\">if</span>(data) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span>&gt;</span>\r\n               {JSON.stringify(data, null, 2)}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></span>\r\n      );\r\n      \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Somthing went wrong...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Запрос данных с сервера"
      },
      "3-data-storage": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хранение данных на клиенте\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент не только запрашивает данные с сервера,\r\n   но и сохраняет выборку из них в localStorage,\r\n   при наличии данных в localStorage запрос на сервер не \r\n   происводится.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Функция загрузки пользователя из localStorage\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">loadUser</span> = (<span class=\"hljs-params\">key</span>) =&gt; {\r\n<span data-reference=\"Если ключь не предоставлен - выйти\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(!key) <span class=\"hljs-keyword\">return</span>;\r\n<span data-reference=\"Запросить данные по ключу\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> userJSON = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(key);\r\n<span data-reference=\"Если данные найдены вернуть объект полученный парсингом JSON\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(userJSON) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(userJSON);\r\n<span data-reference=\"Иначе вернуть null\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n   };\r\n   \r\n<span data-reference=\"Функция сохранения пользователя в localStorage\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">saveUser</span> = (<span class=\"hljs-params\">key, value</span>) =&gt; {\r\n<span data-reference=\"Если один из аргументов небыл передан выйти\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(!key || !value) <span class=\"hljs-keyword\">return</span>;\r\n<span data-reference=\"Сохранить данные в localStorage\" class=\"conspect__reference\">i</span>      <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(\r\n         key,\r\n<span data-reference=\"Перед сохранением данные нужно преобразовать в JSON\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(value)\r\n      );\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GitHubUserCashed</span>(<span class=\"hljs-params\">{login}</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [user, setUser] = <span class=\"hljs-title function_\">useState</span>(\r\n<span data-reference=\"Попытаться извлечь данные из localStorage\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">loadUser</span>(<span class=\"hljs-string\">`user:<span class=\"hljs-subst\">${login}</span>`</span>)\r\n      );\r\n   \r\n<span data-reference=\"Сохраняем данные в localStorage\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Если объект пользователя небыл получен или логин объекта пользователя совпадает с логином из пропсов, сохранение в localStorage не требуется\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(!user || user.<span class=\"hljs-property\">login</span> === login) <span class=\"hljs-keyword\">return</span>;\r\n   \r\n<span data-reference=\"Сделать выборку из данных и сохранить только необходимые\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> {name, avatar_url, location} = user;\r\n         <span class=\"hljs-title function_\">saveUser</span>(\r\n            <span class=\"hljs-string\">`user:<span class=\"hljs-subst\">${login}</span>`</span>,\r\n            {login, name, avatar_url, location}\r\n         );\r\n      }, [user, login]);\r\n   \r\n<span data-reference=\"Если данные отсутствуют в localStorage запросить их с сервера\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Если логин небыл предоставлен в пропсах запрос данных не может быть осуществлен\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(!login) <span class=\"hljs-keyword\">return</span>;\r\n<span data-reference=\"Если объект пользователя уже был извлечен из localStorage и пользователь имеет актуальный логин, запрос осуществлят не нужно\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(user &amp;&amp; user.<span class=\"hljs-property\">login</span> === login) <span class=\"hljs-keyword\">return</span>;\r\n   \r\n<span data-reference=\"Иначе выполнить запрос на сервер\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`https://api.github.com/users/<span class=\"hljs-subst\">${login}</span>`</span>)\r\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\r\n            .<span class=\"hljs-title function_\">then</span>(setUser)\r\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">error</span>);\r\n      }, [user, login]);\r\n   \r\n      <span class=\"hljs-keyword\">if</span>(user) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span>{JSON.stringify(user, null, 3)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Something went wrong!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   С localStorage мы можем работать с локальными данными без подключения к сети, \r\n   также это позволяет повысить производительность приложений за счет сокращения числа сетевых\r\n   запросов. Но это усложнит приложение и может затруднить его разработку.\r\n   <span class=\"conspect__marked-text\">Не нужно работать с веб-хранилищем для кеширования данных.</span>\r\n   Можно разрешить браузеру обрабатывать кеширование. Браузер будет автоматически\r\n   кэшировать контент, если добавить в заголовки строку Cache-Control: max-age=31536000 (60 дней в секундах).\r\n</p>",
         "title": "Хранение данных на клиенте"
      },
      "4-response-processing": {
         "data": "<h2 class=\"conspect__header\">\r\n   Обработка запроса\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Промисы возвращаемые функцией fetch могут\r\n   иметь три состояния: pending, fulfilled, rejected.\r\n   соответственно и компонент может иметь три соостояния:\r\n   loading, rendered и error. Обработка всех трех состояний \r\n   увеличивает объем кода, но ее необходимо проводить при каждом запросе.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GitHubUser</span>(<span class=\"hljs-params\">{login}</span>) {\r\n      <span class=\"hljs-comment\">// State</span>\r\n      <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>();\r\n      <span class=\"hljs-keyword\">const</span> [error, setError] = <span class=\"hljs-title function_\">useState</span>();\r\n      <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\r\n   \r\n      <span class=\"hljs-comment\">// Effects</span>\r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">if</span>(!login) <span class=\"hljs-keyword\">return</span>;\r\n   \r\n         <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);      \r\n         <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`https://api.github.com/users/<span class=\"hljs-subst\">${login}</span>`</span>)\r\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\r\n            .<span class=\"hljs-title function_\">then</span>(setData)\r\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>))\r\n            .<span class=\"hljs-title function_\">catch</span>(setError);\r\n      }, [login]);\r\n   \r\n      <span class=\"hljs-comment\">// Rendering</span>\r\n      <span class=\"hljs-keyword\">if</span>(error) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>\r\n            {error.message}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">if</span>(loading) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">if</span>(!data) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\r\n               <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{data.avatar_url}</span>\r\n               <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{data.login}</span>\r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{maxWidth:</span> <span class=\"hljs-attr\">200</span>}}\r\n            /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{data.login}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n               {data.name &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{data.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\r\n               {data.location &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{data.location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Обработка запроса"
      },
      "5-render-props": {
         "data": "<h2 class=\"conspect__header\">\r\n   Рендер-пропсы\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Рендер-пропсом может быть компонент или элемент, переданный другому\r\n   компоненту для рендера через пропсы, либо функция возвращающая \r\n   компонент или элемент, также переданная компоненту для рендера через пропсы.\r\n   Рендер-пропсы полезны для реализации повторного использования компонентов.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   List.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонент принимает рендер-пропсы и данные для рендера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">List</span>(<span class=\"hljs-params\">{\r\n<span data-reference=\"Данные для рендера, поумолчанию пустой массив\" class=\"conspect__reference\">i</span>      data = [],\r\n<span data-reference=\"Рендер-пропс, компонент который рендерится в случае пустого массива данных\" class=\"conspect__reference\">i</span>      renderEmpty,\r\n<span data-reference=\"Рендер-пропс, функция, принимающая данные, и возвразающая компонент - элемент списка\" class=\"conspect__reference\">i</span>      renderItem\r\n   }</span>) {\r\n<span data-reference=\"Условный рендер, если массив данных пуст то...\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> !data.<span class=\"hljs-property\">length</span> ?\r\n<span data-reference=\"Рендер компонента полученного через пропсы\" class=\"conspect__reference\">i</span>         renderEmpty : (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\r\n               {data.map((item, i) =&gt; (\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{i}</span>&gt;</span>\r\n<span data-reference=\"Вызов функции, возвращающей компонент, полученной через пропсы\" class=\"conspect__reference\">i</span>                     {renderItem(item)}\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n               ))}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\r\n         );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   App.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> \r\n<span data-reference=\"Передача данных компоненту\" class=\"conspect__reference\">i</span>          <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{tahoePeaks}</span>\r\n<span data-reference=\"Передача рендер-пропса, компонента для рендера\" class=\"conspect__reference\">i</span>          <span class=\"hljs-attr\">renderEmpty</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">p</span>&gt;</span>Data is empty...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\r\n<span data-reference=\"Передача рендер-пропса, функции, принимающей данные и возвращающей компонент для рендера\" class=\"conspect__reference\">i</span>          renderItem={(item) =&gt; (\r\n            <span class=\"hljs-tag\">&lt;&gt;</span>\r\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b</span>&gt;</span>{item.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b</span>&gt;</span> - \r\n              {item.elevation.toLocaleString()}\r\n            <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n          )}\r\n        /&gt;\r\n      );\r\n    }\r\n</code></pre>",
         "title": "Рендер-пропсы"
      },
      "6-virtualized-list": {
         "data": "<h2 class=\"conspect__header\">\r\n   Виртуализированные списки\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Отображение очень длинных списков требует много ресурсов\r\n   и может замедлить приложение. Для их отображения можно\r\n   использовать готовые компоненты, которые отображают небольшое\r\n   количество элементов и постоянно обновляют его.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   fakerData.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   faker генерирует большое количество фиктивных данных.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Импортируем библиотеку faker\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> faker <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;faker&#x27;</span>;\r\n\r\n<span data-reference=\"Создаем пустой массив с 5000 элементов и заполняем его данными\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> fakerData = [...<span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">5000</span>)].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> ({\r\n      <span class=\"hljs-attr\">name</span>: faker.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">findName</span>(),                    \r\n      <span class=\"hljs-attr\">email</span>: faker.<span class=\"hljs-property\">internet</span>.<span class=\"hljs-title function_\">email</span>(),\r\n      <span class=\"hljs-attr\">avatar</span>: faker.<span class=\"hljs-property\">internet</span>.<span class=\"hljs-title function_\">avatar</span>()\r\n   }));\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> fakerData;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   ReactWindow.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> fakerData <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./fakerData&quot;</span>;\r\n<span data-reference=\"Импортируем компонент FixedSizeList\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FixedSizeList</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-window&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ReactWindow</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Создаем функцию используемую как рендер-проп, которая принимает объект с индексом в массиве данных и набором стилей\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">renderRow</span> = (<span class=\"hljs-params\">{index, style}</span>) =&gt; (\r\n<span data-reference=\"Возвращаем компонент одного пункта списка, используем полученный объект со стилями, если нужно добавляем свои стили\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{...style,</span> <span class=\"hljs-attr\">...</span>{<span class=\"hljs-attr\">display:</span> &#x27;<span class=\"hljs-attr\">flex</span>&#x27;}}}&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\r\n<span data-reference=\"Доступ к данным в массиве осуществляется по их индексу\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{fakerData[index].avatar}</span>\r\n               <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{fakerData[index].name}</span>\r\n               <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{50}</span>\r\n            /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\r\n               {fakerData[index].name} - \r\n               {fakerData[index].email}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Создаем компонент FixedSizeList\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FixedSizeList</span>\r\n<span data-reference=\"Передаем высоту списка\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{window.innerHeight}</span>\r\n<span data-reference=\"Передаем ширину списка\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\r\n<span data-reference=\"Передаем общее количество элементв\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{fakerData.length}</span>\r\n<span data-reference=\"Передаем dысоту одного элемента\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">itemSize</span>=<span class=\"hljs-string\">{50}</span>\r\n         &gt;</span>\r\n<span data-reference=\"В качестве дочернего компонента передаем функцию рендера строк\" class=\"conspect__reference\">i</span>            {renderRow}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FixedSizeList</span>&gt;</span></span>\r\n      )\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ReactWindow</span>;\r\n</code></pre>",
         "title": "Виртуализированные списки"
      },
      "7-useFetch": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук useFetch\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Пользовательский хук для получения данных\r\n   с сервера, обрабатывает все три состояния запросов\r\n   отправка, успех, ошибка:\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useFetch</span>(<span class=\"hljs-params\">url</span>) {\r\n<span data-reference=\"Состояние загрузки\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\r\n<span data-reference=\"Состояние загруженных данных\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>();\r\n<span data-reference=\"Состояние ошибки\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [error, setError] = <span class=\"hljs-title function_\">useState</span>();\r\n   \r\n<span data-reference=\"Для отаправки запроса используется хук эффекта\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Если url не передан, выйти\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(!url) <span class=\"hljs-keyword\">return</span>;\r\n   \r\n<span data-reference=\"Установить состояние загрузки\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\r\n<span data-reference=\"Делаем запрос на сервер\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">fetch</span>(url)\r\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())\r\n<span data-reference=\"Устанавливаем загруженные данные в состояние\" class=\"conspect__reference\">i</span>            .<span class=\"hljs-title function_\">then</span>(setData)\r\n<span data-reference=\"Если возникает ошибка, устанавливаем состояние ошибки\" class=\"conspect__reference\">i</span>            .<span class=\"hljs-title function_\">catch</span>(setError)\r\n<span data-reference=\"В конце запроса изменяем состояние загрузки\" class=\"conspect__reference\">i</span>            .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>));\r\n      }, [url]);\r\n   \r\n<span data-reference=\"Возвращаем объект с актуальными переменными состояния\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> {loading, data, error};\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   GitHubUser.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент использующий хук \r\n   useFetch:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GitHubUser</span>(<span class=\"hljs-params\">{login}</span>) {\r\n<span data-reference=\"Использование хука useFetch\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> {error, loading, data} = <span class=\"hljs-title function_\">useFetch</span>(\r\n         <span class=\"hljs-string\">`https://api.github.com/users/<span class=\"hljs-subst\">${login}</span>`</span>\r\n      );\r\n   \r\n<span data-reference=\"Обработка состояния загрузки\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(loading || !data) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Loading data...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n<span data-reference=\"Обработка состояния ошибки\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(error) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Error: {error.message}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n\r\n<span data-reference=\"Обработка успешно полученных данных\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\r\n               <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{data.avatar_url}</span>\r\n               <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{data.name}</span>\r\n               <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{300}</span>\r\n            /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{data.login}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n               {data.name &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{data.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\r\n               {data.location &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{data.location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}            \r\n               {data.bio &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{data.bio}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}            \r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук useFetch"
      },
      "8-fetch-component": {
         "data": "<h2 class=\"conspect__header\">\r\n   Компонент Fetch\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент Fetch служит для многократного использования, чтобы \r\n   в зависимости от хода загрузки данных отображать один из \r\n   полученных через рендер пропсы компонентов. \r\n</p>\r\n<p class=\"conspect__text\">\r\n   Хук useFetch реализует один слой абстракции: он абстрагирует \r\n   механику выполнения запроса на выборку. Компонент Fetch — это еще\r\n   слой абстракции: он абстрагирует механику обработки того, что нужно\r\n   отображать.\r\n</p>  \r\n<p class=\"conspect__text\">\r\n   Будьте осторожны: дополнительные уровни абстракции, \r\n   <span class=\"conspect__marked-text\">могут усложнить код</span>.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Fetch</span>(<span class=\"hljs-params\">{\r\n<span data-reference=\"Url для запроса данных\" class=\"conspect__reference\">i</span>      url,\r\n<span data-reference=\"Рендер пропс, компонент отображающий загрузку\" class=\"conspect__reference\">i</span>      renderLoading = &lt;p&gt;Loading...&lt;/p&gt;,\r\n<span data-reference=\"Рендер пропс, функция, возвращающая компонент для отображения успешно загруженных данных, по умолчанию просто выводит JSON данных\" class=\"conspect__reference\">i</span>      renderSucces = (data) =&gt; (\r\n         &lt;pre&gt;{<span class=\"hljs-built_in\">JSON</span>.stringify(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>)}&lt;/pre&gt;\r\n      ), \r\n<span data-reference=\"Рендер пропс, функция, возвращающая компонент для отображения ошибки, по умолчанию просто выводит JSON ошибки\" class=\"conspect__reference\">i</span>      renderError = (err) =&gt; (\r\n         &lt;pre&gt;{<span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>)}&lt;/pre&gt;\r\n      )\r\n   }</span>) {\r\n<span data-reference=\"Под капотом используется хук useFetch\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> {loading, data, error} = <span class=\"hljs-title function_\">useFetch</span>(url);\r\n   \r\n<span data-reference=\"Условный рендеринг одного из компонентов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(loading) <span class=\"hljs-keyword\">return</span> renderLoading;\r\n      <span class=\"hljs-keyword\">if</span>(error) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">renderError</span>({error});\r\n      <span class=\"hljs-keyword\">if</span>(data) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">renderSucces</span>({data});\r\n   \r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n   }   \r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   GitHubUser.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Пример использования компонента Fetch:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GitHubUser</span>(<span class=\"hljs-params\">{login}</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Fetch</span> \r\n            <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">api.github.com</span>/<span class=\"hljs-attr\">users</span>/${<span class=\"hljs-attr\">login</span>}`} \r\n            <span class=\"hljs-attr\">renderLoading</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Loading</span> /&gt;</span>}\r\n            renderSucces={(data) =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Userdetails</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span> /&gt;</span>}\r\n            renderError={(error) =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Error</span> <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">{error}</span> /&gt;</span>}\r\n         /&gt;</span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Компонент Fetch"
      },
      "9-useIterator": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук useIterator\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Пользовательский хук для обработки массивов с данными,\r\n   возвращает элемент массива и функции для получения\r\n   предыдущего и следующего элементов массива:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useIteraror</span>(<span class=\"hljs-params\">\r\n<span data-reference=\"Массив перебираемых данных\" class=\"conspect__reference\">i</span>      array,\r\n<span data-reference=\"Начальный индекс элемента массива, по умолчанию 0\" class=\"conspect__reference\">i</span>      startIndex = <span class=\"hljs-number\">0</span>\r\n   </span>) {   \r\n<span data-reference=\"Для хранения индекса используется хук состояния\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [index, setIndex] = <span class=\"hljs-title function_\">useState</span>(startIndex);\r\n      \r\n<span data-reference=\"Функция получения предыдущего значения. Используется useCallback для мемоизации функции.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> prev = <span class=\"hljs-title function_\">useCallback</span>(\r\n         <span class=\"hljs-function\">() =&gt;</span> {\r\n            <span class=\"hljs-keyword\">if</span>(index === <span class=\"hljs-number\">0</span>) <span class=\"hljs-title function_\">setIndex</span>(array.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>);\r\n               <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">setIndex</span>(index - <span class=\"hljs-number\">1</span>);         \r\n         }, [index, array]\r\n      );\r\n      \r\n<span data-reference=\"Функция получения следующего значения. Используется useCallback для мемоизации функции.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> next = <span class=\"hljs-title function_\">useCallback</span>(\r\n         <span class=\"hljs-function\">() =&gt;</span> {\r\n            <span class=\"hljs-keyword\">if</span>(index === array.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) <span class=\"hljs-title function_\">setIndex</span>(<span class=\"hljs-number\">0</span>);\r\n               <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">setIndex</span>(index + <span class=\"hljs-number\">1</span>);         \r\n         }, [index, array]\r\n      );\r\n      \r\n<span data-reference=\"Мемоизация текущего элемента данных\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-title function_\">useMemo</span>(\r\n         <span class=\"hljs-function\">() =&gt;</span> array[index],\r\n         [index, array]\r\n      );\r\n<span data-reference=\"Возврат значения в виде массива с элементом данных и функциями для получения новых значений\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> [item, prev, next];\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   RepoMenu.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент использующий хук \r\n   useIteraror:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RepoMenu</span>(<span class=\"hljs-params\">{\r\n<span data-reference=\"Массив с репозиториями для итерации\" class=\"conspect__reference\">i</span>      repos,\r\n<span data-reference=\"Функция для передачи выбранного значения родительскому компоненту\" class=\"conspect__reference\">i</span>      selectHandler = f =&gt; f\r\n   }</span>) {\r\n<span data-reference=\"Использование хука useIteraror, из возвращаемого объекта репозитория извлекается только name\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [{name}, prev, next] = <span class=\"hljs-title function_\">useIteraror</span>(repos);\r\n   \r\n<span data-reference=\"Отправка текущего выбранного репозитория осуществляется в хуке useEffect\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Если name не определено, выйти\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(!name) <span class=\"hljs-keyword\">return</span>;\r\n<span data-reference=\"Отправить значение name родительскому компоненту\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">selectHandler</span>(name);\r\n      }, [name, selectHandler]);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n<span data-reference=\"Кнопке передается функция для получения нового элемента массива, при этом хук useIteraror инициирует новый рендер компонента\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{prev}</span>&gt;</span><span class=\"hljs-symbol\">&amp;lt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{next}</span>&gt;</span><span class=\"hljs-symbol\">&amp;gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>         \r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>",
         "title": "Хук useIterator"
      },
      "10-cascading-queries": {
         "data": "<h2 class=\"conspect__header\">\r\n   Каскадные запросы\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Каскадные запросы выполняются последовательно один за другим и \r\n   зависят друг от друга. Если в запросе данных о пользователе \r\n   возникнет ошибка, запрос репозиториев этого пользователя не выполнится.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   В показанном примере сначала происходит запрос\r\n   данных пользователя, после получения данных посылается \r\n   запрос его репозиториев, а затем в порядке перелистывания,\r\n   запрашиваются файлы ReadMe.md репозиториев.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   loadReadMe.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Асинхронная функция загрузки Readme.md:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadReadMe</span>(<span class=\"hljs-params\">login, repo</span>) {\r\n<span data-reference=\"Собрать ссылку для отправки первого запроса, используя логин пользователя и имя репозитория\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`https://api.github.com/repos/<span class=\"hljs-subst\">${login}</span>/<span class=\"hljs-subst\">${repo}</span>/readme`</span>;\r\n   \r\n<span data-reference=\"Отправить первый запрос который вернет объект со ссылкой на для загрузки файла\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> downloadData = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(url)\r\n         .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.<span class=\"hljs-title function_\">json</span>());\r\n   \r\n<span data-reference=\"Отправить второй запрос, который вернет файл Readme.md\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> readMe = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(downloadData.<span class=\"hljs-property\">download_url</span>)\r\n<span data-reference=\"Так как файл текстовый, используется resp.text()\" class=\"conspect__reference\">i</span>         .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.<span class=\"hljs-title function_\">text</span>());\r\n   \r\n      <span class=\"hljs-keyword\">return</span> readMe;                                                          \r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   RepositoryReadme.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент, использующий загрузку и отображение\r\n   файла Readme.md:\r\n</p>\r\n<pre><code>   \r\n<span data-reference=\"Импорт компонента для вывода MarkDown\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactMarkdown</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-markdown&quot;</span>;      \r\n   <span class=\"hljs-keyword\">import</span> loadReadMe <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./loadReadMe&quot;</span>;\r\n\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RepositoryReadme</span>(<span class=\"hljs-params\">{login, repo}</span>) {\r\n<span data-reference=\"Состояние загрузки, изначально установлен в TRUE\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\r\n<span data-reference=\"Состояние ошибки\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [error, setError] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\r\n<span data-reference=\"Состояние наличия данных для визуализации\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [markDown, setMarkDown] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\r\n\r\n<span data-reference=\"Асинхронная функция отправляющая запрос и изменяющая состояние по результатам запроса, использует хук useCallback для предотвращения повторных рендеров в useEffect\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> loadMD = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-keyword\">async</span> (login, repo) =&gt; {\r\n         <span class=\"hljs-keyword\">try</span> {\r\n            <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\r\n            <span class=\"hljs-keyword\">const</span> readMe = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">loadReadMe</span>(login, repo);\r\n            <span class=\"hljs-title function_\">setMarkDown</span>(readMe);\r\n         } <span class=\"hljs-keyword\">catch</span> (error) {\r\n            <span class=\"hljs-title function_\">setError</span>(error);\r\n         } <span class=\"hljs-keyword\">finally</span> {\r\n            <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\r\n         }\r\n<span data-reference=\"Массив зависимостей пуст, так как все функции возвращаемые useState идентичны между рендерами\" class=\"conspect__reference\">i</span>      }, []);\r\n\r\n<span data-reference=\"В хуке эффектов отправляем запрос данных\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">if</span>(!login || !repo) <span class=\"hljs-keyword\">return</span>;\r\n         <span class=\"hljs-title function_\">loadMD</span>(login, repo);\r\n      }, [login, repo, loadMD]);\r\n\r\n      <span class=\"hljs-keyword\">if</span>(loading) <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\r\n      <span class=\"hljs-keyword\">if</span>(error) <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Error: {error.message}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\r\n\r\n<span data-reference=\"При получении данных возвращаем компонент визуализирующий MarkDown\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ReactMarkdown</span> <span class=\"hljs-attr\">children</span>=<span class=\"hljs-string\">{markDown}</span> /&gt;</span></span>\r\n   }\r\n</code></pre>",
         "title": "Каскадные запросы"
      },
      "11-parallel-queries": {
         "data": "<h2 class=\"conspect__header\">\r\n   Парралельные запросы\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Иногда можно сделать приложение быстрее, отправив сразу все запросы. \r\n   Чтобы не выполнять запросы один за другим каскадом, мы можем отправлять их\r\n   параллельно:\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   ExploreGHUser.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ExploreGHUser</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Основное состояние приложения - логин пользователя\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [login, setLogin] = <span class=\"hljs-title function_\">useState</span>();\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Компонент поиска пользователя изменяет состояние приложения\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SearchUser</span> <span class=\"hljs-attr\">changeLogin</span>=<span class=\"hljs-string\">{setLogin}</span> /&gt;</span>\r\n            {login &amp;&amp; (\r\n                  <span class=\"hljs-tag\">&lt;&gt;</span>\r\n<span data-reference=\"Один из парралельных запросов, запрашивает информацию о пользователе\" class=\"conspect__reference\">i</span>                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Fetch</span>\r\n                        <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">api.github.com</span>/<span class=\"hljs-attr\">users</span>/${<span class=\"hljs-attr\">login</span>}`}\r\n                        <span class=\"hljs-attr\">renderSucces</span>=<span class=\"hljs-string\">{(userData)</span> =&gt;</span> (\r\n                           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserDetails</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{userData}</span> /&gt;</span>\r\n                        )}\r\n                     /&gt;\r\n<span data-reference=\"Втрой парралельный запрос, запрашивает массив репозиториев пользователя\" class=\"conspect__reference\">i</span>                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Fetch</span>\r\n                        <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">api.github.com</span>/<span class=\"hljs-attr\">users</span>/${<span class=\"hljs-attr\">login</span>}/<span class=\"hljs-attr\">repos</span>`}\r\n                        <span class=\"hljs-attr\">renderSucces</span>=<span class=\"hljs-string\">{(repos)</span> =&gt;</span> (\r\n                           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserRepositories</span> <span class=\"hljs-attr\">repos</span>=<span class=\"hljs-string\">{repos}</span> <span class=\"hljs-attr\">login</span>=<span class=\"hljs-string\">{login}</span> /&gt;</span>\r\n                        )}\r\n                     /&gt;\r\n                  <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n            )}\r\n         &lt;/div&gt;\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Парралельные запросы"
      },
      "12-request-canceling": {
         "data": "<h2 class=\"conspect__header\">\r\n   Отмена запроса\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Струтура приложения React можт быстро изменяться,\r\n   возможна ситуация при которой был отправлен запрос\r\n   хуком useFetch, комопнент отправивший запрос был размонтирован,\r\n   после чего, при получении данных, была вызвана\r\n   функция setState размонтированного компонента, что\r\n   приводит к возникновению ошибки.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Для предотвращения подобных ситуаций используется хук \r\n   useMountedState вместе с useFetch:\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   useMountedState.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Хук возвращет текущее состояние компонента - \r\n   размонтирован (false), смонтирован (true):\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useMountedState</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Для хранения состояния между рендерами используем хук useRef как свойство компонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> componentRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">false</span>);\r\n   \r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"При каждом монтировании компонента устанавливаем реф в true\" class=\"conspect__reference\">i</span>         componentRef.<span class=\"hljs-property\">current</span> = <span class=\"hljs-literal\">true</span>;\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"При каждом размонтировании компонента устанавливаем реф в false\" class=\"conspect__reference\">i</span>            <span class=\"hljs-function\">() =&gt;</span> componentRef.<span class=\"hljs-property\">current</span> = <span class=\"hljs-literal\">false</span>\r\n         );\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">return</span> componentRef;\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   useFetch.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Хук использует текущий статус компонента - \r\n   размонтирован/смонтирован при определении \r\n   возможности изменения состояния: \r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useFetchV2</span>(<span class=\"hljs-params\">url</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\r\n      <span class=\"hljs-keyword\">const</span> [data, setData] = <span class=\"hljs-title function_\">useState</span>();\r\n      <span class=\"hljs-keyword\">const</span> [error, setError] = <span class=\"hljs-title function_\">useState</span>();\r\n   \r\n<span data-reference=\"Получить текущее состояние компонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> mountedState = <span class=\"hljs-title function_\">useMountedState</span>();\r\n   \r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Если компонент размонтирован, выйти\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(!url || !mountedState) <span class=\"hljs-keyword\">return</span>;\r\n   \r\n         <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\r\n         <span class=\"hljs-title function_\">fetch</span>(url)\r\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {\r\n<span data-reference=\"Если компонент размонтирован, прервать цепочку, выбросив ошибку до изменения состояния\" class=\"conspect__reference\">i</span>               <span class=\"hljs-keyword\">if</span>(!mountedState) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(\r\n                  <span class=\"hljs-string\">&#x27;Component not mounted&#x27;</span>\r\n               );\r\n               <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>();\r\n            })\r\n            .<span class=\"hljs-title function_\">then</span>(setData)\r\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\r\n<span data-reference=\"Если комопнент размонтирован, выйти без изменения состояния\" class=\"conspect__reference\">i</span>               <span class=\"hljs-keyword\">if</span>(!mountedState) <span class=\"hljs-keyword\">return</span>;\r\n               <span class=\"hljs-title function_\">setError</span>(err);\r\n            })\r\n            .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>));\r\n      }, [url, mountedState]);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> {loading, data, error};\r\n   }\r\n</code></pre>",
         "title": "Отмена запроса"
      },
      "13-useChatRoom": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук для работы с socket.io\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук показывает как работать с сервером\r\n   по протоколу socket.io на примере реализации чата\r\n   код упрощен, без разьяснений.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   useChatRoom.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reducer</span> = (<span class=\"hljs-params\">messages, incomingMessage</span>) =&gt; [\r\n      messages,\r\n      ...incomingMessage\r\n   ];\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useChatRoom</span>(<span class=\"hljs-params\">socket, messages = []</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\r\n      <span class=\"hljs-keyword\">const</span> [messages, appendMessage] = <span class=\"hljs-title function_\">useReducer</span>(\r\n         reducer, messages\r\n      );\r\n\r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">send</span> = message =&gt; socket.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&quot;message&quot;</span>, message);\r\n\r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;connection&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setStatus</span>(<span class=\"hljs-string\">&quot;connected&quot;</span>));\r\n         socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;disconnecting&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setStatus</span>(<span class=\"hljs-string\">&quot;disconnected&quot;</span>));\r\n         socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;message&quot;</span>, setStatus);\r\n\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\r\n            socket.<span class=\"hljs-title function_\">removeAllListeners</span>(<span class=\"hljs-string\">&quot;connect&quot;</span>);\r\n            socket.<span class=\"hljs-title function_\">removeAllListeners</span>(<span class=\"hljs-string\">&quot;disconnect&quot;</span>);\r\n            socket.<span class=\"hljs-title function_\">removeAllListeners</span>(<span class=\"hljs-string\">&quot;message&quot;</span>);\r\n         };\r\n      }, []);\r\n\r\n   <span class=\"hljs-keyword\">return</span> {status, messages, send};\r\n}\r\n</code></pre>",
         "title": "Хук для работы с socket.io"
      },
      "1-site-template": {
         "data": "<h2 class=\"conspect__header\">\r\n   Шаблон страницы сайта\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Компонент шаблона сайта служит для рендера\r\n   прочих компонентов страницы внутри шаблона\r\n   определенной структуры.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   SiteLayout.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SiteLayout</span>(<span class=\"hljs-params\">{\r\n<span data-reference=\"Дочерние компоненты и элементы\" class=\"conspect__reference\">i</span>      children,\r\n<span data-reference=\"Компонент меню, которого может и не быть\" class=\"conspect__reference\">i</span>      menu = <span class=\"hljs-literal\">null</span>\r\n   }</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.outsideWrapper}</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.menu}</span>&gt;</span>\r\n<span data-reference=\"Вставка компонента меню в определенное место в шаблоне\" class=\"conspect__reference\">i</span>               {menu}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.main}</span>&gt;</span>\r\n<span data-reference=\"Вставка дочерних компонентов в определенное место в шаблоне\" class=\"conspect__reference\">i</span>               {children}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   App.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент App использует шаблон SiteLayout:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Передача компонента Menu в шаблон\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SiteLayout</span> <span class=\"hljs-attr\">menu</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Menu</span> /&gt;</span>}&gt;        \r\n<span data-reference=\"Передача дочерних компонентов и элементов в шаблон\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello all!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>We are here today...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SiteLayout</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Шаблон страницы сайта"
      },
      "2-error-boundaries": {
         "data": "<h2 class=\"conspect__header\">\r\n   Предохранители\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   При возникновении ошибки в React она распространяется выше по дереву,\r\n   при отсутствии на ее пути предохранителей происходит полное\r\n   размонтирование дерева компонентов. Предохранители позволяют\r\n   перехватить ошибку и показать альтернативное содержимое для дочерней\r\n   ветки компонентов.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   ErrorBoundary.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент предохранитель для обработки ошибок:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Пока компонент предохранитель может быть только классовым\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorBoundary</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {\r\n<span data-reference=\"В состоянии хранится объект ошибки\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\r\n         }\r\n      }\r\n   \r\n<span data-reference=\"Метод будет вызван при возникновении ошибки, возвращаемый объект становится объектом состояния\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromError</span>(<span class=\"hljs-params\">error</span>) {\r\n         <span class=\"hljs-keyword\">return</span> {error};\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">const</span> {error} = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;\r\n         <span class=\"hljs-keyword\">const</span> {children, fallback} = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>;     \r\n   \r\n<span data-reference=\"При наличии ошибки вернуть рендер пропс из fallback\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(error) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fallback</span>(error);\r\n<span data-reference=\"При отсутствии ошибок вернуть дочерние элементы\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> children;\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   App.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Использование предохранителей в компоненте App:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SiteLayout</span> \r\n<span data-reference=\"Рендер проп, передающий компонент меню в шаблон\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">menu</span>=<span class=\"hljs-string\">{</span>\r\n<span data-reference=\"Компонент меню обернут предохранителем, в рендер проп fallback передана функция, возвращающая компонент, отображаемый при возникновении ошибки\" class=\"conspect__reference\">i</span>               &lt;<span class=\"hljs-attr\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>\r\n<span data-reference=\"Компонент отображающий ошибку\" class=\"conspect__reference\">i</span>                  (<span class=\"hljs-attr\">err</span>) =&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorScreen</span> <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">{err}</span> /&gt;</span>\r\n               }&gt;\r\n<span data-reference=\"Компонент меню\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Menu</span> /&gt;</span>\r\n<span data-reference=\"Компонент выбрасывающий ошибку для проверки предохранителя\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThrowError</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span>\r\n            }\r\n         &gt;\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>\r\n                  (<span class=\"hljs-attr\">err</span>) =&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorScreen</span> <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">{err}</span> /&gt;</span>\r\n            }&gt;\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThrowError</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span>\r\n<span data-reference=\"Элементы вне предохранителя отображаются даже при перехвате ошибок в других предохранителях\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello all!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>We are here today...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SiteLayout</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Предохранители"
      },
      "4-how-suspense-works": {
         "data": "<h2 class=\"conspect__header\">\r\n   Устройство Suspense и ErrorBoundaries\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Код JavaScript позволяет выбрасывать не только \r\n   ошибки, но и другие типы данных. Если из кода\r\n   компонента будет выброшен промис, он будет перехвачен\r\n   Suspense, который отобразит fallback. После разрешения\r\n   промиса, произойдет повторный рендеринг компонента, и\r\n   вместо fallback будет отображен компонент. Если же из \r\n   кода была выброшена ошибка, то она будет перехвачена\r\n   ErrorBoundary, который также покажет альтернативный \r\n   интерфейс.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   createResource.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Функция работы с промисами, возвращает объект с\r\n   методом read, который возвращает результат промиса,\r\n   либо выбрасывает промис или ошибку:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createResource</span>(<span class=\"hljs-params\">promise</span>) {\r\n<span data-reference=\"Переменные в замыкании\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">let</span> result, error;\r\n   \r\n<span data-reference=\"Если промис разрешился, присвоить значение внутренней переменной\" class=\"conspect__reference\">i</span>      promise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =&gt;</span> result = r)\r\n<span data-reference=\"Если возникла ошибка, присвоить значение внутренней переменной\" class=\"conspect__reference\">i</span>             .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> error = e);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> {                            \r\n<span data-reference=\"Метод read будет вызван кодом позже, и к моменту вызова выполнит определенные условия\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">read</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Если результат уже получен, вернет результат\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">if</span>(result) <span class=\"hljs-keyword\">return</span> result;\r\n<span data-reference=\"Если существует ошибка, выбросит ошибку\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">if</span>(error) <span class=\"hljs-keyword\">throw</span> error;\r\n<span data-reference=\"Если промис еще не завершен, выбросит промис\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">throw</span> promise;\r\n         }\r\n      };\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Gnar.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент использующий данные,\r\n   приходящие с задержкой:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Создаем промис, возвращающий данные через 3с\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> delayedData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(\r\n      <span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(\r\n         <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">resolve</span>({<span class=\"hljs-attr\">gnar</span>: <span class=\"hljs-string\">&#x27;gnarly!&#x27;</span>}),\r\n         <span class=\"hljs-number\">3000</span>\r\n      )\r\n   );\r\n\r\n<span data-reference=\"Получаем из промиса объект с методом read\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> resource = <span class=\"hljs-title function_\">createResource</span>(delayedData);\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Gnar</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"При рендере компонент вызываем метод read, при этом либо выбрасывается промис или ошибка, либо возвращаются данные\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> result = resource.<span class=\"hljs-title function_\">read</span>();\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Рендерим полученные данные\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Gnar: {result.gnar}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Page.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент содержит компонент который рендерит\r\n   данные получаемые с задержкой, а также Suspense \r\n   и ErrorBoundary:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Компонент обрабатывающий выброшенные ошибки\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>\r\n            (<span class=\"hljs-attr\">err</span>) =&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorScreen</span> <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">{err}</span> /&gt;</span>\r\n         }&gt;\r\n<span data-reference=\"Компонент обрабатывающий выброшенные промисы\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>\r\n               &lt;<span class=\"hljs-attr\">GridLoader</span> <span class=\"hljs-attr\">css</span>=<span class=\"hljs-string\">{css}</span> /&gt;</span>\r\n            }&gt;\r\n<span data-reference=\"Компонент который рендерит данные, но может выбросить промис или ошибку\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Gnar</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>",
         "title": "Устройство Suspense и ErrorBoundaries"
      },
      "1-eslint": {
         "data": "<h2 class=\"conspect__header\">\r\n   Анализатор ESLint\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   ESLint анализирует код с помощью плагинов и\r\n   выводит предупреждения о найденных ошибках.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Установка и настройка.\r\n</h3>\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Установить ESLint: npm install eslint --save-dev\r\n   </li>\r\n   <li>\r\n      Настроить конфигурацию: npx eslint --init\r\n   </li>\r\n   <li>\r\n      Ответить на вопросы диалога, после чего в корне\r\n      проекта будет создан файл конфигурации .eslintrc.json\r\n   </li>\r\n   <li>\r\n      В корне проекта создать файл .eslintignore, \r\n      куда добавить файлы и папки не подлежащие линтингу\r\n   </li>\r\n   <li>\r\n      Добавить в package.json скрипт \"lint\": \"eslint .\"\r\n   </li>\r\n   <li>\r\n      Добавить плагины\r\n   </li>\r\n   <li>\r\n      Запустить проверку: npm run lint\r\n   </li>\r\n</ol>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Установка плагинов и их настройка\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   npm install eslint-plugin-react-hooks --save-dev\r\n</p>\r\n<pre><code>\r\n   {\r\n      <span class=\"hljs-string\">&quot;plugins&quot;</span>: [      \r\n         <span class=\"hljs-string\">&quot;react-hooks&quot;</span>\r\n      ],\r\n      <span class=\"hljs-string\">&quot;rules&quot;</span>: {\r\n         <span class=\"hljs-string\">&quot;react-hooks/rules-of-hooks&quot;</span>: <span class=\"hljs-string\">&quot;error&quot;</span>,\r\n         <span class=\"hljs-string\">&quot;react-hooks/exhaustive-deps&quot;</span>: <span class=\"hljs-string\">&quot;warn&quot;</span>\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   npm install eslint-plugin-jsx-a11y\r\n</p>\r\n<pre><code>\r\n   {\r\n      <span class=\"hljs-string\">&quot;extends&quot;</span>: [      \r\n         <span class=\"hljs-string\">&quot;plugin:jsx-a11y/recommended&quot;</span>\r\n      ],\r\n      <span class=\"hljs-string\">&quot;plugins&quot;</span>: [      \r\n         <span class=\"hljs-string\">&quot;jsx-a11y&quot;</span>\r\n      ]\r\n   }\r\n</code></pre>\r\n\r\n<a href=\"https://github.com/dustinspecker/awesome-eslint\" class=\"conspect__outside-link\" target=\"_blank\">\r\n   Прочие плагины для ESLint\r\n</a>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   .eslintrc.json\r\n</h3>\r\n<pre><code>\r\n   {\r\n      <span class=\"hljs-string\">&quot;env&quot;</span>: {\r\n          <span class=\"hljs-string\">&quot;browser&quot;</span>: <span class=\"hljs-literal\">true</span>,\r\n          <span class=\"hljs-string\">&quot;es2021&quot;</span>: <span class=\"hljs-literal\">true</span>\r\n      },\r\n      <span class=\"hljs-string\">&quot;extends&quot;</span>: [\r\n          <span class=\"hljs-string\">&quot;eslint:recommended&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;plugin:react/recommended&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;plugin:react/jsx-runtime&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;plugin:jsx-a11y/recommended&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;plugin:prettier/recommended&quot;</span>\r\n      ],\r\n      <span class=\"hljs-string\">&quot;parserOptions&quot;</span>: {\r\n          <span class=\"hljs-string\">&quot;ecmaFeatures&quot;</span>: {\r\n              <span class=\"hljs-string\">&quot;jsx&quot;</span>: <span class=\"hljs-literal\">true</span>\r\n          },\r\n          <span class=\"hljs-string\">&quot;ecmaVersion&quot;</span>: <span class=\"hljs-number\">12</span>,\r\n          <span class=\"hljs-string\">&quot;sourceType&quot;</span>: <span class=\"hljs-string\">&quot;module&quot;</span>\r\n      },\r\n      <span class=\"hljs-string\">&quot;plugins&quot;</span>: [\r\n          <span class=\"hljs-string\">&quot;react&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;react-hooks&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;jsx-a11y&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;prettier&quot;</span>\r\n      ],\r\n      <span class=\"hljs-string\">&quot;rules&quot;</span>: {\r\n          <span class=\"hljs-string\">&quot;react-hooks/rules-of-hooks&quot;</span>: <span class=\"hljs-string\">&quot;error&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;react-hooks/exhaustive-deps&quot;</span>: <span class=\"hljs-string\">&quot;warn&quot;</span>,\r\n          <span class=\"hljs-string\">&quot;prettier/prettier&quot;</span>: [\r\n              <span class=\"hljs-string\">&quot;error&quot;</span>, \r\n              {<span class=\"hljs-string\">&quot;endOfLine&quot;</span>: <span class=\"hljs-string\">&quot;auto&quot;</span>}\r\n          ]\r\n      },\r\n      <span class=\"hljs-string\">&quot;settings&quot;</span>: {\r\n          <span class=\"hljs-string\">&quot;react&quot;</span>: {\r\n              <span class=\"hljs-string\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;detect&quot;</span>\r\n          }\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   .eslintignore\r\n</h3>\r\n<pre><code>\r\n   dist<span class=\"hljs-comment\">/*\r\n   src/components/*\r\n   src/App.test.js\r\n</span></code></pre>",
         "title": "Анализатор ESLint"
      },
      "2-prettier": {
         "data": "<h2 class=\"conspect__header\">\r\n   Форматтер кода Prettier\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Prettierй обрабатывает форматирование кода и \r\n   определяет правила того, какой синтаксис кода \r\n   следует использовать в проекте. \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Установка и настройка.\r\n</h3>\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Установить Prettier: npm install -g prettier\r\n   </li>\r\n   <li>\r\n      Создать файл конфигурации .prettierrc в корне проекта,\r\n      <a href=\"https://prettier.io/docs/en/options.html\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         варианты настройки\r\n      </a>      \r\n   </li>\r\n   <li>\r\n      Интегрировать ESLint и Prettier, установив инструмент настройки\r\n      и плагин, после чего при запуске lint Prettier тоже будет работать:<br>\r\n      npm install eslint-config-prettier eslint-plugin-prettier --save-dev\r\n   </li>\r\n   <li>\r\n      Добавить плагины в .eslintrc.json\r\n   </li>\r\n   <li>\r\n      Использовать Prettier командами:<br>\r\n      prettier --check \"sample.js\"<br>\r\n      prettier --write \"src/*.js\"\r\n   </li>\r\n   <li>\r\n      Установить расширение Prettier в VSCode.\r\n   </li>\r\n   <li>\r\n      Настроить редактор по умолчанию в VSCode:<br>\r\n      \"[javascript]\": {<br>\r\n         \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"<br>\r\n     },<br>\r\n      форматирование кода при сохранении:<br>\r\n      \"editor.formatOnSave\": true\r\n   </li>\r\n</ol>",
         "title": "Форматтер кода Prettier"
      },
      "3-tdd": {
         "data": "<h2 class=\"conspect__header\">\r\n   Разработка через тестирование\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Практика разработки кода, в которой тесты управляют \r\n   процессом разработки. Состоит из следующих этапов:\r\n</p>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Написать тесты</span> - \r\n      сначала объявляйте, что хотите сделать и как это должно работать. \r\n      Этапы тестирования будут называться: \r\n      <span class=\"conspect__marked-text\">красный, зеленый и золотой</span>.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Запускать тесты и проверять, \r\n      что они не работают (красный)</span> - Прежде чем писать код, \r\n      запустите тесты и убедитесь, что ничего не работает.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Писать минимальный объем кода, \r\n      необходимый для прохождения теста (зеленый)</span> - Сосредоточьтесь \r\n      на выполнении каждого теста и не добавляйте функции, выходящие за рамки теста.\r\n   </li>\r\n   <li>\r\n      <span class=\"conspect__marked-text\">Проводить рефакторинг кода и тестов \r\n      (золотой)</span> - После того как тесты будут пройдены, внимательнее \r\n      рассмотрите код и тесты. Постарайтесь изложить код как можно проще и элегантнее.\r\n   </li>\r\n</ol>",
         "title": "Разработка через тестирование"
      },
      "4-jest-basics": {
         "data": "<h2 class=\"conspect__header\">\r\n   Основы Jest\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Документация React рекомендует выполнять тестирование с помощью Jest,\r\n   который включен в пакет Create React App по умолчанию. \r\n   Чтобы начать тестирование, нужно запустить npm test;\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   mathFunc.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   В файле находятся функции для тестирования:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">a, b</span>) {\r\n      <span class=\"hljs-keyword\">return</span> a + b;\r\n   }\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiple</span>(<span class=\"hljs-params\">a, b</span>) {\r\n      <span class=\"hljs-keyword\">return</span> a * b;\r\n   }\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-params\">a, b</span>) {\r\n      <span class=\"hljs-keyword\">return</span> a ** b;\r\n   }\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doubleElements</span>(<span class=\"hljs-params\">arr</span>) {\r\n      <span class=\"hljs-keyword\">return</span> arr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item * <span class=\"hljs-number\">2</span>);\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">export</span> { sum, multiple, pow, doubleElements };\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   mathFunc.test.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   В файле находятся тесты для функций из mathFunc.js\r\n</p>\r\n<pre><code>   \r\n<span data-reference=\"Импорт функций для тестирования\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> {\r\n      sum,\r\n      multiple,\r\n      pow,\r\n      doubleElements\r\n   } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./mathFunc&#x27;</span>;\r\n\r\n<span data-reference=\"Оператор describe, создает блок тестов, в котором результаты тестирования выглядят удобнее для чтения\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Math functions&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Тест, первый аргумент - его название, второй - функция тестирования\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Sum 5 and 9&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"expect получает результат тестируемой функции, toBe проверяет его равенство простому значению\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">14</span>);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Multiply 3 by 4&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">multiple</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">12</span>);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Raise 3 to the power of 3&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">27</span>);\r\n      });\r\n\r\n<span data-reference=\"Тест, в котором функция возвращает объект JS\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Double array elements&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Аргумент для функции\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>];\r\n<span data-reference=\"Ожидаемый результат функции\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> result = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">22</span>];\r\n\r\n<span data-reference=\"toEqual производит глубокую сверку двух объектов - ожидаемого и полученного\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">doubleElements</span>(arr)).<span class=\"hljs-title function_\">toEqual</span>(result);\r\n      });\r\n   });\r\n</code></pre>",
         "title": "Основы Jest"
      },
      "5-conponents-testing": {
         "data": "<h2 class=\"conspect__header\">\r\n   Тестирование компонентов React\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Для тестирования компонентов мы должны отобразить их и \r\n   проверить получившуюся DOM по разным критериям\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Star.js\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Компонент для тестирования:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Star</span>(<span class=\"hljs-params\">{ selected = <span class=\"hljs-literal\">false</span> }</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Great Star<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FaStar</span>\r\n            <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">{selected</span> ? &#x27;<span class=\"hljs-attr\">red</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">grey</span>&#x27;}\r\n            <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\r\n         /&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Тестирование рендеринга\r\n</h3>\r\n<h3 class=\"conspect__subheader\">\r\n   Star.test.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Тестирование с помощью Jest\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Renders a star&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Создаем элемент в DOM\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\r\n<span data-reference=\"Рендерим тестируемый компонент в созданный контейнер\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Star</span> /&gt;</span></span>, div);\r\n<span data-reference=\"Получаем отрендереный элемент и проверяем существует ли он, toBeTruthy() - проверка на true\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">expect</span>(div.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;svg&#x27;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>();\r\n   });\r\n   \r\n<span data-reference=\"Тестирование с помощью React Testing Library (@testing-library/jest-dom)\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Render Star with React testing library&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\r\n      <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Star</span> /&gt;</span></span>, div);\r\n<span data-reference=\"Получаем отрендереный элемент и проверяем имеет ли он определенный id\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">expect</span>(div.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;svg&#x27;</span>)).<span class=\"hljs-title function_\">toHaveAttribute</span>(\r\n         <span class=\"hljs-string\">&#x27;id&#x27;</span>,\r\n         <span class=\"hljs-string\">&#x27;star&#x27;</span>\r\n      );\r\n   });\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Использование запросов\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Вместо ReactDom.render мы используем функцию render\r\n   из библиотеки тестирования, которая возвращает объект запросов, \r\n   используемый для проверки значений в этом компоненте или его элементе.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Импортируем функцию рендера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react&#x27;</span>;\r\n\r\n   <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Renders an h1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Рендерим тестируемый компонент\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> queryObject = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Star</span> /&gt;</span></span>);\r\n<span data-reference=\"Из полученного объекта запросов получаем элемент по текстовому поиску используя регулярное выражение\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> h1 = queryObject.<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-regexp\">/Great Star/</span>);\r\n   \r\n<span data-reference=\"Тестируем полученный элемент на наличие определенного текстового контента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">expect</span>(h1).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&#x27;Great Star&#x27;</span>);\r\n   });\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Тестирование событий\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   \r\n</p>\r\n<h3 class=\"conspect__subheader\">\r\n   CheckBox.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонент для тестирования, изменяющий значение при клике\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CheckBox</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [checked, setChecked] = <span class=\"hljs-title function_\">useReducer</span>(\r\n         <span class=\"hljs-function\">(<span class=\"hljs-params\">checked</span>) =&gt;</span> !checked,\r\n         <span class=\"hljs-literal\">false</span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n<span data-reference=\"Компонент имеет label по которому можно найти input\" class=\"conspect__reference\">i</span>            {checked ? &#x27;checked&#x27; : &#x27;not-checked&#x27;}\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\r\n<span data-reference=\"С помощью атрибута также можно найти input\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;myId&quot;</span>\r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>\r\n               <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\r\n               <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setChecked}</span>\r\n            /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   CheckBox.test.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импортируем функцию для рендера и эмуляции событий\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { fireEvent, render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react&#x27;</span>;\r\n\r\n   <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Clicking on CheckBox should change label value&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-keyword\">const</span> queryObject = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CheckBox</span> /&gt;</span></span>);       \r\n<span data-reference=\"Получаем input по атрибуту data-testid\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> checkBox = queryObject.<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&#x27;myId&#x27;</span>);\r\n<span data-reference=\"Альтернативно можно получить input по регулярному выражению через значение соответствующего label\" class=\"conspect__reference\">i</span>      <span class=\"hljs-comment\">// const checkBox = queryObject.getByLabelText(/checked/i);</span>\r\n\r\n<span data-reference=\"Эмулируем клик на input\" class=\"conspect__reference\">i</span>      fireEvent.<span class=\"hljs-title function_\">click</span>(checkBox);\r\n<span data-reference=\"Проверяем соответствие атрибута checked\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">expect</span>(checkBox.<span class=\"hljs-property\">checked</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\r\n      fireEvent.<span class=\"hljs-title function_\">click</span>(checkBox);\r\n      <span class=\"hljs-title function_\">expect</span>(checkBox.<span class=\"hljs-property\">checked</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\r\n   });\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Остальные критерии проверок при тестах \r\n   <a href=\"https://github.com/testing-library/jest-dom#custom-matchers\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      custom-matchers\r\n   </a>.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Более подробно о <a href=\"https://testing-library.com/docs/queries/about\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      методах выбора элементов объекта запросов\r\n   </a>.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Покрытие тестами\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Для получения сведений о степени проекта тестами запустите\r\n   <span class=\"conspect__marked-text\">npm test -- --coverage</span>\r\n   после чего отчет появится в терминале. Кроме того интерактивный \r\n   отчет будет доступен в /coverage/lcov-report/index.html в корне\r\n   проекта. Следует стремиться к 85% и более покрытию проекта тестами.\r\n</p>",
         "title": "Тестирование компонентов React"
      },
      "1-nesting-old": {
         "data": "<h2 class=\"conspect__header\">\r\n   Вложенная маршрутизация v5\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Для использования вложенной маршрутизации используются\r\n   вложенные компоненты Switch.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   RoutesExample.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RoutesExample</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n<span data-reference=\"Ссылка на основной компонент\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n<span data-reference=\"Ссылка на один из вложенных компонентов\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about/location&quot;</span>&gt;</span>About-Location<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about/services&quot;</span>&gt;</span>About-Services<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\r\n\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pages.Home</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n<span data-reference=\"Маршрут на основной компонент, без атрибута exact все подмаршруты /about будут направлены сюда\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pages.About</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;*&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pages.NotFound</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Pages.About\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт хука useRouteMatch\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { useRouteMatch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">About</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Получение текущего пути компонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> { path } = <span class=\"hljs-title function_\">useRouteMatch</span>();\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n<span data-reference=\"Маршрут срабатывает при точном совпадении с путем компонента и отображает страницу верхнего уровня\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">{path}</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[About]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n<span data-reference=\"Подмаршрут, отображает подкомпоненты\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">path</span>}/<span class=\"hljs-attr\">location</span>`}&gt;</span>\r\n<span data-reference=\"Подкомпонент\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AboutLocation</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">path</span>}/<span class=\"hljs-attr\">services</span>`}&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AboutServices</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n<span data-reference=\"Не забыть про компонент NotFound, при неверном маршруте\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;*&quot;</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NotFound</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Switch</span>&gt;</span></span>\r\n      );       \r\n   }\r\n</code></pre>",
         "title": "Вложенная маршрутизация v5"
      },
      "2-redirecting-old": {
         "data": "<h2 class=\"conspect__header\">\r\n   Перенаправление маршрута v5\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Компонент Redirect позволяет перенаправить пользователя\r\n   прешедшего по одному маршруту на другой маршрут.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { \r\n      <span class=\"hljs-title class_\">Switch</span>, \r\n      <span class=\"hljs-title class_\">Route</span>, \r\n      <span class=\"hljs-title class_\">Link</span>, \r\n<span data-reference=\"Импорт компонента Redirect\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title class_\">Redirect</span>\r\n   } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RoutesExample</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\r\n<span data-reference=\"Ссылка с устаревшим маршрутом, возможно из закладок пользователя\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/old-path&quot;</span>&gt;</span>About-Old-Path<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\r\n\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n<span data-reference=\"Компонент перенаправления, направляет с маршрута /old-path на /about\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">&quot;/old-path&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about&quot;</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pages.Home</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n<span data-reference=\"Маршрут по которому производится перенаправление\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pages.About</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;*&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pages.NotFound</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Перенаправление маршрута v5"
      },
      "3-basic-routing-old": {
         "data": "<h2 class=\"conspect__header\">\r\n   Основы React-Router v5\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   React-Router позволяет организовать маршрутизацию \r\n   в приложениях javascript. Его функции - управление\r\n   историей, адресной строкой и рендер определенных \r\n   компонентов при определенном адресе в адресной строке.   \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   App.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт компонента BrowserRouter\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Router</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Компонент Router передает информацию о текущем местоположении всем дочерним элементам, вложенным в него\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Router</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RoutesExample</span> /&gt;</span>;\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Router</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   RoutesExample.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Switch</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Link</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RoutesExample</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Компонент Link можно использовать везде внутри Router он эмулирует поведение внутренней ссылки в html\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>Go Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n<span data-reference=\"Компонент Switch рендерит первый из дочерних компонентов Route, чей путь совпадает с текущим адресом в адресной строке браузера. Switch можно использовать многократно, в том числе во вложенных компонентах\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n<span data-reference=\"Компонент Route содержит путь, при совпадении которого происходит рендер дочернего компонента. Атрибут exact требует полного совпадения пути вместо частичного\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\r\n<span data-reference=\"Компонент для рендера в случае совпадения пути\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Home</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/events&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Events</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/products&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Products</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/contacts&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Contacts</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n<span data-reference=\"Путь * обозначает любой путь, но будучи размещенным в конце Switch, он срабатывает если ни один из предыдущих путей не сработал. Используется для компонента NotFound\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;*&quot;</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NotFound</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Switch</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   NotFound.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт хука useLocation\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { useLocation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NotFound</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Хук useLocation возвращает объект представляющий текущий URL страницы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> location = <span class=\"hljs-title function_\">useLocation</span>();\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"В свойстве location.pathname находится текущий URL страницы\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Resource not found: {location.pathname}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Основы React-Router v5"
      },
      "4-basic-routing": {
         "data": "<h2 class=\"conspect__header\">\r\n   Основы React-Router v6\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   React-Router позволяет организовать маршрутизацию \r\n   в приложениях javascript. Его функции - управление\r\n   историей, адресной строкой и рендер определенных \r\n   компонентов при определенном адресе в адресной строке.   \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   App.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт компонента BrowserRouter\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Router</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Компонент Router передает информацию о текущем местоположении всем дочерним элементам, вложенным в него\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Router</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RoutesExample</span> /&gt;</span>;\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Router</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   RoutesExample.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Link</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Routes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RoutesExample</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\r\n<span data-reference=\"Компонент Link эмулирует поведение ссылки, осуществляет преход по маршруту, обновляет адресную строку и добавляет путь в History\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/contacts&quot;</span>&gt;</span>Contacts<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n<span data-reference=\"Битая ссылка на несуществующий маршрут\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/unknown&quot;</span>&gt;</span>Unknown Page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\r\n<span data-reference=\"Компонент Routes содержит все маршруты сайта\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Routes</span>&gt;</span>\r\n<span data-reference=\"Компонент Route представляет собой отдельный маршрут, сопоставляющий путь с определенным компонентом\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Home</span> /&gt;</span>} /&gt;\r\n<span data-reference=\"Маршрут имеющий вложенные маршруты\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;about&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">About</span> /&gt;</span>}&gt;\r\n<span data-reference=\"Вложенный маршрут доступен как /about/history из любого места сайта либо как history внутри компонента About\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;history&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">History</span> /&gt;</span>} /&gt;\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;location&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Location</span> /&gt;</span>} /&gt;\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Route</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;contacts&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Contacts</span> /&gt;</span>} /&gt;\r\n<span data-reference=\"Маршрут обрабатывает все маршруты, которые небыли обработаны и скорее всего ошибочны\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;*&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">NotFound</span> /&gt;</span>} /&gt;\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Routes</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   About.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Link</span>, <span class=\"hljs-title class_\">Outlet</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">About</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[About]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\r\n<span data-reference=\"Ссылка на относительный маршрут, работает изнутри About.js\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;history&quot;</span>&gt;</span>History<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n<span data-reference=\"Ссылка на обсолютный маршрут, работает везеде\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/about/location&quot;</span>&gt;</span>Location<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\r\n<span data-reference=\"Компонент Outlet замещается дочерним компонентом, при переходе по маршруту с вложенным компонентом например /about/location\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Outlet</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   NotFound.js\r\n</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт хука useLocation\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { useLocation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NotFound</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Хук useLocation возвращает объект представляющий текущий URL страницы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> location = <span class=\"hljs-title function_\">useLocation</span>();\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"В свойстве location.pathname находится текущий URL страницы\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Resource not found: {location.pathname}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Основы React-Router v6"
      },
      "5-useRoutes": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук useRoutes\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Хук возвращает компонент с маршрутами,\r\n   аналогичный Routes, который будет создан\r\n   на основе массива конфигурации, переданного в \r\n   useRoutes.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   RoutesExample.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { useRoutes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RoutesExample</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Передача хуку массива с конфигурациями маршрутов, используется let\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">let</span> routes = <span class=\"hljs-title function_\">useRoutes</span>([\r\n<span data-reference=\"Конфигурация единичного маршрута\" class=\"conspect__reference\">i</span>         { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Home</span> /&gt;</span></span> },\r\n         {\r\n            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;about&#x27;</span>,\r\n            <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">About</span> /&gt;</span></span>,\r\n<span data-reference=\"Массив с дочерними маршрутами\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">children</span>: [\r\n               { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;history&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">History</span> /&gt;</span></span> },\r\n               { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;location&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Location</span> /&gt;</span></span> }\r\n            ]\r\n         },\r\n         { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;contacts&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Contacts</span> /&gt;</span></span> },\r\n<span data-reference=\"Маршрут для обработки битых ссылок\" class=\"conspect__reference\">i</span>         { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;*&#x27;</span>, <span class=\"hljs-attr\">element</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NotFound</span> /&gt;</span></span> }\r\n      ]);\r\n\r\n<span data-reference=\"Возвращаем созданный компонент Routes\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> routes;\r\n   }\r\n</code></pre>",
         "title": "Хук useRoutes"
      },
      "6-useParams": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук useParams\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Хук позволяет использовать передачу данных через\r\n   url адрес внутри приложения. Данные могут быть использованы\r\n   копонентами определенных маршрутов.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Colors.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Colors</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Routes</span>&gt;</span>\r\n<span data-reference=\"При переходе в корень сайта отображается компонент ColorRequest\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">ColorRequest</span> /&gt;</span>} /&gt;\r\n<span data-reference=\"При переходе по любому адресу, этот адрес воспринимается как параметр hex\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">&quot;:hex&quot;</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">ColorDetails</span> /&gt;</span>} /&gt;\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Routes</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorRequest</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Текущее введенное значение цвета находится в color\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [color, setColor] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n               {&#x27;Color HEX code: &#x27;}\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\r\n                  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\r\n                  <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setColor(e.target.value)}\r\n                  value={color}\r\n               /&gt;\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>{&#x27; &#x27;}\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n<span data-reference=\"Динамическая ссылка, url формируется из переменной состояния color, тем самым параметр передается в url\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">{</span>`/${<span class=\"hljs-attr\">color</span>}`}&gt;</span>Show Color<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   ColorDetails.js\r\n</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorDetails</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Хук возвращает обьект, в котором свойствами являются названия параметров, а значения извлекаются из url\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">let</span> params = <span class=\"hljs-title function_\">useParams</span>();\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Использование значения параметра hex\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Color HEX Code: {params.hex}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\r\n                  <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">200</span>,\r\n                  <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">100</span>,\r\n<span data-reference=\"Использование значения параметра hex\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">backgroundColor:</span> `#${<span class=\"hljs-attr\">params.hex</span>}`\r\n               }}\r\n            &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>Check new color<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук useParams"
      }
   },
   "keys": [
      {
         "sectionTitle": "Основы",
         "pages": [
            "1-functional-programming",
            "2-important-points"
         ]
      },
      {
         "sectionTitle": "Управление состоянием",
         "pages": [
            "1-star-raiting",
            "2-color-organizer",
            "3-use-input",
            "4-color-organizer-context"
         ]
      },
      {
         "sectionTitle": "Использование хуков",
         "pages": [
            "1-effect-hook",
            "2-effect-deps",
            "3-layoutEffect-hook",
            "4-hooks-rules",
            "5-reducer-hook",
            "6-rendering-improving"
         ]
      },
      {
         "sectionTitle": "Запросы данных",
         "pages": [
            "1-data-exchange",
            "2-data-fetching",
            "3-data-storage",
            "4-response-processing",
            "5-render-props",
            "6-virtualized-list",
            "7-useFetch",
            "8-fetch-component",
            "9-useIterator",
            "10-cascading-queries",
            "11-parallel-queries",
            "12-request-canceling",
            "13-useChatRoom"
         ]
      },
      {
         "sectionTitle": "Обработка ошибок",
         "pages": [
            "1-site-template",
            "2-error-boundaries",
            "4-how-suspense-works"
         ]
      },
      {
         "sectionTitle": "Тестирование",
         "pages": [
            "1-eslint",
            "2-prettier",
            "3-tdd",
            "4-jest-basics",
            "5-conponents-testing"
         ]
      },
      {
         "sectionTitle": "Маршрутизация",
         "pages": [
            "1-nesting-old",
            "2-redirecting-old",
            "3-basic-routing-old",
            "4-basic-routing",
            "5-useRoutes",
            "6-useParams"
         ]
      }
   ]
}