{
   "pages": {
      "1-components-elements": {
         "data": "<h2 class=\"conspect__header\">\r\n   Компоненты и элементы\r\n   <a href=\"https://ru.reactjs.org/docs/rendering-elements.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Основы</h3>\r\n<pre><code>\r\n<span data-reference=\"Элемент, состоит из простых тэгов\" class=\"conspect__reference\">i</span>   &lt;h1&gt;<span class=\"hljs-title class_\">Hello</span>, world&lt;/h1&gt;\r\n<span data-reference=\"Компонент представляет собой объект React, состоит в том числе и из элементов\" class=\"conspect__reference\">i</span>   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Алиса&quot;</span> /&gt;</span></span>\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Создание компонентов</h3>\r\n<pre><code>\r\n<span data-reference=\"Создание функционального компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome, {props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n   }  \r\n  \r\n<span data-reference=\"Создание классового компонента, функциональные и классовые компоненты эквивалентны\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Welcome</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome, {this.props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n      }\r\n  }\r\n</code></pre>\r\n<p class=\"conspect__text\">\r\n   React-компонент должен именоваться <span class=\"conspect__marked-text\">только с заглавной буквы</span>, иначе React\r\n   воспринимает его как тэг.\r\n   React-компоненты обязаны вести себя как <span class=\"conspect__marked-text\">чистые функции</span> по отношению к\r\n   своим пропсам. То есть\r\n   нельзя изменять props внутри функции компонента, <span class=\"conspect__marked-text\">props только для чтения</span>!\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Рендеринг</h3>\r\n<pre><code>\r\n<span data-reference=\"Создаем элемент из компонента, при этом все его атрибуты записываются как свойства объекта props, для создания элемента вызвается функция Welcome, которой в качестве аргумента передается созданный объект props\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Alisa&quot;</span> /&gt;</span></span>;\r\n\r\n<span data-reference=\"Рендеринг созданного элемента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(\r\n      element,\r\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\r\n  );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Композиция компонентов</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Greeting</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Компоненты можно вкладывать в элементы и друг в друга\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Jenny&quot;</span> /&gt;</span>      \r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;John&quot;</span> /&gt;</span>   \r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Welcome</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Lara&quot;</span> /&gt;</span>   \r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n    );\r\n  }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Извлечение компонентов</h3>\r\n<p class=\"conspect__text\">\r\n   Если какая-то часть интерфейса многократно повторяется (Button, Panel, Avatar) или сама по\r\n   себе достаточно сложная (App, FeedStory, Comment), имеет смысл её вынести\r\n   в независимый компонент:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Сложный компонент, поэтому его можно разделить на более простые\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Comment</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Comment&quot;</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserInfo</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{props.author}</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Comment-text&quot;</span>&gt;</span>\r\n            {props.text}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Comment-date&quot;</span>&gt;</span>\r\n            {formatDate(props.date)}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Выделение компонетов начинаем с самого глубоко вложенного и простого, затем двигаемся выше\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Avatar</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Avatar&quot;</span>\r\n         <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{props.user.avatarUrl}</span>\r\n         <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{props.user.name}</span>\r\n      /&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Компонент содержит в себе другой компонент, свойства передаются через объект props\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserInfo</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;UserInfo&quot;</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{props.user}</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;UserInfo-name&quot;</span>&gt;</span>\r\n            {props.user.name}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Компоненты и элементы"
      },
      "2-component-state": {
         "data": "<h2 class=\"conspect__header\">\r\n   Состояние компонента\r\n   <a href=\"https://ru.reactjs.org/docs/state-and-lifecycle.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Работа с состоянием</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Clock</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Обязательно вызываем базовый класс и передаем ему props\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Устанавливаем исходное состояние\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()};         \r\n      }\r\n     \r\n<span data-reference=\"Метод жизненного цикла компонента, вызывается когда компонент отрендерился\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Добавляем в компонент новое поле timerID для хранения таймера\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timerID</span> = <span class=\"hljs-built_in\">setInterval</span>(\r\n            <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">tick</span>(),\r\n            <span class=\"hljs-number\">1000</span>\r\n         );\r\n      }\r\n     \r\n<span data-reference=\"Метод жизненного цикла компонента, вызывается когда компонент удаляется\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timerID</span>);\r\n      }\r\n     \r\n      <span class=\"hljs-title function_\">tick</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Метод this.setState() планирует обновление внутреннего состояния компонента. Для обновления состояния можно использовать только этот метод, напрямую менять state можно только в конструкторе!\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({\r\n            <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\r\n         });\r\n      }\r\n     \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Current time:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n<span data-reference=\"Объект даты берем из состояния компонента\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{this.state.date.toLocaleTimeString()}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>   \r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Работа кода</h3>\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         При передаче &lt;Clock /&gt; в ReactDOM.render создается компонент, при этом вызывается конструктор класса Clock,\r\n         в конструкторе устанавливается начальное состояние компонента в  this.state.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         React вызывает метод render компонента, при этом происходит обновление DOM разметкой возвращенной из render.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         Как только компонент был отрендерен, вызывается метод componentDidMount, запускающий вызов метода tick\r\n         каждую секунду.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         Метод tick обновляет состояние компонента встроенным методом this.setState, изменяя дату на текущую.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         При изменении состояния компонента, React снова запускает метод render компонента, при этом this.state.date\r\n         содержит новое значение, которое отображается на экране.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         Если компонент Clock когда-либо удалится из DOM, React вызовет метод жизненного цикла componentWillUnmount()\r\n         и сбросит таймер, чтобы освободить память.\r\n      </p>\r\n   </li>\r\n</ol>\r\n\r\n<p class=\"conspect__text\">\r\n   Для обновления состояния можно использовать <span class=\"conspect__marked-text\">только метод setState</span>, \r\n   напрямую менять state можно только в конструкторе, прямое изменение \r\n   state не вызывает повторный рендеринг компонента.\r\n   this.props и this.state могут обновляться асинхронно, потому не \r\n   стоит полагаться на их текущее значение для вычисления следующего состояния, \r\n   можно использовать функцию, передаваемую в setState:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(\r\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">state, props</span>) =&gt;</span> (\r\n         { <span class=\"hljs-attr\">counter</span>: state.<span class=\"hljs-property\">counter</span> + props.<span class=\"hljs-property\">increment</span> }\r\n      )\r\n   );\r\n</code></pre>\r\n   \r\n<p class=\"conspect__text\">\r\n   Когда мы вызываем setState, React <span class=\"conspect__marked-text\">объединит новое состояние</span> c текущим \r\n   состоянием, старое состояние не заменяется новым целиком.\r\n   Состояние доступно только для самого компонента и скрыто от других, передать \r\n   его значение внутренним компонентам можно только через \r\n   пропсы: \r\n</p>\r\n<pre><code>\r\n   &lt;<span class=\"hljs-title class_\">FormattedDate</span> date={<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">date</span>} /&gt;\r\n</code></pre>",
         "title": "Состояние компонента"
      },
      "3-composition": {
         "data": "<h2 class=\"conspect__header\">\r\n   Композиция против наследования\r\n   <a href=\"https://ru.reactjs.org/docs/composition-vs-inheritance.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Вставка дочерних компонентов</h3>\r\n<pre><code>\r\n<span data-reference=\"Блок с определенным оформлением, его содержимое заранее неизвестно\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CoolBlock</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">coolBorder__</span>&#x27; + <span class=\"hljs-attr\">props.color</span>}&gt;</span>\r\n<span data-reference=\"children - специальный проп, содержит в себе массив всех дочерних элементов, которые были включены в компонент\" class=\"conspect__reference\">i</span>            {props.children}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n      \r\n   <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(\r\n<span data-reference=\"Элементы попадут в props.children компонента CoolBlock и будут вставлены внутрь\" class=\"conspect__reference\">i</span>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CoolBlock</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;red&quot;</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Welcome to hell!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CoolBlock</span>&gt;</span></span>,\r\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\r\n   );      \r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Множественная вставка</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Panel</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;panel&quot;</span>&gt;</span>{props.data}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Logo</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;country&quot;</span>&gt;</span>{props.text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n   }\r\n\r\n<span data-reference=\"Блок с определенной структурой и оформлением, содержимое также заранее неизвестно\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Heading</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;heading&quot;</span>&gt;</span>\r\n<span data-reference=\"Содержимое пропсов будет вставлено в определенное место\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;heading__left&quot;</span>&gt;</span>{this.props.left}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;heading__right&quot;</span>&gt;</span>{this.props.right}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n\r\n   <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(\r\n<span data-reference=\"Компонент будет вставлен в левый блок\" class=\"conspect__reference\">i</span>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span> <span class=\"hljs-attr\">left</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Logo</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;LogoType&quot;</span> /&gt;</span>}\r\n<span data-reference=\"Все компоненты мссива будут вставлены в правый блок\" class=\"conspect__reference\">i</span>         right={[\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Panel</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;nav&quot;</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">&quot;Navigation panel&quot;</span> /&gt;</span>,\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Panel</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;aside&quot;</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">&quot;Aside panel&quot;</span> /&gt;</span>\r\n         ]}\r\n      /&gt;</span>,\r\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\r\n   );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Специализация</h3>\r\n<h3 class=\"conspect__subheader\">Функциональные компонеты</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонент Dialog как общий случай диалога, ппредставляет общую структуру и форматирование\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Dialog</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Dialog&quot;</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Dialog__title&quot;</span>&gt;</span>\r\n                  {props.title}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Dialog__message&quot;</span>&gt;</span>\r\n                  {props.message}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n      \r\n<span data-reference=\"Частный случай специализации компонента Dialog\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">WelcomeDialog</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"В рендере используется специализация общего компонента вместо наследования\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Добро пожаловать!&quot;</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">{props.message}</span> /&gt;</span></span>\r\n      );\r\n   }\r\n      \r\n   <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WelcomeDialog</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Мы рады вас видеть!&quot;</span> /&gt;</span></span>,\r\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\r\n   );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Классовые компоненты</h3>\r\n<pre><code>\r\n<span data-reference=\"Общий случай компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Dialog</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Dialog&quot;</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Dialog__title&quot;</span>&gt;</span>\r\n                  {props.title}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Dialog__message&quot;</span>&gt;</span>\r\n                  {props.message}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n<span data-reference=\"Вставка дочерних элементов\" class=\"conspect__reference\">i</span>            {props.children}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n      \r\n<span data-reference=\"Компонент основанный на расширении Dialog\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignUpDialog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">login</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>};\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSignUp</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSignUp</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">e</span>) {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">login</span>: e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>});\r\n      }\r\n      <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\">e</span>) {\r\n         <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">`Добро ппожаловать на борт, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.state.login}</span>!`</span>);\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Новые элеметы будут вставлены внутрь Dialog\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Полет на Марс&quot;</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Как к вам обращаться?&quot;</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.login}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleChange}</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.handleSignUp}</span>&gt;</span>Записаться!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Помните, что компоненты могут принимать произвольные пропсы, \r\n   включая примитивные значения, React-элементы или функции.\r\n</p>",
         "title": "Композиция против наследования"
      },
      "4-conditional-rendering": {
         "data": "<h2 class=\"conspect__header\">\r\n   Условный рендеринг\r\n   <a href=\"https://ru.reactjs.org/docs/conditional-rendering.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">С использованием оператора IF</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонет приветствия вошедшего пользователя\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserGreeting</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>С возвращением<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n   }\r\n\r\n<span data-reference=\"Компонент приветствия гостя\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">GuestGreeting</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Войдите пожалуйста<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Greeting</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">const</span> isLoggedIn = props.<span class=\"hljs-property\">isLoggedIn</span>;\r\n\r\n<span data-reference=\"В зависимости от значения пропа, происходит условный рендеринг одного из компонентов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">if</span>(isLoggedIn) {\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserGreeting</span> /&gt;</span></span>;\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">GuestGreeting</span> /&gt;</span></span>;\r\n      }\r\n   }\r\n\r\n<span data-reference=\"Компонент кнопка входа\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LoginButton</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{props.onClick}</span>&gt;</span>\r\n            Войти\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Компонент кнопка выхода\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LogoutButton</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{props.onClick}</span>&gt;</span>\r\n            Выйти\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Управляющий компонент, содержит логику рендеринга других компонентов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginControl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleLoginClick</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleLoginClick</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleLogoutClick</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleLogoutClick</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-literal\">false</span>};\r\n      }\r\n      \r\n<span data-reference=\"При нажатии на кнопку измняем состояние управляющего комппонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">handleLoginClick</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-literal\">true</span>});\r\n      }\r\n      <span class=\"hljs-title function_\">handleLogoutClick</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-literal\">false</span>});\r\n      }\r\n      \r\n<span data-reference=\"После изменения состояния управляющего компонента происходит повторный рендеринг\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">const</span> isLoggedIn = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">isLoggedIn</span>;\r\n         <span class=\"hljs-keyword\">let</span> button;\r\n      \r\n<span data-reference=\"В зависимости от состояния, рендерим один из вариантов кнопки\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(isLoggedIn) {\r\n            button = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LogoutButton</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.handleLogoutClick}</span> /&gt;</span></span>\r\n         } <span class=\"hljs-keyword\">else</span> {\r\n            button = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LoginButton</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.handleLoginClick}</span> /&gt;</span></span>\r\n         }\r\n      \r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Передаем состояние через проп дочернему компоненту, при этом он сам определяет свой внешний вид\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Greeting</span> <span class=\"hljs-attr\">isLoggedIn</span>=<span class=\"hljs-string\">{isLoggedIn}</span> /&gt;</span>\r\n<span data-reference=\"Вставляем кнопку в JSX из переменной button\" class=\"conspect__reference\">i</span>               {button}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">С использованием &&</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Mailbox</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">const</span> unreadMessanges = props.<span class=\"hljs-property\">unreadMessanges</span>;\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуйте!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            {\r\n<span data-reference=\"Если первое условие false  - выражение вернет его, React проигнорирует false\" class=\"conspect__reference\">i</span>               unreadMessanges.length &gt; 0 &amp;&amp;\r\n<span data-reference=\"Если первое условие true, выражение вернет элемент, а  React  выполнит его рендеринг\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>У вас {unreadMessanges.length} непрочитанных сообщений!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n            }\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">IF-ELSE с тернарным опператором</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LoginButton</span>(<span class=\"hljs-params\">prop</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>\r\n<span data-reference=\"В зависимости от значения пропа - текст кнопки будет разным. Вместо значений можно использовать компоненты и элементы\" class=\"conspect__reference\">i</span>            {prop.isLoggedIn ? &#x27;Выйти&#x27; : &#x27;Войти&#x27;}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>   \r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Предотвращение рендеринга комппонента</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Welcome</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">if</span>(!props.<span class=\"hljs-property\">shown</span>) {\r\n<span data-reference=\"Если вернуть для рендеринга null - компонент не будет показан, при этом методы его жизненного цикла все равно будут запущены\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n          <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n      }\r\n   }\r\n</code></pre>",
         "title": "Условный рендеринг"
      },
      "5-events-handling": {
         "data": "<h2 class=\"conspect__header\">\r\n   Обработка событий\r\n   <a href=\"https://ru.reactjs.org/docs/handling-events.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Особенности</h3>\r\n<p class=\"conspect__text\">\r\n   Функции обработчики событий передаются как  <span class=\"conspect__marked-text\">атрибуты JSX</span>, при этом они \r\n   именуются в <span class=\"conspect__marked-text\">camelCase</span>. Для отмены действий по умолчанию используется \r\n   только <span class=\"conspect__marked-text\">preventDefault()</span>, возврат false не работает.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Добавление обработчика события к компоненту\" class=\"conspect__reference\">i</span>   &lt;button onClick={showSomth}&gt;\r\n      <span class=\"hljs-variable constant_\">SHOW</span>\r\n   &lt;/button&gt;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Пример реализации</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Toggle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">isToggleOn</span>: <span class=\"hljs-literal\">true</span>};\r\n         \r\n<span data-reference=\"Привязка this к функции для дальнейшего вызова\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onClick</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onClick</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n      }\r\n     \r\n<span data-reference=\"Функция для обработки события клика\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> ({\r\n            <span class=\"hljs-attr\">isToggleOn</span>: !state.<span class=\"hljs-property\">isToggleOn</span>\r\n         }));\r\n      } \r\n\r\n<span data-reference=\"В таком виде (как поле класса) handleClick можно использовать без привязки через bind\" class=\"conspect__reference\">i</span>      <span class=\"hljs-comment\">// onClick = () =&gt; {</span>\r\n      <span class=\"hljs-comment\">//     console.log(&#x27;Значение this: &#x27;, this);</span>\r\n      <span class=\"hljs-comment\">// }</span>\r\n     \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Передача метода класса в качестве обработчика события\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick}</span>&gt;</span>\r\n<span data-reference=\"Значение контента внути кнопки в зависимости от состояния\" class=\"conspect__reference\">i</span>               {this.state.isToggleOn ? &#x27;Включено&#x27; : &#x27;Выключено&#x27;}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>",
         "title": "Обработка событий"
      },
      "6-forms": {
         "data": "<h2 class=\"conspect__header\">\r\n   Формы\r\n   <a href=\"https://ru.reactjs.org/docs/forms.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Управляемые компоненты</h3>\r\n<h3 class=\"conspect__subheader\">Input, TextArea</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Начальное состояние пустой формы\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>};\r\n\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">event</span>) {\r\n<span data-reference=\"При изменении input меняем состояние элемента\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">value</span>: event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>});\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\">event</span>) {\r\n         <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;Отправлено имя: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">value</span>);\r\n<span data-reference=\"Отмена отправки формы по умолчанию\" class=\"conspect__reference\">i</span>         event.<span class=\"hljs-title function_\">preventDefault</span>();\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Привязка метода к событию отправки форм\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{this.handleSubmit}</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Имя:\r\n<span data-reference=\"Привязка значения input к состоянию компонента и метода к событию изменения input\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\r\n                         <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.value}</span> \r\n                         <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleChange}</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Отправить&quot;</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n<p class=\"conspect__text\">\r\n   input type=\"text\" и textarea работают с содержимым аналогично, через value.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Select</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColorForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Устанавливаем начальное значение select\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;green&#x27;</span>};\r\n\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">event</span>) {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">value</span>: event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>});\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\">event</span>) {\r\n         <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;Выбранный цвет: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">value</span>);\r\n         event.<span class=\"hljs-title function_\">preventDefault</span>();\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{this.handleSubmit}</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n                  Ваш любимый цвет?\r\n<span data-reference=\"В React для выбора одного из вариантов используется value элемента select\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.value}</span>\r\n                          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleChange}</span>&gt;</span>\r\n                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;green&quot;</span>&gt;</span>Зеленый<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\r\n                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;red&quot;</span>&gt;</span>Красный<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\r\n                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;blue&quot;</span>&gt;</span>Синий<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\r\n                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;black&quot;</span>&gt;</span>Черный<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Отправить&quot;</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }  \r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Использование множественного выбора Select</h3>\r\n<pre><code>\r\n   &lt;select multiple={<span class=\"hljs-literal\">true</span>} value={[<span class=\"hljs-string\">&#x27;Б&#x27;</span>, <span class=\"hljs-string\">&#x27;В&#x27;</span>]}&gt;&lt;/select&gt;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Обработка нескольких input с разным name и type</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reservation</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Начальное состояни содержит 2 свойства, имена свойств соответствуют именам input\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {\r\n            <span class=\"hljs-attr\">isGoing</span>: <span class=\"hljs-literal\">true</span>,\r\n            <span class=\"hljs-attr\">numberOfGuests</span>: <span class=\"hljs-number\">2</span>\r\n         };\r\n\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleInputChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleInputChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">handleInputChange</span>(<span class=\"hljs-params\">event</span>) {\r\n         <span class=\"hljs-keyword\">const</span> target = event.<span class=\"hljs-property\">target</span>;\r\n<span data-reference=\"Определяем имя input который был изменен\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> name = target.<span class=\"hljs-property\">name</span>;\r\n\r\n<span data-reference=\"Способ получения значения различается в зависимости от типа input\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> value = target.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;checkbox&#x27;</span> ?\r\n            target.<span class=\"hljs-property\">checked</span> : target.<span class=\"hljs-property\">value</span>;\r\n      \r\n<span data-reference=\"Записываем новое значение input в состояние, используя имя input в качестве ключа\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({[name]: value});\r\n\r\n      }\r\n      \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n                  Пойдут:\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\r\n                     <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;isGoing&quot;</span>\r\n                     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>\r\n                     <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{this.state.isGoing}</span>\r\n                     <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleInputChange}</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\r\n                     <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;numberOfGuests&quot;</span>\r\n                     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\r\n                     <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.numberOfGuests}</span>\r\n                     <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleInputChange}</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Начальное значение value</h3>\r\n<pre><code>\r\n<span data-reference=\"Жёстко заданное значение - не позволяет редактировать значение внутри input\" class=\"conspect__reference\">i</span>   &lt;input value=<span class=\"hljs-string\">&quot;Привет&quot;</span> /&gt;\r\n\r\n<span data-reference=\"Последующая передача null делает input редактируемым\" class=\"conspect__reference\">i</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{null}</span> /&gt;</span></span>\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   <a href=\"https://formik.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      https://formik.org/\r\n   </a> - полноценное решение, которое может валидировать ввод, запомнить \r\n   посещённые поля формы и обработать её отправку\r\n</p>",
         "title": "Формы"
      },
      "7-lists-and-keys": {
         "data": "<h2 class=\"conspect__header\">\r\n   Списки и ключи\r\n   <a href=\"https://ru.reactjs.org/docs/lists-and-keys.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Вставка итерируемых объектов</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NameList</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Преобразуем массив значений в массив элементов через JSX\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> lists = props.<span class=\"hljs-property\">names</span>.<span class=\"hljs-title function_\">map</span>(\r\n<span data-reference=\"При этом каждый элемент списка должен иметь уникальный в пределах списка ключ (не глобально).  Определять ключи нужно в функции обрабатывающей массив, например map. Ключи не передаются в props\" class=\"conspect__reference\">i</span>            <span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{name}</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>   \r\n      );\r\n      \r\n<span data-reference=\"React самостоятельно распаковывает значения их массива при обработке JSX\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>{lists}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\r\n   }\r\n\r\n<span data-reference=\"Массив со значениями\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> names = [\r\n      <span class=\"hljs-string\">&#x27;Lora&#x27;</span>,\r\n      <span class=\"hljs-string\">&#x27;Sonya&#x27;</span>,\r\n      <span class=\"hljs-string\">&#x27;Jenny&#x27;</span>\r\n   ];\r\n\r\n   <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(\r\n<span data-reference=\"Передаем массив значений в качестве свойства\" class=\"conspect__reference\">i</span>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NameList</span> <span class=\"hljs-attr\">names</span>=<span class=\"hljs-string\">{names}</span> /&gt;</span></span>,\r\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\r\n   );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Встаивание map в JSX</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NameList</span>(<span class=\"hljs-params\">props</span>) {   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\r\n            {props.names.map(\r\n<span data-reference=\"JSX позволяет встраивать выражения с map и т.д. внутри себя, так как они возвращают итерируемые объекты\" class=\"conspect__reference\">i</span>               name =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span> /&gt;</span>\r\n            )}\r\n            // \r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Списки и ключи"
      },
      "8-thinking-in-react": {
         "data": "<h2 class=\"conspect__header\">\r\n   Философия React\r\n   <a href=\"https://ru.reactjs.org/docs/thinking-in-react.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Исходные данные:</h3>\r\n<ol class=\"conspect__list\">\r\n   <li>Формат данных JSON.</li>\r\n   <li>Макет приложения.</li>\r\n</ol>\r\n\r\n<h3 class=\"conspect__subheader\">Ход работы:</h3>\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Разобъём интерфейс на составляющие:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Выделить отдельные компоненты макета и дать им имена, можно \r\n            выделить разными цветами. Каждый компонент должен заниматься какой-то одной задачей.\r\n         </li>\r\n         <li>\r\n            Расположить компоненты в виде вложенного списка в соответствии с иерархией.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Создадим статическое приложение в React:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Написать код компонентов двигаясь по иерархии, компоненты должны \r\n            только обрабатывать и рендерить статические данные, передаваемые \r\n            через пропсы,  никакой интерактивности и состояния не использовать. \r\n            Движение сверху вниз - для простых приложений, наоборот для сложных.\r\n         </li>\r\n         <li>\r\n            Собрать приложение с односторонним потоком данных сверху вниз, используя\r\n            только передачу даных через props\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Определим минимальное состояния интерфейса:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Перечислить все данные нашего приложения, составив список.\r\n         </li>\r\n         <li>\r\n            Отфильтровать данные по следующим критериям:\r\n            <ul class=\"conspect__list\">\r\n               <li>данные получены от родителя через пропсы - вычеркнуть</li>\r\n               <li>данные не меняются со временем - вычеркнуть</li>\r\n               <li>данные можно вычислить на основании других данных или пропсов - вычеркнуть</li>\r\n            </ul>\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Определим, где должно находиться наше состояние:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Определить компоненты, которые рендерят что-то исходя из состояния.\r\n         </li>\r\n         <li>\r\n            Найти общий компонент выше по иерархии, над компонентами,  \r\n            которым нужно это состояние.\r\n         </li>\r\n         <li>\r\n            Либо общий главенствующий компонент, либо любой компонент, стоящий \r\n            выше по иерархии, должен содержать состояние.\r\n         </li>\r\n         <li>\r\n            Если вам не удаётся найти подходящий компонент, то создайте новый \r\n            исключительно для хранения состояния и разместите его выше в \r\n            иерархии над общим главенствующим компонентом.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Добавить состояние в найденный компонент:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Добавить свойство this.state в конструктор выбранного компонента, \r\n            чтобы отобразить начальное состояние нашего приложения.\r\n         </li>\r\n         <li>\r\n            Передать состояние через пропсы нижестоящим компонентам, \r\n            которые его используют.\r\n         </li>\r\n         <li>\r\n            Организовать обработку данных полученных через пропсы, \r\n            в нижестоящих компонентах.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Добавить обратный поток данных:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Создать колбэки для изменения разных свойств состояния \r\n            внутри управляющего компонента.\r\n         </li>\r\n         <li>\r\n            Передать соответствующие колбэки компонентам через пропсы.\r\n         </li>\r\n         <li>\r\n            Настроить вызов переданых колбэков в компонентах при \r\n            изменении значений элементов компонента пользователем.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ol>",
         "title": "Философия React"
      },
      "9-jsx": {
         "data": "<h2 class=\"conspect__header\">\r\n   Синтаксис JSX\r\n   <a href=\"https://ru.reactjs.org/docs/introducing-jsx.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Дочерние элементы в JSX</h3>\r\n<pre><code>\r\n<span data-reference=\"Если тег пуст, то его можно сразу же закрыть.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementOne = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{user.avatarUrl}</span> /&gt;</span></span>;\r\n\r\n<span data-reference=\"Если JSX выражение на нескольких строках, его следует заключать в круглые скобки, чтобы избежать проблем, связанных с автоматической вставкой точек с запятой\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementTwo = (\r\n<span data-reference=\"JSX-теги могут и содержать дочерние элементы\" class=\"conspect__reference\">i</span>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуйте!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Рады вас видеть.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Встраивание выражений</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&#x27;John Smith&#x27;</span>;\r\n<span data-reference=\"В фигурные скобки можно встраивать любое js выражение\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello {name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Результат компиляции JSX</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getGreeting</span>(<span class=\"hljs-params\">user</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (user) {\r\n<span data-reference=\"Результат компиляции JSC - объект JS, его можно передовать в код и возвращать из функций\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуй, {formatName(user)}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n      }\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Здравствуй, незнакомец.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\r\n   }\r\n\r\n<span data-reference=\"Создание элемента через JSX, Babel компилирует JSX в вызовы React.createElement\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = (\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;greeting&quot;</span>&gt;</span>\r\n         Привет, мир!\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n   );\r\n\r\n<span data-reference=\"Создание аналогичного элемента через вызов функции React.createElement напрямую\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(\r\n      <span class=\"hljs-string\">&#x27;h1&#x27;</span>,\r\n      {<span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;greeting&#x27;</span>},\r\n      <span class=\"hljs-string\">&#x27;Привет, мир!&#x27;</span>\r\n  );\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Атрибуты в JSX</h3>\r\n<pre><code>\r\n<span data-reference=\"Если в атрибут передается строковый литерал - то используются ковычки\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementOne = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">tabIndex</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\r\n<span data-reference=\"Если в атрибут передается JavaScript выражение - то используются фигурные скобки. React экранирует все значения, включённые в JSX для безопасности, перед тем как отрендерить их.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> elementTwo = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{user.avatarUrl}</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">img</span>&gt;</span></span>;\r\n</code></pre>\r\n<p class=\"conspect__text\">\r\n   При именовани атрибутов в JSX используется <span class=\"conspect__marked-text\">стиль CamelCase</span>\r\n   при этом class становится className, а tabindex - tabIndex.\r\n   JSX удаляет пустые строки и пробелы в начале и конце строки. \r\n   Новые строки, примыкающие к тегу будут удалены. Новые строки \r\n   между строковых литералов сжимаются в один пробел. \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Атрибуты расширения</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Greeting</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Hello, {props.name} {props.lastName}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\r\n      );\r\n   }\r\n   \r\n<span data-reference=\"Компонент рендерит красивую рамку, принимает через пропсы тип рамки, остальные же пропсы прозрачно передает дочерним компонентам\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FancyBorder</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Вариант 1, неизбирательный - выделяем нужный пропс в type, ВСЕ остальные пропсы складываем в объект otherProps, в дочерний компонент могут попасть ненужные пропсы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> {type, ...otherProps} = props;\r\n<span data-reference=\"Вариант 2, избирательный - создаем объект содержащий ТОЛЬКО пропсы необходимые дочерним компонентам\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> greetingProps = {\r\n         <span class=\"hljs-attr\">name</span>: props.<span class=\"hljs-property\">name</span>, \r\n         <span class=\"hljs-attr\">lastname</span>: props.<span class=\"hljs-property\">lastName</span>\r\n      };               \r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Пропс type используется текущим компонентом\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{type}</span>&gt;</span>\r\n<span data-reference=\"Используем атрибут расширения, неизбирательно передаем ВСЕ оставшиеся пропсы компоненту Greeting\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Greeting</span> {<span class=\"hljs-attr\">...otherProps</span>} /&gt;</span>\r\n<span data-reference=\"Используем атрибут расширения, передаем объект с необъодимыми пропсами дочернему компоненту\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Greeting</span> {<span class=\"hljs-attr\">...greetingProps</span>} /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Функции как дочерние компоненты</h3>\r\n<pre><code>\r\n<span data-reference=\"Компонент возвращает список, с количеством элементов указанных в атрибуте numTimes\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">List</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Создаем массив\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> items = [];\r\n   \r\n<span data-reference=\"Количество итераций цикла соответствует numTimes\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; props.<span class=\"hljs-property\">numTimes</span>; i++) {\r\n<span data-reference=\"Помещаем в созданный массив компоненты возвращаемые вызываемой функцией\" class=\"conspect__reference\">i</span>         items.<span class=\"hljs-title function_\">push</span>(\r\n<span data-reference=\"Вызываем функцию которая содержится в props.children\" class=\"conspect__reference\">i</span>            props.<span class=\"hljs-title function_\">children</span>(i)\r\n         );\r\n      }\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"При передаче массива с компонентами (элементами) в другой компонент (элемент), массив распаковывается, его содержимое вставляется в родительский компонент (элемент)\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>{items}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\r\n      );\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Возвращаем компонент List с количеством пунктов 10\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span> <span class=\"hljs-attr\">numTimes</span>=<span class=\"hljs-string\">{10}</span>&gt;</span>\r\n<span data-reference=\"Функция переданные таким образом доступна внутри компонента как props.children\" class=\"conspect__reference\">i</span>            {(i) =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{i}</span>&gt;</span>Элемент {i}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Игнорируемые значения</h3>\r\n<p class=\"conspect__text\">\r\n   Следующие значения при передаче для рендера не рендарятся,\r\n   что можно использовать при условном рендере.\r\n</p>\r\n<pre><code>\r\n   &lt;div /&gt;\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{false}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{null}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{undefined}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{true}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Если showHeader true будет передан Header, иначе false, значение которое не рендерится\" class=\"conspect__reference\">i</span>            {showHeader &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> /&gt;</span>}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>  ",
         "title": "Синтаксис JSX"
      },
      "10-lifting-state-up": {
         "data": "<h2 class=\"conspect__header\">\r\n   Подьем состояния\r\n   <a href=\"https://ru.reactjs.org/docs/lifting-state-up.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Состояние сначала добавляется к компоненту, которому оно требуется. \r\n   Затем, если другие компоненты также нуждаются в нём, необходимо \r\n   поднять его до ближайшего общего предка.\r\n</p>\r\n\r\n<pre><code>\r\n<span data-reference=\"Компонент используемый для вывода итогов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">BoilingVerdict</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Темература используемая при рендеринге берется из пропсов\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> temp = props.<span class=\"hljs-property\">temp</span>;\r\n   \r\n         <span class=\"hljs-keyword\">const</span> result = temp &lt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">&#x27;замерзла&#x27;</span> :\r\n                        temp &lt; <span class=\"hljs-number\">100</span> ? <span class=\"hljs-string\">&#x27;жидкая&#x27;</span> :\r\n                        temp &gt;= <span class=\"hljs-number\">100</span> ? <span class=\"hljs-string\">&#x27;кипит&#x27;</span> : <span class=\"hljs-string\">&#x27;высохла&#x27;</span>;\r\n   \r\n<span data-reference=\"При рендере используется значение переменной\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Вода {result}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\r\n      }\r\n      \r\n<span data-reference=\"Поле для ввода температуры, компонент управляется родительским компонентом\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TemperatureInput</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n         <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n            <span class=\"hljs-variable language_\">super</span>(props);\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n         }\r\n      \r\n         <span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">e</span>) {\r\n<span data-reference=\"Вводимые данные передаются выше, в компонент Calculator, который их обрабатывает. Передача данных происходит через функцию, переданную родительским компонентом через пропсы, т.к. функция привязана к родительскому компоненту через bind\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-title function_\">handler</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\r\n         }\r\n         \r\n         <span class=\"hljs-title function_\">scaleName</span>(<span class=\"hljs-params\">type</span>) {\r\n<span data-reference=\"Функция для определения названия шкалы в зависимости от переданного компоненту пропса. Функция хронится в прототипе класса и не привязана к создаваемым объектам\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">return</span> type === <span class=\"hljs-string\">&#x27;c&#x27;</span> ? <span class=\"hljs-string\">&#x27;Цельсия&#x27;</span> : <span class=\"hljs-string\">&#x27;Фаренгейта&#x27;</span>;\r\n         }\r\n      \r\n         <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Компонент получает данные для рендера из пропса\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">temp</span>;\r\n            <span class=\"hljs-keyword\">return</span> (\r\n               <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span>\r\n<span data-reference=\"Имя шкалы вычисляется через функцию\" class=\"conspect__reference\">i</span>                     Температура в градусах {this.scaleName(this.props.scale)}\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\r\n                     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\r\n<span data-reference=\"Отображается значение температуры, взятой компонентом из пропсов\" class=\"conspect__reference\">i</span>                     <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{temp}</span>\r\n<span data-reference=\"Вводимое значение передается компонентом выше, в родительский компонет для обработки\" class=\"conspect__reference\">i</span>                     <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleChange}</span> /&gt;</span>                  \r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span></span>\r\n            );\r\n         }\r\n      }\r\n      \r\n<span data-reference=\"Родительский компонент, управляет дочерними компонентами, хронит в своем состоянии и обрабатывает данные\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Calculator</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n         <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n            <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Начальное состояние\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">scale</span>: <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-attr\">temp</span>: <span class=\"hljs-string\">&#x27;20&#x27;</span>};\r\n\r\n<span data-reference=\"Привязка функций к компоненту, эти функции передаются дочерним компонентам, для передачи данных родительскому компоненту\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">celsiusChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">celsiusChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fahrenheitChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fahrenheitChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);      \r\n         }\r\n      \r\n<span data-reference=\"Функции для передачи данных от дочерних компонентов в состояние родительского компонента\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">celsiusChange</span>(<span class=\"hljs-params\">temp</span>) {\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">scale</span>: <span class=\"hljs-string\">&#x27;c&#x27;</span>, temp});\r\n         }\r\n         <span class=\"hljs-title function_\">fahrenheitChange</span>(<span class=\"hljs-params\">temp</span>) {\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({<span class=\"hljs-attr\">scale</span>: <span class=\"hljs-string\">&#x27;f&#x27;</span>, temp});\r\n         }\r\n      \r\n<span data-reference=\"Функции для вычислений, к компоненту не привязываются, хронятся в прототипе\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">toCelsius</span>(<span class=\"hljs-params\">fahrenheit</span>) {\r\n            <span class=\"hljs-keyword\">return</span> (fahrenheit - <span class=\"hljs-number\">32</span>) * <span class=\"hljs-number\">5</span> / <span class=\"hljs-number\">9</span>;\r\n         }\r\n         <span class=\"hljs-title function_\">toFahrenheit</span>(<span class=\"hljs-params\">celsius</span>) {\r\n            <span class=\"hljs-keyword\">return</span> (celsius * <span class=\"hljs-number\">9</span> / <span class=\"hljs-number\">5</span>) + <span class=\"hljs-number\">32</span>;\r\n         }\r\n         <span class=\"hljs-title function_\">convert</span>(<span class=\"hljs-params\">temp, func</span>) {\r\n            <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">parseFloat</span>(temp);\r\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-built_in\">isNaN</span>(input)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span>;\r\n            \r\n            <span class=\"hljs-keyword\">const</span> converted = <span class=\"hljs-title function_\">func</span>(temp);\r\n            <span class=\"hljs-keyword\">const</span> rounded = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(converted * <span class=\"hljs-number\">1000</span>) / <span class=\"hljs-number\">1000</span>;\r\n            \r\n            <span class=\"hljs-keyword\">return</span> rounded.<span class=\"hljs-title function_\">toString</span>();\r\n         }\r\n      \r\n         <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Получаем текущее значение температуры и шкалу\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">scale</span>;\r\n            <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">temp</span>;\r\n                        \r\n<span data-reference=\"Вычисляем актуальные значения температуры в разных шкалах\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> celsius = scale === <span class=\"hljs-string\">&#x27;c&#x27;</span> ? temp : <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">convert</span>(temp, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">toCelsius</span>);\r\n            <span class=\"hljs-keyword\">const</span> fahrenheit = scale === <span class=\"hljs-string\">&#x27;f&#x27;</span> ? <span class=\"hljs-attr\">temp</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">convert</span>(temp, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">toFahrenheit</span>);\r\n            \r\n            <span class=\"hljs-keyword\">return</span> (\r\n               <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Передаем компонентам тип шкалы, расчитанную температуру для отображения и функцию, для передачи вводимого значения в родительский компонент\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TemperatureInput</span> <span class=\"hljs-attr\">scale</span>=<span class=\"hljs-string\">&quot;c&quot;</span> <span class=\"hljs-attr\">temp</span>=<span class=\"hljs-string\">{celsius}</span> <span class=\"hljs-attr\">handler</span>=<span class=\"hljs-string\">{this.celsiusChange}</span> /&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TemperatureInput</span> <span class=\"hljs-attr\">scale</span>=<span class=\"hljs-string\">&quot;f&quot;</span> <span class=\"hljs-attr\">temp</span>=<span class=\"hljs-string\">{fahrenheit}</span> <span class=\"hljs-attr\">handler</span>=<span class=\"hljs-string\">{this.fahrenheitChange}</span> /&gt;</span>\r\n<span data-reference=\"Для ввывода вердикта передаем температуру, преобразовав ее в цифру\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BoilingVerdict</span> <span class=\"hljs-attr\">temp</span>=<span class=\"hljs-string\">{parseFloat(celsius)}</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n            );\r\n         }\r\n      }\r\n</code></pre>",
         "title": "Подьем состояния"
      },
      "1-a11ty": {
         "data": "<h2 class=\"conspect__header\">\r\n   Доступность контента\r\n   <a href=\"https://ru.reactjs.org/docs/accessibility.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Чеклисты для проверки доступности</h3>\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      <a href=\"https://www.wuhcag.com/wcag-checklist/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Чеклист WCAG\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://www.a11yproject.com/checklist/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Чеклист A11Y Project\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Свод правил WAI-ARIA\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://webaim.org/resources/contrastchecker/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Проверка яркости шрифта\r\n      </a>\r\n   </li>\r\n</ul>",
         "title": "Доступность контента"
      },
      "2-context": {
         "data": "<h2 class=\"conspect__header\">\r\n   Контекст\r\n   <a href=\"https://ru.reactjs.org/docs/context.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Использование</h3>\r\n<pre><code>\r\n<span data-reference=\"Создаем контекст ThemeContext значением 'dark' по умолчанию\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createContext</span>(<span class=\"hljs-string\">&#x27;dark&#x27;</span>);\r\n<span data-reference=\"Контексту можно задать имя, React DevTools использует это свойство при отображении контекста.\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title class_\">ThemeContext</span>.<span class=\"hljs-property\">displayName</span> = <span class=\"hljs-string\">&#x27;JustName&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Context</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Компонент Provider принимает проп value, и передает его значение вниз по дереву. Один Provider может быть связан с несколькими компонентами, использующими контекст. Так же компоненты Provider могут быть вложены друг в друга, переопределяя значение контекста глубже в дереве. Если передать undefined как value Provider, компоненты, использующие этот контекст, не будут использовать defaultValue\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;contrast&quot;</span>&gt;</span>\r\n<span data-reference=\"Если Toolbar не оборачивать в ThemeContext.Provider, будет использовано значение по умолчанию 'dark'. \" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toolbar</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n\r\n<span data-reference=\"Компонент находящийся в середине дерева не должен передавать значение темы ниже\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Toolbar</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Функциональный компонент\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> /&gt;</span>\r\n<span data-reference=\"Классовый компонент\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n<span data-reference=\"Использование контекста в классовом компоненте\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Button</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n\r\n<span data-reference=\"Чтобы получить значение контекста, определяем contextType, React использует значение value ближайшего вышестоящего Provider. Если Provider отсутствует - будет использовано значение по умолчанию\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">static</span> contextType = <span class=\"hljs-title class_\">ThemeContext</span>;\r\n\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Теперь контекст доступен внутри компонента как this.context. Все потребители, которые являются потомками Provider, будут повторно рендериться, как только проп value у Provider изменится\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{this.context}</span>&gt;</span>\r\n               Themed button\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n\r\n<span data-reference=\"Использование контекста в функциональном компоненте\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Text</span>(<span class=\"hljs-params\"></span>) { \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Была использована тема: \r\n<span data-reference=\"Consumer — это React-компонент, который подписывается на изменения контекста.\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Consumer</span>&gt;</span>\r\n<span data-reference=\"Функция принимает текущее значение контекста и возвращает React-компонент\" class=\"conspect__reference\">i</span>                  {value =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span> {value}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>}\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Consumer</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   У применения контекста есть минусы, он усложняет повторное использование компонентов.\r\n   Поэтому для передачи пропов в глубоко вложенные компоненты лучше использовать передачу не \r\n   пропов а передать вниз сам компонент.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Context</span>(<span class=\"hljs-params\"></span>) {   \r\n\r\n<span data-reference=\"Родительский компонент создает глубоко вложенные компоненты с использованием данных\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> themedButton = (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;contrast&quot;</span>&gt;</span>\r\n            Контрастная кнопка\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (         \r\n<span data-reference=\"И передает их вниз по дереву через пропы\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toolbar</span> <span class=\"hljs-attr\">button</span>=<span class=\"hljs-string\">{themedButton}</span> /&gt;</span></span>\r\n      );   \r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Toolbar</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Промежуточные компоненты также передают их вниз по дереву\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">button</span>=<span class=\"hljs-string\">{props.button}/</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n   \r\n<span data-reference=\"В глубоковложенном компоненте используется прямая вставка компонента, полученного из пропов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            Здесь будет кнопка:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n            {props.button}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );   \r\n   }\r\n</code></pre>",
         "title": "Контекст"
      },
      "3-fragments": {
         "data": "<h2 class=\"conspect__header\">\r\n   Фрагменты\r\n   <a href=\"https://ru.reactjs.org/docs/fragments.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Фрагменты позволяют вернуть компонентом несколько элементов\r\n   для рендера, не используя внешнюю обертку, а потому не создавая \r\n   лишних дом узлов.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n<span data-reference=\"Массив с данными для определений\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> definitionData = [\r\n      {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">dt</span>: <span class=\"hljs-string\">&#x27;Победа&#x27;</span>, <span class=\"hljs-attr\">dd</span>: <span class=\"hljs-string\">&#x27;Если проигравший улыбается, победитель теряет вкус победы&#x27;</span>},\r\n      {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">dt</span>: <span class=\"hljs-string\">&#x27;Минимализм&#x27;</span>, <span class=\"hljs-attr\">dd</span>: <span class=\"hljs-string\">&#x27;Богат тот, кто скромен в желаниях&#x27;</span>},\r\n      {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">dt</span>: <span class=\"hljs-string\">&#x27;Старость&#x27;</span>, <span class=\"hljs-attr\">dd</span>: <span class=\"hljs-string\">&#x27;Мысли о старости действительно старят&#x27;</span>}   \r\n   ]\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Definition</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span>&gt;</span>\r\n            {props.data.map(item =&gt; (\r\n<span data-reference=\"Полная запись фрагмента позволяет использовать атрибут ключа. Каждая пара тегов определения упакованы в обертку фрагмента, которая не видна при рендере.\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">React.Fragment</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item.id}</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>{item.dt}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>{item.dd}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.Fragment</span>&gt;</span>\r\n            ))}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Краткая запись фрагмента, не позволяет использовать атрибуты\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Афоризмы<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Definition</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{definitionData}</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/&gt;</span></span>      \r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> {<span class=\"hljs-title class_\">Page</span>};\r\n</code></pre>",
         "title": "Фрагменты"
      },
      "4-error-boundaries": {
         "data": "<h2 class=\"conspect__header\">\r\n   Предохранители\r\n   <a href=\"https://ru.reactjs.org/docs/error-boundaries.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Предохранители — это компоненты React, которые отлавливают ошибки JavaScript \r\n   в любом месте деревьев их <span class=\"conspect__marked-text\">дочерних компонентов</span>, \r\n   сохраняют их в журнале ошибок и выводят запасной UI вместо рухнувшего дерева компонентов.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Предохранители не поймают ошибки в:\r\n</p>\r\n<ul class=\"conspect__list\">   \r\n   <li>обработчиках событий;</li>\r\n   <li>асинхронном коде (например колбэках из setTimeout или requestAnimationFrame);</li>\r\n   <li>серверном рендеринге (Server-side rendering);</li>\r\n   <li>самом предохранителе (а не в его дочерних компонентах);</li>\r\n</ul>\r\n\r\n<h3 class=\"conspect__subheader\">Предохранитель из компонента</h3>\r\n<pre><code>\r\n<span data-reference=\"Пользовательская функция логирования обнаруженных ошибок, служит для отправки ошибок в журнал\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logError</span>(<span class=\"hljs-params\">error, errorInfo</span>) {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>, error);\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;2&#x27;</span>, errorInfo);\r\n   }\r\n\r\n<span data-reference=\"Дочерний компонент в котором возникнет ошибка\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">WrongComponent</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Just Error&#x27;</span>);\r\n   }\r\n\r\n<span data-reference=\"Компонент предохранитель для обработки ошибок, может быть только классовым\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorBoundary</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Состояние компонента, в зависимости от которого выводится разный UI\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">false</span>};\r\n      }\r\n\r\n<span data-reference=\"Встроенная статическая функция, будет вызвана при возникновении ошибок, аргумент - объект ошибки, возвращает обновленный объект состояния this.state\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromError</span>(<span class=\"hljs-params\">error</span>) {\r\n         <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">true</span>};\r\n      }\r\n\r\n<span data-reference=\"Функция также вызывается при возникновении ошибок, используется для логирования ошшибок\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">componentDidCatch</span>(<span class=\"hljs-params\">error, errorInfo</span>) {\r\n         <span class=\"hljs-title function_\">logError</span>(error, errorInfo);\r\n      }\r\n\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Если состояние компонента изменилось по причине ошибки вывести запасной UI\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">hasError</span>) {\r\n            <span class=\"hljs-keyword\">return</span> (\r\n               <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>В коде обнаружена ошибка<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n            );\r\n         }      \r\n\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>            \r\n<span data-reference=\"Компонент с ошибкой\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrongComponent</span> /&gt;</span>\r\n<span data-reference=\"Предохранитель является оберткой для дочерних компонентов\" class=\"conspect__reference\">i</span>               {this.props.children}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );         \r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Предохранители отлавливают ошибки исключительно в своих дочерних компонентах. \r\n   Предохранитель не сможет отловить ошибку внутри самого себя. Если предохранителю \r\n   не удаётся отрендерить сообщение об ошибке, то ошибка всплывает до ближайшего \r\n   предохранителя, расположенного над ним в дереве компонентов.\r\n   <span class=\"conspect__marked-text\">Чтобы отловить ошибку в обработчике событий, \r\n   пользуйтесь обычной JavaScript-конструкцией try/catch</span>\r\n</p>",
         "title": "Предохранители"
      },
      "5-HOC": {
         "data": "<h2 class=\"conspect__header\">\r\n   Компоненты высшего порядка\r\n   <a href=\"https://ru.reactjs.org/docs/higher-order-components.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Компонент высшего порядка — это функция, которая \r\n   принимает компонент и возвращает новый компонент.\r\n   Обычный компонент преобразует пропсы в UI, компонент \r\n   высшего порядка преобразует компонент в другой компонент.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонет потребитель данных, рендерит данные из поставщика данных.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CommentsListLight</span>(<span class=\"hljs-params\">props</span>) {       \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Компонент использующий данные из props для своего рендера\" class=\"conspect__reference\">i</span>            {props.data.map(comment =&gt;\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;comment&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{comment.id}</span>&gt;</span>\r\n                  {comment.text}\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>   \r\n            )}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент высшего порядка, принимает компонент использующий \r\n   данные, возвращает компонент с функциональностью привязки к данным\r\n   из поставщика данных, изменение данных в поставщике вызывает повторный рендер компонента.\r\n   Рендерит переданный ему компонент и прозрачно передает ему пропсы.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n<span data-reference=\"Объект поставляющий данные для рендеринга\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DataSource</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./DataSource&quot;</span>;\r\n\r\n<span data-reference=\"Компонент высшего порядка, принимает компонент для рендеринга, и функцию, извлекающую данные из поставщика данных. Оборачивает оригинальный компонент в контейнер посредством композиции.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">subscribeComponent</span>(<span class=\"hljs-params\">Component, getDataFunc</span>) {\r\n<span data-reference=\"Возвращает переданный компонент обернутый в новый компонент, обладающий необходимой функциональностью.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">extends</span> <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Component</span> {\r\n         <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n            <span class=\"hljs-variable language_\">super</span>(props);\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {\r\n<span data-reference=\"Получить начальные данные из поставщика\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title function_\">getDataFunc</span>(<span class=\"hljs-title class_\">DataSource</span>)\r\n            }\r\n         }\r\n\r\n<span data-reference=\"Функция обновления состояния компонента, передается поставщику данных, который вызывает ее при изменении данных\" class=\"conspect__reference\">i</span>         onDataChange = <span class=\"hljs-function\">() =&gt;</span> {\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({\r\n               <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title function_\">getDataFunc</span>(<span class=\"hljs-title class_\">DataSource</span>)\r\n            })\r\n         }\r\n\r\n         <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Привязать функцию обновления компонента к поставщику данных при монтировании компонента\" class=\"conspect__reference\">i</span>            <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-title function_\">addChangeListener</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onDataChange</span>);\r\n         }\r\n         <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Отвязать функцию обновления компонента к поставщику данных при размонтировании компонента\" class=\"conspect__reference\">i</span>            <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-title function_\">removeChangeListener</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onDataChange</span>);\r\n         }\r\n\r\n         <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n            <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Отрендерить оригинальный компонент используя данные из состояния и прозрачно передать пропсы\" class=\"conspect__reference\">i</span>               <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{this.state.data}</span> {<span class=\"hljs-attr\">...this.props</span>} /&gt;</span></span>\r\n            );\r\n         }\r\n      };\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> subscribeComponent;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Создать новый компонент с подпиской к поставщику данных,\r\n   который будет рендерить оригинальный компонент и актуальными данными\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CommentsListLightSubscribed</span> = <span class=\"hljs-title function_\">subscribeComponent</span>(\r\n<span data-reference=\"Оригинальный компонент, потребляющий данные для рендеринга\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title class_\">CommentsListLight</span>,\r\n<span data-reference=\"Функция-колбэк извлекающая данные из поставщика данных\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\"><span class=\"hljs-params\">DataSource</span> =&gt;</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-title function_\">getComments</span>()\r\n   );\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Особенности применения:\r\n</p>\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Не применяйте HOC в определении другого компонента в рендкр методе. \r\n      Сначала нужно отдельно получить компонент из HOC, и только \r\n      потом использовать его. Иначе происходит повторный реднеринг всего дерева.\r\n   </li>\r\n   <li>\r\n      При применении HOC, мы заворачиваем оригинальный компонент в контейнер. \r\n      Поэтому у нового компонента не будет статических методов оригинального компонента.\r\n      Необходимо скопировать недостающие статические методы в контейнер.\r\n   </li>\r\n   <li>\r\n      Реф элемента, созданного компонентом из HOC, будет указывать на экземпляр \r\n      ближайшего в иерархии контейнера, а не на оборачиваемый компонент.\r\n   </li>\r\n</ol>",
         "title": "Компоненты высшего порядка"
      },
      "6-forwarding-refs": {
         "data": "<h2 class=\"conspect__header\">\r\n   Перенаправление рефов\r\n   <a href=\"https://ru.reactjs.org/docs/forwarding-refs.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Перенаправление рефов позволяет создать реф в родительском\r\n   компоненте и приявзать его к элементу одного из дочерних компонентов\r\n   передавая реф через проп ref дочернего компонента\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Дочерний компонент</h3>\r\n<p class=\"conspect__text\">\r\n   Дочерний компонент, к элементу которого нужно привязать\r\n   реф, который будет создан в родительском компоненте.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n<span data-reference=\"Компонент создается встроенной функцией forwardRef, которая принимает функцию рендера в качестве аргумента.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">InputField</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">forwardRef</span>(\r\n<span data-reference=\"Функция рендера получает ref, передаваемый компоненту в качестве атрибута, и возвращает готовый рендер компонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">(<span class=\"hljs-params\">props, ref</span>) =&gt;</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n            <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Form__input&quot;</span> \r\n            <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\r\n<span data-reference=\"Привязка рефа к конкретному DOM элементу\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span>\r\n         /&gt;</span></span>\r\n      )\r\n   );\r\n\r\n   <span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">InputField</span> };\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Родительский компонент</h3>\r\n<p class=\"conspect__text\">\r\n   В родительском компоненте будет создан реф, который будет \r\n   привязан к элементу дочернего компонента.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">InputField</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./InputField&quot;</span>;\r\n\r\n<span data-reference=\"Родительский компонент управляющий DOM элементом дочернего компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Form</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Создание рефа и сохранение ссылки на него в родительском компоненте\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">inputRef</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();\r\n      }\r\n\r\n      <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {                           \r\n<span data-reference=\"Управление фокусом DOM элемента дочернего компонента, при монтировании родительского компонента через реф\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">inputRef</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">focus</span>();\r\n      }\r\n\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Form&quot;</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Form__legend&quot;</span>&gt;</span>\r\n                     Your data:\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span>\r\n<span data-reference=\"Передача рефа в через атрибут ref в дочерний компонент\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">InputField</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.inputRef}</span> /&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Send&quot;</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n         )\r\n      }\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Form</span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Перенаправление рефов в компонентах высшего порядка\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Создаем компонент высшего порядка:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n<span data-reference=\"Функция высшего порядка получает аргументом компонент, пропы которого нужно логировать\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">logProps</span>(<span class=\"hljs-params\">Component</span>) {\r\n\r\n<span data-reference=\"Определяем класс компонента-обертки содержащего необходимую функциональность\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LogProps</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n<span data-reference=\"При монтировании компонента логируем объект пропов\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\r\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Current props: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>);\r\n         }\r\n\r\n         <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Создаем переменную с рефом, полученным от родительского компонента, прочие пропсы сохраняем в объекте otherProps\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> {forwardedRef, ...otherProps} = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>;\r\n\r\n            <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Рендерим компонент переданный в функцию высшего порядка\" class=\"conspect__reference\">i</span>               <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span>\r\n<span data-reference=\"Передаем реф полученный от родительского компонента\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{forwardedRef}</span>\r\n<span data-reference=\"Передаем остальные пропсы, полученные от родительского компонента\" class=\"conspect__reference\">i</span>                  {<span class=\"hljs-attr\">...otherProps</span>}\r\n               /&gt;</span></span>\r\n            );\r\n         }\r\n      }\r\n\r\n<span data-reference=\"Для возможности перехвата рефа, переданного родительским компонентом, создаем возвращаемый компонент встроенной функцией forwardRef\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">forwardRef</span>(\r\n<span data-reference=\"В аргументе props - переданные пропсы, в ref - переданный родительским элементом реф\" class=\"conspect__reference\">i</span>         <span class=\"hljs-function\">(<span class=\"hljs-params\">props, ref</span>) =&gt;</span> (\r\n<span data-reference=\"Рендерим определенный выше компонент LogProps\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LogProps</span>\r\n<span data-reference=\"Передаем ему полученный от родителя реф\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">forwardedRef</span>=<span class=\"hljs-string\">{ref}</span>\r\n<span data-reference=\"Передаем прочие переданные родителем пропсы\" class=\"conspect__reference\">i</span>               {<span class=\"hljs-attr\">...props</span>}\r\n            /&gt;</span></span>\r\n         )\r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> logProps; \r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Далее логируем компонент InputField и используем\r\n   его в компоненте Form аналогичным образом\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LoggedInputField</span> = <span class=\"hljs-title function_\">logProps</span>(<span class=\"hljs-title class_\">InputField</span>);\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Корректное имя компонента</h3>\r\n<p class=\"conspect__text\">\r\n   Если при создании компонента через React.forwardRef() была\r\n   использована анонимная функция то название полученного компонента в \r\n   инструментах разработки - Anonymous, чтобы функция имела название - \r\n   нужно передавать именованную функцию.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">InputField</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">forwardRef</span>(\r\n<span data-reference=\"В этом случае название компонента будет - InputField\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">InputField</span>(<span class=\"hljs-params\">props, ref</span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n               <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Form__input&quot;</span> \r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\r\n               <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span>\r\n            /&gt;</span></span>\r\n         );\r\n      }   \r\n   );\r\n</code></pre>",
         "title": "Перенаправление рефов"
      },
      "7-portals": {
         "data": "<h2 class=\"conspect__header\">\r\n   Порталы\r\n   <a href=\"https://ru.reactjs.org/docs/portals.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Порталы позволяют рендерить дочерние элементы в DOM-узел, \r\n   который находится вне DOM-иерархии родительского компонента.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Создаем компонент использующий портал, html документ\r\n   имеет 2 корневых узла, root - для рендера приложения\r\n   и modal-root для рендера модальных окон.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>DOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-dom&quot;</span>;\r\n\r\n<span data-reference=\"Портал будет отренерен в элементе div#modal-root\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> modalRoot = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;modal-root&#x27;</span>);\r\n\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Modal</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Портал будет создан в неприсоедиенном DOM элементе div\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modalContainer</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>);\r\n      }\r\n\r\n<span data-reference=\"При монтировании компонента Modal присоединяем DOM элемент к DOM дереву\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) {\r\n         modalRoot.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modalContainer</span>);\r\n      }\r\n\r\n<span data-reference=\"При размонтировании компонента Modal отсоединяем DOM элемент от DOM дерева\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) {\r\n         modalRoot.<span class=\"hljs-title function_\">removeChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modalContainer</span>);\r\n      }\r\n\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Функция для создания портала\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">createPortal</span>(\r\n<span data-reference=\"Первый аргумент - дочерние компоненты Modal, которые будут рендерится в портале\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">children</span>,\r\n<span data-reference=\"Второй аргумент - DOM элемнт, в котором будет создан портал\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">modalContainer</span>\r\n         );\r\n      }\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Modal</span>;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Дочерний элемент модального окна\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;Child&quot;</span>&gt;</span>\r\n<span data-reference=\"Рендерим кнопку, не привязывая к ней никакой функции обработки кликов\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>\r\n               Click Me!\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Родительский компонент, содержащий модальное окно\r\n</p>\r\n<p class=\"conspect__text\">\r\n   class Parent extends React.Component {                      @^Родительский компонент считает количество кликов сделанное на нем (и соответственно на вложенных дочерних компонентах)^@\r\n      constructor(props) {\r\n         super(props);\r\n         this.state = {clicks: 0};                             @^В состоянии хроним количество сделанных кликов^@\r\n      }\r\n   \r\n      onClick = () => {                                        @^Функция обновляющая состояние при клике на компоненте и его потомках^@\r\n         this.setState(state => ({\r\n            clicks: state.clicks + 1\r\n         }));\r\n      }\r\n   \r\n      render() {\r\n         return (\r\n            <div onClick={this.onClick} className=\"Parent\">    @^Общий контейнер, обрабатывающий клики^@\r\n               <p class=\"conspect__text\">Сделано кликов: {this.state.clicks}</p>\r\n               <p class=\"conspect__text\">\r\n                  Несмотря на структуру в React, в DOM\r\n                  кнопка не является потомком блока div\r\n                  c обработчиком onClick.\r\n               </p>\r\n               <Modal>                                         @^Вложенный компонент Modal^@\r\n                  <Child />                                    @^Вложенный компонент Child^@\r\n               </Modal>\r\n            </div>\r\n         );\r\n      }\r\n   }\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Итоговая структура React дерева:</h3>\r\n<pre><code>\r\n   &lt;<span class=\"hljs-title class_\">Parent</span>&gt;\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> /&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span></span>\r\n   &lt;/<span class=\"hljs-title class_\">Parent</span>&gt;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Итоговая структура DOM дерева</h3>\r\n<pre><code>\r\n   &lt;div id=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Parent</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Parent</span>&gt;</span></span>\r\n   &lt;/div&gt;\r\n   <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;modal-root&quot;</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> /&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\r\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Несмотря на то, что благодаря использованию порталов,\r\n   Modal и Parent находятся в соседних DOM узлах, клик на кнопке\r\n   из Child вызывает срабатывание обработчика из Parent.\r\n   Событие клика, всплывает не по DOM дереву а по React дереву, \r\n   где Modal и Child вложены в Parent.\r\n</p>",
         "title": "Порталы"
      },
      "8-render-props": {
         "data": "<h2 class=\"conspect__header\">\r\n   Рендер-пропсы\r\n   <a href=\"https://ru.reactjs.org/docs/render-props.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Термин «рендер-проп» относится к возможности компонентов \r\n   React разделять код между собой с помощью пропа, значение \r\n   которого является функцией. Таким образом можно создать компонент\r\n   реализующий определенную функциональность и использовать его \r\n   многократно.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Компонент бегающий по экрану за мышкой, в качестве пропов\r\n   принимает объект position с текущими координатами курсора.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Сохраняем ссылку на объект с координатами мыши из пропсов\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">position</span>;\r\n   \r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\r\n                  <span class=\"hljs-attr\">position:</span> &#x27;<span class=\"hljs-attr\">fixed</span>&#x27;,\r\n<span data-reference=\"Устанавливаем координату x с учетом сдвига картинки\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">left:</span> <span class=\"hljs-attr\">position.x</span> <span class=\"hljs-attr\">-</span> <span class=\"hljs-attr\">150</span>,\r\n<span data-reference=\"Устанавливаем координату y с учетом сдвига картинки\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">top:</span> <span class=\"hljs-attr\">position.y</span> <span class=\"hljs-attr\">-</span> <span class=\"hljs-attr\">100</span>\r\n               }}\r\n               <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./cat.gif&quot;</span>\r\n               <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>\r\n            /&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент реализующий функциональность отслеживания\r\n   позиции курсора, передает координаты дочерним компонентам.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MousePositionRP</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Текущие координаты мыши хронятся в состоянии компонента\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {\r\n            <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>,\r\n            <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>\r\n         };\r\n      }\r\n   \r\n<span data-reference=\"При движении мыши по компоненту, запускается функция меняющая состояние\" class=\"conspect__reference\">i</span>      onMouseMove = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>({\r\n            <span class=\"hljs-attr\">x</span>: event.<span class=\"hljs-property\">clientX</span>,\r\n            <span class=\"hljs-attr\">y</span>: event.<span class=\"hljs-property\">clientY</span>\r\n         });\r\n      };\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> \r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{minHeight:</span> &#x27;<span class=\"hljs-attr\">100vh</span>&#x27;, <span class=\"hljs-attr\">overflow:</span> &#x27;<span class=\"hljs-attr\">auto</span>&#x27;}}\r\n<span data-reference=\"Привязываем функцию изменяющую координаты мишы в состоянгии к элементу div\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onMouseMove</span>=<span class=\"hljs-string\">{this.onMouseMove}</span>\r\n            &gt;</span>\r\n<span data-reference=\"РЕНДЕР-ПРОП, возьмет функцию из атрибута render компонента MousePositionRP, передаст ей в качестве аргумента this.state и отрендерит возвращенный ею компонент внутри MousePositionRP\" class=\"conspect__reference\">i</span>               {this.props.render(this.state)}\r\n               {this.props.children}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Реализация компонента MousePositionRP и Cat\r\n   внутри компонента, совмещающего их.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MouseTrackerRP</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MousePositionRP</span> \r\n<span data-reference=\"В атрибуте render передаем функцию, которая отрендерит возвращаемый ею компонент используя аргумент position, переданный из MousePositionRP, реализующий функциональность отслеживания положения мыши\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">render</span>=<span class=\"hljs-string\">{</span>\r\n                  <span class=\"hljs-attr\">position</span> =&gt;</span> (\r\n                     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Cat</span> <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{position}</span> /&gt;</span>\r\n               )}\r\n            &gt;\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Двигайте мышью!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">MousePositionRP</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>",
         "title": "Рендер-пропсы"
      },
      "9-refs": {
         "data": "<h2 class=\"conspect__header\">\r\n   Рефы и DOM\r\n   <a href=\"https://ru.reactjs.org/docs/refs-and-the-dom.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Рефы позволяют императивно изменить дочерний элемент, без его повторного рендера \r\n   с новыми пропсами. Подлежащий изменениям дочерний элемент может быть как \r\n   React-компонентом, так и DOM-элементом.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Избегайте использования рефов в ситуациях, когда задачу можно решить декларативным способом.\r\n   Ситуации, в которых использование рефов является оправданным:\r\n</p>\r\n<ul class=\"conspect__list\">\r\n   <li>Управление фокусом, выделение текста или воспроизведение медиа</li>\r\n   <li>Императивный вызов анимаций</li>\r\n   <li>Интеграция со сторонними DOM-библиотеками</li>\r\n</ul>\r\n\r\n<pre><code>\r\n<span data-reference=\"Компонент использующий рефы, должен быть классовым\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Создание рефа для HTML элемента\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myElementRef</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();\r\n<span data-reference=\"Создание рефа для классового компонента\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myComponentRef</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();\r\n      }\r\n   \r\n<span data-reference=\"Внутри методов компонента теперь можно использовать рефы\" class=\"conspect__reference\">i</span>      showRefs = <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Если ref используется с HTML-элементом, свойство current рефа получает соответствующий DOM-элемент\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myElementRef</span>.<span class=\"hljs-property\">current</span>);\r\n<span data-reference=\"Если ref используется с классовым компонентом, свойство current рефа получает объект смонтированного компонента, методы которого можно использовать\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">myComponentRef</span>.<span class=\"hljs-property\">current</span>);\r\n      };\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.showRefs}</span>&gt;</span>\r\n<span data-reference=\"Связываем реф с HTML элементом с помощъю атрибута ref\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.myElementRef}</span>&gt;</span>Element<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n<span data-reference=\"Связываем реф с компонентом с помощъю атрибута ref\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ClassComponent</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.myComponentRef}</span> /&gt;</span>            \r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n   \r\n<span data-reference=\"Ссылка myComponentRef.current будет указывать на экземпляр данного объекта\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>ClassComponent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n         )\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   React присвоит DOM-элемент свойству current при монтировании компонента \r\n   и присвоит обратно значение null при размонтировании. Обновление свойства ref \r\n   происходит перед вызовом методов componentDidMount и componentDidUpdate.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Функциональные компоненты</h3>\r\n<p class=\"conspect__text\">\r\n   Можно использовать атрибут ref внутри функционального компонента\r\n   используя хуки при условии, что он ссылается на DOM-элемент или \r\n   классовый компонент. Нельзя использовать ref атрибут с функциональными \r\n   компонентами, потому что для них не создаётся экземпляров.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Колбэк-рефы</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CallbackRef</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n\r\n<span data-reference=\"Функция коллбэк, передаваемая атрибуту ref, element - элемент или компонент на который ссылается реф, аналог ref.current при монтировании компонента, а при размонтировании - null\" class=\"conspect__reference\">i</span>      setTextInputRef = <span class=\"hljs-function\">(<span class=\"hljs-params\">element</span>) =&gt;</span> {\r\n<span data-reference=\"Фиксируем ссылку рефа в экземпляре класса, рефы будут хранить актуальное значение перед вызовом методов componentDidMount или componentDidUpdate\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">textInput</span> = element;\r\n<span data-reference=\"Производим еще какие либо действия\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(element);\r\n      };\r\n   \r\n      focusOnInput = <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">textInput</span>) {\r\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">textInput</span>.<span class=\"hljs-title function_\">focus</span>();\r\n         }\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n                  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\r\n<span data-reference=\"Передаем в атрибут ref коллбэк функцию\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.setTextInputRef}</span>\r\n                  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Text&quot;</span>\r\n               /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n                  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span>\r\n                  <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.focusOnInput}</span>\r\n                  <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Focus on Input&quot;</span>\r\n               /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Функция колбэк может быть передана через пропсы из родительского компонента\r\n   дочернему, где она может быть использована как реф с this из радительского компонента, \r\n   таким образом, родительский компонент может получить доступ к элементам дочернего компонента\r\n</p>\r\n\r\n",
         "title": "Рефы и DOM"
      },
      "10-code-splitting": {
         "data": "<h2 class=\"conspect__header\">\r\n   Разделение кода\r\n   <a href=\"https://ru.reactjs.org/docs/code-splitting.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Динамические импорты</h3>\r\n<p class=\"conspect__text\">\r\n   Модуль с функциями вычисления:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">number</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Вычисленное значение <span class=\"hljs-subst\">${number * <span class=\"hljs-number\">10</span>}</span>`</span>;\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">export</span> { multiply };\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Модуль использующий функции вычисления:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"import возвращает промис, который будет выполнен после загрузки модуля\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&quot;./calculate&quot;</span>)\r\n<span data-reference=\"Первый аргумент - объект модуля, содержащий как свойства, все экспортированные значения\" class=\"conspect__reference\">i</span>      .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">calculate</span> =&gt;</span> {\r\n<span data-reference=\"Использование экспортированной функции multiply\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(calculate.<span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-number\">154</span>));\r\n      })\r\n<span data-reference=\"Обработка ошибок, которые могут возникнуть при загрузке модуля или использовании его экспортов\" class=\"conspect__reference\">i</span>      .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error));\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">React.lazy</h3>\r\n<p class=\"conspect__text\">\r\n   Для ленивой загрузки компонентов используется React.lazy.\r\n   React.lazy используется только на стороне клиента, при\r\n   серверном рендеринге можно использовать Loadable Components:\r\n</p>\r\n<a href=\"https://github.com/gregberge/loadable-components\" class=\"conspect__outside-link\" target=\"_blank\">\r\n   Loadable Components, библиотека;\r\n</a><br />\r\n<a href=\"https://loadable-components.com/docs/server-side-rendering/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n   Xорошее руководство по разделению бандла с серверным рендерингом\r\n</a>\r\n\r\n<p class=\"conspect__text\">\r\n   При использовании ленивой загрузки компонентов\r\n   код должен иметь следующие элементы:\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Предохранитель, рендерится если при загрузке компонента \r\n   произошла какая либо ошибка:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Boundary</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n<span data-reference=\"Начальное состояние - отсутствие ошибки\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = {<span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">false</span>};\r\n      }\r\n   \r\n<span data-reference=\"Функция будет вызвана при возникновении ошибки, и обновит состояние компонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromError</span>(<span class=\"hljs-params\">error</span>) {\r\n         <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">true</span>};\r\n      }\r\n   \r\n<span data-reference=\"Функция логирования, при возникновении ошибки выведет сообщение в консоль\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">componentDidCatch</span>(<span class=\"hljs-params\">error, errorInfo</span>) {\r\n         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(errorInfo);\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Если состояние содержит ошибку, рендерим сообщение\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">error</span>) <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Что то пошло не так...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n         );\r\n   \r\n<span data-reference=\"Иначе, рендерим дочерние компоненты\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">children</span>;\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Задержка, рендерится пока приложение загружает компонент:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Задержка представляет собой обычный компонент или элемент\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Loading</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Подождите, идет загрузка...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент использующий ленивую загрузку\r\n   дочерних компонентов:\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Импорт React и Suspense\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, {<span class=\"hljs-title class_\">Suspense</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Loading</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Loading&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Boundary</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Boundary&quot;</span>;\r\n\r\n<span data-reference=\"React.lazy принимает функцию, которая должна вернуть промис динамического import'a компонента. Возвращает импортированный компонент.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Hello</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">lazy</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&quot;./Hello&quot;</span>));\r\n<span data-reference=\"Импорт еще одного компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Message</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">lazy</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&quot;./Message&quot;</span>));\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Greeting</span>(<span class=\"hljs-params\">props</span>) {   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Весь код обернут в предохранитель, перехватывающий ошибки\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Boundary</span>&gt;</span>\r\n<span data-reference=\"Компоненту задержки через проп fallback передается компонент для рендера во время задержи при загрузке компонентов.\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Loading</span> /&gt;</span>}&gt;            \r\n<span data-reference=\"Дочерние компоненты, загружаемые с использованием ленивой загрузки\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Hello</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Джон Смит&quot;</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Message</span> /&gt;</span>            \r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Suspense</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Boundary</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Greeting</span>;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Важные моменты:\r\n</p>\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Компонент Suspense можно разместить в любом месте над \r\n      ленивым компонентом. Кроме того, можно обернуть несколько \r\n      ленивых компонентов одним компонентом Suspense.\r\n   </li>\r\n   <li>\r\n      Предохранитель можно использовать в любом месте над \r\n      ленивыми компонентами для отображения состояния ошибки.\r\n   </li>\r\n   <li>\r\n      React.lazy в настоящее время поддерживает только экспорт по умолчанию. \r\n      Если модуль, который требуется импортировать, использует именованный экспорт, \r\n      можно создать промежуточный модуль, и использовать реэкспорт по умолчанию.\r\n   </li>\r\n</ul>\r\n\r\n<a href=\"https://ru.reactjs.org/docs/code-splitting.html#route-based-code-splitting\" class=\"conspect__outside-link\" target=\"_blank\">\r\n   Разделение кода на основе маршрутов\r\n</a>",
         "title": "Разделение кода"
      },
      "11-optimizing-performance": {
         "data": "<h2 class=\"conspect__header\">\r\n   Оптимизация производительности\r\n   <a href=\"https://ru.reactjs.org/docs/optimizing-performance.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n<h3 class=\"conspect__subheader\">Полезные ссылки:</h3>\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      <a href=\"https://ru.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Введение в React Profiler\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://react-window.vercel.app/#/examples/list/fixed-size\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Визуализация длинных списков React-Window\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://bvaughn.github.io/react-virtualized/#/components/List\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Визуализация длинных списков React-Virtualized\r\n      </a>\r\n   </li>\r\n   <li></li>\r\n   <li></li>\r\n</ul>\r\n\r\n<h3 class=\"conspect__subheader\">Запрет повторного рендеринга.</h3>\r\n<p class=\"conspect__text\">\r\n   Если существуют ситуации, в которых ваш компонент не нуждается в \r\n   обновлении, вы можете вернуть false из shouldComponentUpdate, \r\n   чтобы пропустить весь процесс рендеринга, включая вызов render() и \r\n   так далее ниже по иерархии.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> ={\r\n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\r\n         };\r\n      }\r\n   \r\n      onClick = <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(\r\n            <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> ({<span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>})\r\n         );\r\n      }\r\n   \r\n<span data-reference=\"Встроенная функция, определяющая, должен ли компонент повторно рендерится при изменении пропсов и состояния\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\">nextProps, nextState</span>) {\r\n<span data-reference=\"Если новое свойство color не равно предыдущему\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">color</span> !== nextProps.<span class=\"hljs-property\">color</span>) {\r\n<span data-reference=\"Возвращаем true - компонент рендерится повторно\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n         }\r\n<span data-reference=\"Если свойство count не равно предыдущему\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> !== nextState.<span class=\"hljs-property\">count</span>) {\r\n<span data-reference=\"Возвращаем true - компонент рендерится повторно\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n         }\r\n<span data-reference=\"В остальных случаях возвращаем false повторного рендера не происходит.\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>             \r\n               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick}</span>\r\n               <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{color:</span> <span class=\"hljs-attr\">this.props.color</span>}}\r\n            &gt;</span>\r\n               Нажатий: {this.state.count}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n         )\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   При наследовании от PureComponent показанное выше поведение\r\n   реализовано по умолчанию, поэтому нет необходимости описывать\r\n   функцию shouldComponentUpdate. Но проводится только поверхностное сравнение, \r\n   что может стать проблемой для более сложных структур данных типа списков,\r\n   которые <span class=\"conspect__marked-text\">сравниваются по ссылке</span>. \r\n</p>\r\n",
         "title": "Оптимизация производительности"
      },
      "12-profiler": {
         "data": "<h2 class=\"conspect__header\">\r\n   Компонент Profiler\r\n   <a href=\"https://ru.reactjs.org/docs/profiler.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n<p class=\"conspect__text\">\r\n   Компонент Profiler используется для оптимизации компонентов\r\n   путем логирования основных параметров рендера, которые\r\n   можно потом проанализировать.\r\n</p>\r\n<h3 class=\"conspect__subheader\">Функция логирования:</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">profilerLogging</span>(<span class=\"hljs-params\">\r\n<span data-reference=\"id: string — Атрибут id из компонента Profiler, для которого было зафиксировано изменение.\" class=\"conspect__reference\">i</span>      id,\r\n<span data-reference=\"phase: \"mount\" или \"update\" — Показывает, было ли дерево только что смонтировано в первый раз или повторно отрендерено в результате изменения пропсов, состояния или хуков.\" class=\"conspect__reference\">i</span>      phase,\r\n<span data-reference=\"actualDuration: number — Время, затраченное на рендеринг компонента Profiler и его дочерних компонентов для текущего обновления. Значение должно снизиться после монтирования,\" class=\"conspect__reference\">i</span>      actualDuration,\r\n<span data-reference=\"baseDuration: number — Длительность самого последнего рендеринга для каждого отдельного компонента внутри дерева компонента Profiler.\" class=\"conspect__reference\">i</span>      baseDuration,\r\n<span data-reference=\"startTime: number — Временная метка, когда React начал рендерить текущее обновление.\" class=\"conspect__reference\">i</span>      startTime,\r\n<span data-reference=\"commitTime: number — Временная метка, когда React зафиксировал текущее обновление.\" class=\"conspect__reference\">i</span>      commitTime,\r\n<span data-reference=\"interactions: Set — Множество \"взаимодействий\", которые были зафиксированы во время подготовки изменения (например, когда render или setState были вызваны).\" class=\"conspect__reference\">i</span>      interactions\r\n   </span>) {\r\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\r\n         <span class=\"hljs-string\">`id: <span class=\"hljs-subst\">${id}</span>\r\n         phase: <span class=\"hljs-subst\">${phase}</span>\r\n         actualDuration: <span class=\"hljs-subst\">${actualDuration}</span>\r\n         baseDuration: <span class=\"hljs-subst\">${baseDuration}</span>\r\n         startTime: <span class=\"hljs-subst\">${startTime}</span>\r\n         commitTime: <span class=\"hljs-subst\">${commitTime}</span>\r\n         interactions: <span class=\"hljs-subst\">${interactions}</span>`</span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Компонент Profiler</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт компонента Profiler\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Profiler</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n<span data-reference=\"Импорт логирующей функции\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> profilerLogging <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./profilerLogging&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.PureComponent</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> ={\r\n            <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\r\n         };\r\n      }\r\n\r\n      onClick = <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(\r\n            <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> ({<span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>})\r\n         );\r\n      }\r\n\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Вставка компонента Profiler\" class=\"conspect__reference\">i</span>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Profiler</span>\r\n<span data-reference=\"ID компонента Profiler\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;Button&quot;</span>\r\n<span data-reference=\"Подключение логирующей функции\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onRender</span>=<span class=\"hljs-string\">{profilerLogging}</span>\r\n            &gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>             \r\n                  <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick}</span>\r\n                  <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{color:</span> <span class=\"hljs-attr\">this.props.color</span>}}\r\n               &gt;</span>\r\n                  Нажатий: {this.state.count}\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Profiler</span>&gt;</span></span>\r\n         )\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Результат:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Button</span>\r\n      <span class=\"hljs-attr\">phase</span>: mount\r\n      <span class=\"hljs-attr\">actualDuration</span>: <span class=\"hljs-number\">2.1000001430511475</span>\r\n      <span class=\"hljs-attr\">baseDuration</span>: <span class=\"hljs-number\">0.39999985694885254</span>\r\n      <span class=\"hljs-attr\">startTime</span>: <span class=\"hljs-number\">132.79999995231628</span>\r\n      <span class=\"hljs-attr\">commitTime</span>: <span class=\"hljs-number\">136.09999990463257</span>\r\n      <span class=\"hljs-attr\">interactions</span>: [object <span class=\"hljs-title class_\">Set</span>]\r\n   <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Button</span>\r\n      <span class=\"hljs-attr\">phase</span>: update\r\n      <span class=\"hljs-attr\">actualDuration</span>: <span class=\"hljs-number\">1.3999998569488525</span>\r\n      <span class=\"hljs-attr\">baseDuration</span>: <span class=\"hljs-number\">0.4999997615814209</span>\r\n      <span class=\"hljs-attr\">startTime</span>: <span class=\"hljs-number\">879794.2999999523</span>\r\n      <span class=\"hljs-attr\">commitTime</span>: <span class=\"hljs-number\">879796.5</span>\r\n      <span class=\"hljs-attr\">interactions</span>: [object <span class=\"hljs-title class_\">Set</span>]\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент Profiler следует использовать только при необходимости, \r\n   его использование увеличивает нагрузку на CPU и память. Для замера разных \r\n   частей приложения могут быть использованы несколько компонентов Profiler.\r\n   Также Profiler может быть вложенным с целью замера разных \r\n   компонентов внутри поддерева.\r\n</p>",
         "title": "Компонент Profiler"
      },
      "13-reconciliation": {
         "data": "<h2 class=\"conspect__header\">\r\n   Согласование\r\n   <a href=\"https://ru.reactjs.org/docs/reconciliation.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">Алгоритм сравнения React</h3>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         Элементы различных типов:\r\n      </p>\r\n      <p class=\"conspect__text\">\r\n         Всякий раз, когда корневые элементы имеют различные типы, React \r\n         уничтожает старое дерево и строит новое с нуля. Переходы от &lt;a&gt; \r\n         к &lt;img&gt;, или от &lt;Article&gt; к &lt;Comment&gt;, или от &lt;Button&gt; к &lt;div&gt; \r\n         приведут к полному перестроению.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         DOM-элементы одного типа:\r\n      </p>\r\n      <p class=\"conspect__text\">\r\n         При сравнении двух React DOM-элементов одного типа, React смотрит на атрибуты обоих, \r\n         сохраняет лежащий в основе этих элементов DOM-узел и обновляет только изменённые атрибуты.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         Компоненты одного типа:\r\n      </p>\r\n      <p class=\"conspect__text\">\r\n         Когда компонент обновляется, его экземпляр остаётся прежним, поэтому его состояние \r\n         сохраняется между рендерами. React обновляет пропсы базового экземпляра компонента \r\n         для соответствия новому элементу и вызывает componentDidUpdate() на базовом экземпляре.\r\n      </p>\r\n   </li>\r\n   <li>\r\n      <p class=\"conspect__text\">\r\n         Рекурсия по дочерним элементам:\r\n      </p>\r\n      <p class=\"conspect__text\">\r\n         По умолчанию при рекурсивном обходе дочерних элементов DOM-узла React \r\n         проходит по обоим спискам потомков одновременно и создаёт мутацию, когда находит отличие.\r\n      </p>\r\n   </li>\r\n</ul>\r\n",
         "title": "Согласование"
      },
      "14-prop-types": {
         "data": "<h2 class=\"conspect__header\">\r\n   Проверка типов с помощью PropTypes\r\n   <a href=\"https://ru.reactjs.org/docs/typechecking-with-proptypes.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Библиотека PropsType используется для статической проверки\r\n   типов props в режиме разработки. При несоответствии типов\r\n   выводится предупреждение в консоль.\r\n</p>\r\n<a href=\"https://www.npmjs.com/package/prop-types\" class=\"conspect__outside-link\" target=\"_blank\">\r\n   NPM репозиторий PropsTypes.\r\n</a>\r\n\r\n<h3 class=\"conspect__subheader\">Пример использования:</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n<span data-reference=\"Импорт библиотеки\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">PropsTypes</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;prop-types&quot;</span>;\r\n\r\n<span data-reference=\"Просто компонент, для которого реализуется проверка типов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Greeting</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Приветствую Вас, {this.props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\r\n         )\r\n      }\r\n   }\r\n\r\n<span data-reference=\"Настройка проверки типов для компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title class_\">Greeting</span>.<span class=\"hljs-property\">propTypes</span> = {\r\n<span data-reference=\"Проп name должен иметь тип string\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">PropsTypes</span>.<span class=\"hljs-property\">string</span>\r\n   };\r\n\r\n<span data-reference=\"Задание свойств по умолчанию\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title class_\">Greeting</span>.<span class=\"hljs-property\">defaultProps</span> = {\r\n<span data-reference=\"Значение свойства name по умолчанию, также подвергается проверке типа\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Незнакомец&#x27;</span>\r\n   };\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Greeting</span>;\r\n</code></pre>\r\n<p class=\"conspect__text\">\r\n   Добавление проверки типов к функциональным компонентам осуществляется \r\n   аналогично классовым компонентам.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Возможные варианты проверки типов:</h3>\r\n<pre><code>\r\n<span data-reference=\"Можно объявить проп на соответствие определённому JS-типу. optional - говорит о том что проп не обязателен.\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title class_\">MyComponent</span>.<span class=\"hljs-property\">propTypes</span> = {\r\n      <span class=\"hljs-attr\">optionalArray</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">array</span>,\r\n      <span class=\"hljs-attr\">optionalBool</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">bool</span>,\r\n      <span class=\"hljs-attr\">optionalFunc</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">func</span>,\r\n      <span class=\"hljs-attr\">optionalNumber</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,\r\n      <span class=\"hljs-attr\">optionalObject</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">object</span>,\r\n      <span class=\"hljs-attr\">optionalString</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,\r\n      <span class=\"hljs-attr\">optionalSymbol</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">symbol</span>,    \r\n      \r\n<span data-reference=\"Все, что может быть отрендерено: числа, строки, элементы или массивы (или фрагменты) содержащие эти типы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalNode</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">node</span>,\r\n<span data-reference=\"React-элемент\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalElement</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">element</span>,\r\n<span data-reference=\"Тип React-элемент (например, MyComponent)\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalElementType</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">elementType</span>,\r\n<span data-reference=\"Можно указать, что проп должен быть экземпляром класса, Для этого используется JS-оператор instanceof.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalMessage</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">instanceOf</span>(<span class=\"hljs-title class_\">Message</span>),\r\n<span data-reference=\"Вы можете задать ограничение конкретными значениями при помощи перечисления\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalEnum</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">oneOf</span>([<span class=\"hljs-string\">&#x27;News&#x27;</span>, <span class=\"hljs-string\">&#x27;Photos&#x27;</span>]),\r\n    \r\n<span data-reference=\"Объект, одного из нескольких типов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalUnion</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">oneOfType</span>([\r\n        <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,\r\n        <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,\r\n        <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">instanceOf</span>(<span class=\"hljs-title class_\">Message</span>)\r\n      ]),\r\n    \r\n<span data-reference=\"Массив объектов конкретного типа\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalArrayOf</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">arrayOf</span>(<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>),\r\n<span data-reference=\"Объект со свойствами конкретного типа\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalObjectOf</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">objectOf</span>(<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>),\r\n    \r\n<span data-reference=\"Объект с определённой структурой\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalObjectWithShape</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">shape</span>({\r\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,\r\n        <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>\r\n      }),\r\n      \r\n<span data-reference=\"При наличии необъявленных свойств в объекте будут вызваны предупреждения\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">optionalObjectWithStrictShape</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">exact</span>({\r\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,\r\n        <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>\r\n      }),   \r\n\r\n<span data-reference=\"Можно добавить `isRequired` к любому приведённому выше типу, чтобы показывать предупреждение, если проп не передан\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">requiredFunc</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">func</span>.<span class=\"hljs-property\">isRequired</span>,\r\n<span data-reference=\"Обязательное значение любого типа\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">requiredAny</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">any</span>.<span class=\"hljs-property\">isRequired</span>,\r\n    \r\n<span data-reference=\"Можно добавить собственный валидатор. Он должен возвращать объект `Error` при ошибке валидации. Не используйте `console.warn` или `throw` - это не будет работать внутри `oneOfType`\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">customProp</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">props, propName, componentName</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.<span class=\"hljs-title function_\">test</span>(props[propName])) {\r\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(\r\n            <span class=\"hljs-string\">&#x27;Проп `&#x27;</span> + propName + <span class=\"hljs-string\">&#x27;` компонента&#x27;</span> +\r\n            <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;` имеет неправильное значение&#x27;</span>\r\n          );\r\n        }\r\n      },\r\n    \r\n<span data-reference=\"Можно задать свой валидатор для `arrayOf` и `objectOf`. Он должен возвращать объект Error при ошибке валидации. Валидатор будет вызван для каждого элемента в массиве или для каждого свойства объекта. Первые два параметра валидатора - это массив или объект и ключ текущего элемента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">customArrayProp</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-title function_\">arrayOf</span>(\r\n         <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">propValue, key, componentName, location, propFullName</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/matchme/</span>.<span class=\"hljs-title function_\">test</span>(propValue[key])) {\r\n               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(\r\n                  <span class=\"hljs-string\">&#x27;Проп `&#x27;</span> + propFullName + <span class=\"hljs-string\">&#x27;` компонента&#x27;</span> +\r\n                  <span class=\"hljs-string\">&#x27; `&#x27;</span> + componentName + <span class=\"hljs-string\">&#x27;` имеет неправильное значение&#x27;</span>\r\n            );\r\n         }\r\n      })\r\n\r\n<span data-reference=\"В качестве дочернего может быть передан только один элемент\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">element</span>.<span class=\"hljs-property\">isRequired</span>\r\n   };\r\n</code></pre>",
         "title": "Проверка типов с помощью PropTypes"
      },
      "15-strict-mode": {
         "data": "<h2 class=\"conspect__header\">\r\n   Строгий режим\r\n   <a href=\"https://ru.reactjs.org/docs/strict-mode.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   StrictMode — инструмент для обнаружения потенциальных проблем в приложении. \r\n   Также как и Fragment, StrictMode не рендерит видимого UI. \r\n   Строгий режим активирует дополнительные проверки и предупреждения для своих потомков.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ExampleApplication</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Компонент не вложен в StrictMode, для него строгий режим не применяется.\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> /&gt;</span>\r\n<span data-reference=\"Строгий режим может быть включён для любой части приложения.\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">React.StrictMode</span>&gt;</span>\r\n<span data-reference=\"Элемент вложен в StrictMode, для него а также для всех их потомков, будет использован строгий режим.\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ComponentOne</span> /&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ComponentTwo</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.StrictMode</span>&gt;</span>\r\n<span data-reference=\"Компонент не вложен в StrictMode, для него строгий режим не применяется.\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Footer</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Функции строгого режима:\r\n</p>\r\n<ul class=\"conspect__list\">\r\n   <li>Обнаруживает небезопасные методы жизненного цикла.</li>\r\n   <li>Предупреждает об использовании устаревшего API строковых реф.</li>\r\n   <li>Предупреждении об использовании устаревшего метода findDOMNode.</li>\r\n   <li>Помогает обнаружить неожиданные побочные эффекты.</li>\r\n   <li>Помогает обнаружить использование устаревшего API контекста.</li>\r\n</ul>",
         "title": "Строгий режим"
      },
      "16-uncontrolled-components": {
         "data": "<h2 class=\"conspect__header\">\r\n   Неуправляемые компоненты\r\n   <a href=\"https://ru.reactjs.org/docs/uncontrolled-components.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Данные управляемых компонентов постоянно синхронизируются с состоянием \r\n   родительского или текущего компонента. Данные неуправляемых\r\n   компонентов не синхронизируются, вместо этого текущее значение\r\n   из них извлекается при необходимости.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onFormSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onFormSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);\r\n<span data-reference=\"Создаем реф на элемент input\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">onFormSubmit</span>(<span class=\"hljs-params\">event</span>) {\r\n         event.<span class=\"hljs-title function_\">preventDefault</span>();\r\n<span data-reference=\"При отправке формы, извлекаем значения из input используя созданный реф\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">`введено имя: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.input.current.value}</span>`</span>);\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{this.onFormSubmit}</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> \r\n                     <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> \r\n<span data-reference=\"Прикрепляем реф к элементу input\" class=\"conspect__reference\">i</span>                     <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.input}</span>\r\n<span data-reference=\"Начальное значение поля по умолчанию, дает возможность изменять значения после рендера, в отличие от value\" class=\"conspect__reference\">i</span>                     <span class=\"hljs-attr\">defaultValue</span>=<span class=\"hljs-string\">&quot;Билли&quot;</span>\r\n                  /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Отправить&quot;</span> /&gt;</span>            \r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n         );\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Чтобы определить значение по умолчанию для select, textarea\r\n   и &lt;input type=\"text\"&gt;, нужно использовать defaultValue, для \r\n   &lt;input type=\"checkbox/radio\"&gt; используется defaultChecked.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Чтение файлов</h3>\r\n<p class=\"conspect__text\">\r\n   В React &lt;input type=\"file\"&gt; всегда является неуправляемым компонентом, \r\n   потому что его значение может быть установлено только пользователем, \r\n   а не программным путём.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileInput</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> {\r\n      <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) {\r\n         <span class=\"hljs-variable language_\">super</span>(props);\r\n         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onFormSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onFormSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);        \r\n<span data-reference=\"Создаем реф на элемент input для чтения файла\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fileInputRef</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();\r\n<span data-reference=\"Создаем реф на элемент pre для вывода файла\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">outputRef</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();\r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">onFormSubmit</span>(<span class=\"hljs-params\">event</span>) {\r\n         event.<span class=\"hljs-title function_\">preventDefault</span>();      \r\n<span data-reference=\"Передаем прочитанный файл функции вывода\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">showFile</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fileInputRef</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">files</span>[<span class=\"hljs-number\">0</span>]);\r\n      }\r\n   \r\n<span data-reference=\"Функция вывода файла\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">showFile</span>(<span class=\"hljs-params\">file</span>) {\r\n<span data-reference=\"Создаем файлридер\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">const</span> reader = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>();\r\n   \r\n<span data-reference=\"Читаем файл как текст\" class=\"conspect__reference\">i</span>         reader.<span class=\"hljs-title function_\">readAsText</span>(file);\r\n         reader.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"В случае успеха, выводим содержимое.\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">outputRef</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">textContent</span> = reader.<span class=\"hljs-property\">result</span>;\r\n         };\r\n         reader.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"В случае ошибки выводим сообщение.\" class=\"conspect__reference\">i</span>            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">outputRef</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&#x27;Ошибка чтения файла...&#x27;</span>;\r\n         }            \r\n      }\r\n   \r\n      <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{this.onFormSubmit}</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\r\n                  Загрузите файл для чтения:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n<span data-reference=\"Прикрепляем реф к элементу input\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.fileInputRef}</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Прочитать файл&quot;</span> /&gt;</span>\r\n<span data-reference=\"Прикрепляем реф к элементу pre\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.outputRef}</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n         )\r\n      }\r\n   }\r\n</code></pre>",
         "title": "Неуправляемые компоненты"
      },
      "1-custom": {
         "data": "<h2 class=\"conspect__header\">\r\n   Пользовательские хуки\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-custom.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Пользовательский хук — это JavaScript-функция, имя которой \r\n   начинается с «use», и которая может вызывать другие хуки. \r\n   Пользовательские хуки позволяют разделять сложную логику \r\n   между компонентами.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Создаем пользовательский хук, реализующий логику\r\n   подключения к чат серверу, для слежения за статусом определенного \r\n   пользователя:\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> chatAPI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./chatAPI&quot;</span>;\r\n\r\n<span data-reference=\"Имя хука должно начинается с use\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useFriendStatus</span>(<span class=\"hljs-params\">userName</span>) {\r\n      \r\n<span data-reference=\"Создаем переменную состояния, содержащую статус пользователя и функцию для его изменения\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\r\n      \r\n<span data-reference=\"В хук эффектов передаем функцию для подписки на статус пользователя\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         chatAPI.<span class=\"hljs-title function_\">subscribeToStatus</span>(\r\n            userName,\r\n<span data-reference=\"При изменении статуса подьзователя chatAPI вызовет данный колбэк и изменит состояние, что вызовет повторный рендеринг компонента\" class=\"conspect__reference\">i</span>            <span class=\"hljs-function\">(<span class=\"hljs-params\">status</span>) =&gt;</span> <span class=\"hljs-title function_\">setStatus</span>(status)\r\n         );\r\n\r\n<span data-reference=\"Перед следующим рендерингом и при демонтаже компонента, произойдет отписка от chateAPI\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\r\n            chatAPI.<span class=\"hljs-title function_\">unsubscribeFromStatus</span>(userName)\r\n         };      \r\n      });\r\n\r\n<span data-reference=\"Возвращаем текущий статус из хука\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> status;\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useFriendStatus;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Теперь мы можем использовать логику подключения в \r\n   разных компонентах.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> useFrendStatus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./useFriendStatus&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FrendStatus</span>(<span class=\"hljs-params\">props</span>) {      \r\n<span data-reference=\"Используем пользовательский хук для подключения к chatAPI\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-title function_\">useFrendStatus</span>(props.<span class=\"hljs-property\">userName</span>);\r\n\r\n      <span class=\"hljs-keyword\">if</span>(status === <span class=\"hljs-literal\">null</span>) {\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Загрузка...&#x27;</span>;\r\n      }   \r\n      <span class=\"hljs-keyword\">return</span> status ? <span class=\"hljs-string\">&#x27;в сети!&#x27;</span> : <span class=\"hljs-string\">&#x27;не в сети...&#x27;</span>;      \r\n   }\r\n</code></pre>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> useFriendStatus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./useFriendStatus&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;./FrendListItem.css&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FrendListItem</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Используем пользовательский хук для подключения к chatAPI\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-title function_\">useFriendStatus</span>(props.<span class=\"hljs-property\">userName</span>);\r\n\r\n      <span class=\"hljs-keyword\">let</span> className = <span class=\"hljs-string\">&#x27;FrendListItem&#x27;</span>;\r\n      <span class=\"hljs-keyword\">if</span>(status) {\r\n         className += <span class=\"hljs-string\">&#x27; onLine&#x27;</span>;\r\n      }\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{className}</span>&gt;</span>\r\n            {props.userName}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Передача информации между хуками</h3>\r\n<p class=\"conspect__text\">\r\n   Поскольку хуки являются функциями, мы можем передавать \r\n   информацию между ними. Так, один хук, может использовать \r\n   переменные возвращаемые из другого хука.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> chatAPI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./chatAPI&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> useFrendStatus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./useFriendStatus&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">StatusCircle</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./StatusCircle&quot;</span>;\r\n\r\n<span data-reference=\"Получаем массив с обьектами пользователей, для создания элементов options\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> users = chatAPI.<span class=\"hljs-title function_\">getUsers</span>();\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserPicker</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Компонент имеет собственное состояние - имя текщего выбранного пользователя\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [userName, setUserName] = <span class=\"hljs-title function_\">useState</span>(users[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">name</span>);\r\n<span data-reference=\"Для реализации подписки на обновления статуса текущего пользователя, используется пользовательский хук, возвращающий текущий статус\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-title function_\">useFrendStatus</span>(userName);\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{fontSize:</span> &#x27;<span class=\"hljs-attr\">20px</span>&#x27;}}&gt;</span>\r\n<span data-reference=\"Текущий статус используется компонентом индикатором\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StatusCircle</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">{status}</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> \r\n<span data-reference=\"Начальное состояние элемента select - первый пользователь списка\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{userName}</span>\r\n<span data-reference=\"При изменении значения select вызываем функцию setUserName, которая изменяет userName и запускает повторный рендер компонента\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setUserName(e.target.value)}\r\n               style={{fontSize: &#x27;inherit&#x27;}}\r\n            &gt;\r\n<span data-reference=\"Создаем элементы options для заполнения select\" class=\"conspect__reference\">i</span>               {users.map((user) =&gt; (\r\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{user.ID}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{user.name}</span>&gt;</span>\r\n                     {user.name}\r\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\r\n               ))}\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Пользовательские хуки"
      },
      "2-effect": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук эффекта\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-effect.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук эффекта даёт зможность выполнять побочные эффекты в функциональном \r\n   компоненте, такие как загрузка данных, оформление подписки и прямое \r\n   изменение DOM. Хук представляет собой совокупность методов componentDidMount, \r\n   componentDidUpdate, и componentWillUnmount. Хук выполняется после каждого \r\n   рендера и обновления, только после того, как DOM уже обновился в методе render.\r\n   Хук можно использовать несколько раз, порядок выполнения эффектов \r\n   соответствует порядку их объявления.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Хук эффекта без сброса</h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт хука useEffect\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [counter, setCounter] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\r\n\r\n<span data-reference=\"Хуку useEffect нужно передать колбэк, который будет выполнен после рендера или обновления компонента.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">`Значение счетчика <span class=\"hljs-subst\">${counter}</span>!`</span>;\r\n      });\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Значение счетчика {counter}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCounter(counter + 1)}&gt;\r\n               Увеличить счетчик!\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Хук эффекта со сбросом</h3>\r\n<p class=\"conspect__text\">\r\n   Под сбросом подразумевается отмена каких либо \r\n   произведенных ранее компонентом побочных эффектов, \r\n   при его демонтаже, аналог componentWillUnmount.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Импорт хуков useEffect и useState\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, {useState, useEffect} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n<span data-reference=\"Импорт chatAPI на который осуществляется подписка\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> chatAPI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./chatAPI&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FrendStatusF</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\r\n\r\n<span data-reference=\"Передаем хуку useEffect функцию колбэк, которая выполнится после рендера компонента.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Функция передаваемая chatAPI для подписки на изменение статуса пользователя, можно использовать анонимные и стрелочные функции.\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onStatusChange</span>(<span class=\"hljs-params\">status</span>) {\r\n            <span class=\"hljs-title function_\">setStatus</span>(status);\r\n         }\r\n\r\n<span data-reference=\"Функция отписки от обновления статуса пользователя chatAPI, можно использовать анонимные и стрелочные функции.\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">cleanUp</span>(<span class=\"hljs-params\"></span>) {\r\n            chatAPI.<span class=\"hljs-title function_\">unsubscribeFromStatus</span>(\r\n               props.<span class=\"hljs-property\">userName</span>\r\n            );\r\n         }\r\n\r\n<span data-reference=\"Подписываемся на обновления статуса пользователя.\" class=\"conspect__reference\">i</span>         chatAPI.<span class=\"hljs-title function_\">subscribeToStatus</span>(\r\n            props.<span class=\"hljs-property\">userName</span>,\r\n<span data-reference=\"Передаваемая функция может быть анонимной или стрелочной.\" class=\"conspect__reference\">i</span>            onStatusChange\r\n         );\r\n\r\n<span data-reference=\"Функция, возвращенная из колбэка useEffect будет выполнена перед следующим вызовом колбэка, с предыдущими значениями переменных (замыкание), производя сброс предыдущего эффекта. Возвращаемая функция может быть анонимной или стрелочной.\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> cleanUp;\r\n      });\r\n\r\n      <span class=\"hljs-keyword\">if</span>(status === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Загрузка...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\r\n            Пользователь {props.userName} сейчас \r\n            {status ? &#x27; в сети!&#x27; : &#x27; не в сети...&#x27;}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Пропуск эффектов</h3>\r\n<p class=\"conspect__text\">\r\n   Так как вызов эффектов и их отмены происходит как при первоначальном\r\n   рендере компонента, так и при его повторном рендере, такая логика\r\n   может быть избыточной. Существуют способы пропуска вызова хука эффектов.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SkipEffect</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-comment\">// ------- Логика хуков -------</span>\r\n<span data-reference=\"Состояние счетчика и функция для его изменения.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [counter, setCounter] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\r\n<span data-reference=\"Хук эффектов, при повторном рендере изменяем title документа\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">`Счетчик - <span class=\"hljs-subst\">${counter}</span>`</span>;\r\n<span data-reference=\"При передаче вторым аргументом массива с переменными, хук запускает колбэк только если новое значение переменной массива отличается от старого значения.\" class=\"conspect__reference\">i</span>      }, [counter]);\r\n   \r\n<span data-reference=\"Состояние статуса пользователя и функции для его изменения.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);\r\n<span data-reference=\"Хук эффектов, подписывается на изменения статуса пользователя в chatAPI\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Подписаться на изменения статуса пользователя\" class=\"conspect__reference\">i</span>         chatAPI.<span class=\"hljs-title function_\">subscribeToStatus</span>(\r\n            props.<span class=\"hljs-property\">userName</span>,\r\n            <span class=\"hljs-function\"><span class=\"hljs-params\">status</span> =&gt;</span> <span class=\"hljs-title function_\">setStatus</span>(status)         \r\n         );\r\n   \r\n<span data-reference=\"Вернуть функцию отписки от статуса пользователя, которая будет выполнена при размонтировании компонента.\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\r\n            chatAPI.<span class=\"hljs-title function_\">unsubscribeFromStatus</span>(\r\n               props.<span class=\"hljs-property\">userName</span>\r\n            );\r\n         };\r\n<span data-reference=\"Если передать вторым аргументом пустой массив, то колбэк хука эффектов будет выполнен только при превоначальном монтировании компонента, а возвращенноя им функция, один раз, при размонтировании компонента.\" class=\"conspect__reference\">i</span>      }, []);\r\n   \r\n      <span class=\"hljs-comment\">// ------- Логика рендера компонента -------</span>\r\n      <span class=\"hljs-keyword\">let</span> statusComponent;\r\n   \r\n      <span class=\"hljs-keyword\">if</span>(status === <span class=\"hljs-literal\">null</span>) {\r\n         statusComponent = (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Загрузка...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n         );\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n         <span class=\"hljs-keyword\">const</span> statusString = status ? <span class=\"hljs-string\">&#x27;в сети!&#x27;</span> : <span class=\"hljs-string\">&#x27;не в сети...&#x27;</span>;\r\n         statusComponent = (\r\n            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Пользователь {props.userName} {statusString}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n         );\r\n      }\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            {statusComponent}\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Значение счетчика: {counter}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCounter(counter + 1)}&gt;\r\n               Увеличить счетчик.\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук эффекта"
      },
      "3-layoutEffect": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук эффекта шаблона\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#uselayouteffect\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Идентичен useEffect, но запускается синхронно после \r\n   всех изменений DOM до первой отрисовки браузером. \r\n   Используется для чтения макета из DOM и синхронного \r\n   повторного рендеринга. Обновления, запланированные внутри \r\n   useLayoutEffect, будут применены синхронно перед тем, \r\n   как браузер осуществит отрисовку. Использование хука \r\n   <span class=\"conspect__marked-text\">блокирует</span> \r\n   визуальное обновление интерфейса, нужно использовать \r\n   useEffect где возможно.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">UserAgent</span>(<span class=\"hljs-params\"></span>) {   \r\n<span data-reference=\"Создаем реф\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> textElement = <span class=\"hljs-title function_\">useRef</span>();\r\n   \r\n<span data-reference=\"Хук выполняет чтение элемнта DOM по ссылке из рефа, и изменение содержимого этого элемента. Браузер выполнит первую отрисовку страницы только после выполения хука.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useLayoutEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> node = textElement.<span class=\"hljs-property\">current</span>;\r\n         <span class=\"hljs-keyword\">if</span>(node.<span class=\"hljs-property\">textContent</span> === <span class=\"hljs-string\">&#x27;None&#x27;</span>) {\r\n            node.<span class=\"hljs-property\">textContent</span> = navigator.<span class=\"hljs-property\">userAgent</span>;\r\n         }\r\n<span data-reference=\"Данный вывод в консоль будет первым\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;useLayoutEffect&#x27;</span>);\r\n      }, []);\r\n   \r\n<span data-reference=\"Хук useEffect будет выпонен после того как браузер отрисует страницу\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Данный вывод в консоль будет вторым\" class=\"conspect__reference\">i</span>         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;useEffect&#x27;</span>);\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>User Agent type:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\r\n<span data-reference=\"Привязка рефа к элементу\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{textElement}</span>&gt;</span>None<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>     \r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук эффекта шаблона"
      },
      "4-rules": {
         "data": "<h2 class=\"conspect__header\">\r\n   Правила хуков\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-rules.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Используйте хуки только на верхнем уровне. Не вызывайте хуки внутри \r\n      циклов, условных операторов или вложенных функций. Вместо этого \r\n      всегда используйте хуки только внутри React-функций, до возврата \r\n      какого-либо значения из них.\r\n   </li>\r\n   <li>\r\n      Не вызывайте хуки из обычных функций JavaScript. Можно вызывать \r\n      хуки из функциональных компонентов React, или из пользовательских хуков.\r\n   </li>\r\n</ul>",
         "title": "Правила хуков"
      },
      "5-state": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук состояния\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-state.html\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хуки — это функции, с помощью которых вы можете «подцепиться» к \r\n   состоянию и методам жизненного цикла React из функциональных компонентов. \r\n   Хуки не работают внутри классов — они дают вам возможность \r\n   использовать React без классов.\r\n</p>\r\n\r\n<pre><code>\r\n<span data-reference=\"Импорт хука состояния из React\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Переменная count содержит текущее значение состояния, setCount - функция для его обновления. Аргумент useState — это начальное состояние, которое используется при первом рендере.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Вы нажали {count} раз...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n<span data-reference=\"При клике на кнопку, изменяем текущее значение count через функцию setCount\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + 1)}&gt;\r\n               Нажми на меня!\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Counter</span>;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Функция setCount, в отличие от классовых компонентов, \r\n   не сливает новое и старое состояние вместе, а всегда \r\n   <span class=\"conspect__marked-text\">замещает</span> \r\n   его новым значением. Состояние может, но не обязано, \r\n   быть объектом. Хук состояния можно использовать в \r\n   компоненте более одного раза.   \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Функциональные обновления</h3>\r\n<p class=\"conspect__text\">\r\n   Если новое состояние вычисляется с использованием предыдущего \r\n   состояния, можно передать функцию в setState. Функция \r\n   получит предыдущее значение состояния и вернёт обновлённое значение.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(                               \r\n<span data-reference=\"Если начальное состояние является результатом сложных вычислений, можно предоставить функцию, которая будет выполняться только при начальном рендеринге\" class=\"conspect__reference\">i</span>         props.<span class=\"hljs-property\">initialValue</span>\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Текущий счет: {count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> \r\n<span data-reference=\"Обычное обновление состояния путем передачи нового значения в функцию\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(props.initialValue)}\r\n            &gt;Сброс<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>         \r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> \r\n<span data-reference=\"Обновление передачей колбэка, колбэк получает предыдущее состояние первым аргументом, и возвращает новое состояние\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(prevValue =&gt; prevValue - 1)}\r\n            &gt; - <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\r\n<span data-reference=\"Обновление передачей колбэка аналогично.\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(prevValue =&gt; prevValue + 1)}\r\n            &gt; + <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n<p class=\"conspect__text\">\r\n   Если состояние хука обновляется тем же значением, что и текущее, \r\n   React досрочно выйдет из хука без повторного рендера дочерних \r\n   элементов и запуска эффектов.\r\n</p>",
         "title": "Хук состояния"
      },
      "6-callback": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук колбэков\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#usecallback\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Хук useCallback возвращает мемоизированную версию колбэка, \r\n   который изменяется только, если изменяются значения одной \r\n   из зависимостей. Так как дочерние компоненты полагаются на \r\n   равенство ссылок на колбэки, это предотвращает ненужные рендеры.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\">props</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(props.<span class=\"hljs-property\">initial</span>);\r\n   \r\n<span data-reference=\"Создание мемоизированной версии колбэка\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> memoizedCallback = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevCount</span> =&gt;</span> prevCount + props.<span class=\"hljs-property\">value</span>);\r\n<span data-reference=\"Второй аргумент - массив зависимостей колбэка, при изменении который создается новый колбэк\" class=\"conspect__reference\">i</span>      }, [props.<span class=\"hljs-property\">value</span>]);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Current counter value: {count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \r\n<span data-reference=\"Передача мемоизированного колбэка, который не изменяется при повторном рендере Counter\" class=\"conspect__reference\">i</span>               <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{memoizedCallback}</span>\r\n               <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;Increase counter!&quot;</span> \r\n            /&gt;</span>         \r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук колбэков"
      },
      "7-context": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук контекста\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#usecontext\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Принимает объект контекста, возвращённый из React.createContext и возвращает \r\n   текущее значение контекста, которое определяется пропом value ближайшего \r\n   MyContext.Provider над вызывающим компонентом в дереве. Если MyContext.Provider \r\n   обновляется, хук вызовет повторный рендер с последним значением контекста, \r\n   переданным этому провайдеру. \r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Когда использовать контекст?</h3>\r\n<p class=\"conspect__text\">\r\n   Контекст разработан для передачи глобальных данных многочисленным компонентам, \r\n   например, текущий аутентифицированный пользователь, UI-тема или выбранный язык. \r\n   По возможности не используйте его, так как это усложняет повторное использование \r\n   компонентов. Альтернатива - композиция компонентов.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Код</h3>\r\n<p class=\"conspect__text\">\r\n   Создаем тему и контекст.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n\r\n<span data-reference=\"Объект темы\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> themes = {\r\n      <span class=\"hljs-attr\">light</span>: {\r\n         <span class=\"hljs-attr\">foreground</span>: <span class=\"hljs-string\">&#x27;#A0522D&#x27;</span>,\r\n         <span class=\"hljs-attr\">background</span>: <span class=\"hljs-string\">&#x27;#FFF8DC&#x27;</span>\r\n      },\r\n      <span class=\"hljs-attr\">dark</span>: {\r\n         <span class=\"hljs-attr\">foreground</span>: <span class=\"hljs-string\">&#x27;#2F4F4F&#x27;</span>,\r\n         <span class=\"hljs-attr\">background</span>: <span class=\"hljs-string\">&#x27;#D3D3D3&#x27;</span>\r\n      }\r\n   }\r\n\r\n<span data-reference=\"Создаем контекст темы, значение по умолчанию - light\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createContext</span>(themes.<span class=\"hljs-property\">light</span>);\r\n\r\n   <span class=\"hljs-keyword\">export</span> { themes, <span class=\"hljs-title class_\">ThemeContext</span> };\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компоненты использующие тему.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Компонент оформленного текста\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ThemedText</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Создаем переменную контекста\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> theme = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> \r\n<span data-reference=\"Используем значения из контекста в оформлении стиля\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\r\n               <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">theme.foreground</span>,\r\n               <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">theme.background</span>\r\n            }}\r\n         &gt;</span>{props.text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      )\r\n   }\r\n\r\n<span data-reference=\"Компоонент оформленной кнопки\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ThemedButton</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Создаем переменную контекста\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> theme = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> \r\n<span data-reference=\"Используем значения из контекста в оформлении стиля\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\r\n               <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">theme.foreground</span>,\r\n               <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">theme.background</span>\r\n            }}\r\n<span data-reference=\"Передаем функцию для изменения темы из родительского компонента\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> props.onThemeChange()}\r\n         &gt;{props.text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Родительский компонент.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Toolbar</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"В состоянии храним значение текущей темы.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [theme, setTheme] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;light&#x27;</span>);\r\n   \r\n<span data-reference=\"Функция для переключения текущей темы\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onThemeChange</span>(<span class=\"hljs-params\"></span>) {\r\n         <span class=\"hljs-title function_\">setTheme</span>(theme === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>);\r\n      }\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n<span data-reference=\"Провайдер, передающий текущее значение темы, вниз по дереву дочерних компонентов\" class=\"conspect__reference\">i</span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{themes[theme]}</span>&gt;</span>\r\n<span data-reference=\"Компонент использующий тему\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemedText</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;Just text in component.&quot;</span> /&gt;</span>\r\n<span data-reference=\"Компонент использующий тему\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemedButton</span>\r\n                  <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">&quot;Change theme!&quot;</span> \r\n<span data-reference=\"Передаем компоненту функцию для переключения темы\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">onThemeChange</span>=<span class=\"hljs-string\">{onThemeChange}</span>\r\n               /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>",
         "title": "Хук контекста"
      },
      "8-reducer": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук редьюсера\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#usereducer\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Альтернатива для useState. Принимает редюсер типа \r\n   (state, action) => newState и возвращает текущее \r\n   состояние в паре с методом dispatch. Используется\r\n   когда у вас сложная логика состояния, которая включает \r\n   в себя несколько значений, или когда следующее состояние \r\n   зависит от предыдущего.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Если вернуть то же значение из редюсера хука, что и текущее состояние, \r\n   React выйдет без перерисовки дочерних элементов или запуска эффектов. \r\n   (React использует алгоритм сравнения Object.is.)\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Код</h3>\r\n<p class=\"conspect__text\">\r\n   Объект исходного состояния и функция редьюсера.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Объект начального состояния компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> initialState = {\r\n      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\r\n   }\r\n   \r\n<span data-reference=\"Функция редьюсера, агрументы - текущий объект состояния компонента и объект action\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reducer</span>(<span class=\"hljs-params\">state, action</span>) {\r\n<span data-reference=\"Переключатель, выполняющий определенные действия для различных значений action.type\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\r\n<span data-reference=\"В случае increment\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;increment&#x27;</span>:\r\n<span data-reference=\"Вернуть новый объект состояния, с увеличенным свойством count\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>};\r\n<span data-reference=\"В случае decrement\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;decrement&#x27;</span>:\r\n<span data-reference=\"Вернуть новый объект состояния, с уменьшенным свойством count\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> - <span class=\"hljs-number\">1</span>};\r\n<span data-reference=\"Если действие не предусмотрено редьюсером, выбросить ошибку\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">default</span>:\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Unknown action type.&#x27;</span>);\r\n      }\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">export</span> { initialState, reducer };\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент, использующий сложное состояние.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { useReducer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { reducer, initialState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./state&quot;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Counter</span>(<span class=\"hljs-params\"></span>) {                            \r\n<span data-reference=\"Хук useReducer возвращает переменную состояния и функцию dispatch для отправки действий в функцию редьюсер\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [state, dispatch] = <span class=\"hljs-title function_\">useReducer</span>(\r\n<span data-reference=\"Первый аргумент хука - функция редьюсер\" class=\"conspect__reference\">i</span>         reducer,\r\n<span data-reference=\"Второй аргумент хука - объект начального состояния, при первом рендере передается в переменную стостояния state\" class=\"conspect__reference\">i</span>         initialState\r\n      );\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Current counter value: {state.count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {\r\n<span data-reference=\"При нажатии на кнопку, отправляем объект action со свойством type в редьюсер, с помощью функции dispatch, после чего происходит обновление state и повторный рендеринг компонента\" class=\"conspect__reference\">i</span>               dispatch({type: &#x27;decrement&#x27;});\r\n            }}\r\n            &gt;-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {\r\n<span data-reference=\"Аналогично\" class=\"conspect__reference\">i</span>               dispatch({\r\n                  type: &#x27;increment&#x27;, \r\n<span data-reference=\"С объектом action можно передать дополнительные данные из компонента и его пропов в функцию редьюсер\" class=\"conspect__reference\">i</span>                  payload: &#x27;Hi!&#x27;\r\n               });               \r\n            }}\r\n            &gt;+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      )\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Counter</span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Ленивая инициализация</h3>\r\n<p class=\"conspect__text\">\r\n   Позволяет использовать логику начального состояния\r\n   компонента с помощью функции, за пределами редьюсера.\r\n</p>\r\n<p class=\"conspect__text\">\r\n   Функция для расчета начального состояния и \r\n   доработанная функция редьюсера.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Функция расчета начального состояния, возвращает объект состояния, созданный на основе аргумента - начального значения\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">initialValue</span>) {\r\n      <span class=\"hljs-keyword\">return</span> {\r\n         <span class=\"hljs-attr\">count</span>: initialValue\r\n      }\r\n   }\r\n   \r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reducer</span>(<span class=\"hljs-params\">state, action</span>) {\r\n      <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\r\n         <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;increment&#x27;</span>:\r\n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>};\r\n         <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;decrement&#x27;</span>:\r\n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> - <span class=\"hljs-number\">1</span>};\r\n<span data-reference=\"Действие сброса\" class=\"conspect__reference\">i</span>         <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;reset&#x27;</span>:\r\n<span data-reference=\"Вернуть объект состояния, расчитанный функцией инициализации, на основе пропа, переданного из компонента в свойстве payload объекта action\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">init</span>(action.<span class=\"hljs-property\">payload</span>);\r\n         <span class=\"hljs-attr\">default</span>:\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Unknown action type&#x27;</span>);\r\n      }\r\n   }\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент, использующий сложное состояние.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LazyCounter</span>(<span class=\"hljs-params\">{initialValue}</span>) {\r\n<span data-reference=\"Использование функции расчета начального состояния в хуке\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> [state, dispatch] = <span class=\"hljs-title function_\">useReducer</span>(\r\n<span data-reference=\"Первый аргумент - функция редьюсер\" class=\"conspect__reference\">i</span>         reducer,\r\n<span data-reference=\"Второй аргумент - начальное значение полученное из пропов\" class=\"conspect__reference\">i</span>         initialValue,\r\n<span data-reference=\"Третий аргумент - функция расчета начального состояния. Начальное состояние будет установлено равным результату вызова init(initialValue).\" class=\"conspect__reference\">i</span>         init\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Current counter value: {state.count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> dispatch({\r\n               type: &#x27;decrement&#x27;\r\n            })}&gt;-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n   \r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> dispatch({\r\n               type: &#x27;reset&#x27;,\r\n               payload: initialValue                        @^^@\r\n            })}&gt;Reset<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n   \r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> dispatch({\r\n               type: &#x27;increment&#x27;\r\n            })}&gt;+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\r\n      ); \r\n   }\r\n</code></pre>",
         "title": "Хук редьюсера"
      },
      "9-memo": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук мемоизации\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#usememo\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Передайте расчетную функцию и массив зависимостей. \r\n   useMemo будет повторно вычислять мемоизированное значение \r\n   только тогда, когда значение какой-либо из зависимостей изменилось. \r\n   Эта оптимизация помогает избежать дорогостоящих вычислений \r\n   при каждом рендере.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Memoized</span>(<span class=\"hljs-params\">props</span>) {\r\n\r\n<span data-reference=\"Функция, производящая сложные вычисления, и возвращающая их результат\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bigCalc</span>(<span class=\"hljs-params\">value</span>) {\r\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Результат вычислений: <span class=\"hljs-subst\">${value}</span>`</span>;\r\n      }\r\n   \r\n<span data-reference=\"Хук возвращает результат сложных вычислений\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> memoizedValue = <span class=\"hljs-title function_\">useMemo</span>(\r\n<span data-reference=\"Первый аргумент - функция, возвращающая результат сложных вычислений\" class=\"conspect__reference\">i</span>         <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">bigCalc</span>(props.<span class=\"hljs-property\">value</span>),\r\n<span data-reference=\"Второй аргумент - массив с зависимостями, от котрых зависит результат вычислений, при их изменении производится повторный запуск хука. Если не передать массив зависимостей, вычисление будет происходить при каждом рендере\" class=\"conspect__reference\">i</span>         [props.<span class=\"hljs-property\">value</span>]\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{memoizedValue}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>",
         "title": "Хук мемоизации"
      },
      "10-imperativeHandle": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук ImperativeHandle\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#useimperativehandle\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Настраивает значение экземпляра, которое предоставляется \r\n   родительским компонентам при использовании ref.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Компонент, к элементам которого нужен доступ через рефы.\r\n</p>\r\n<pre><code>\r\n<span data-reference=\"Реф родительского компонента передаем вторым аргументом\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">InputField</span>(<span class=\"hljs-params\">props, ref</span>) {\r\n<span data-reference=\"Создаем реф для доступа к собственному элементу\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> inputRef = <span class=\"hljs-title function_\">useRef</span>();\r\n   \r\n<span data-reference=\"Используем хук, для запуска внутренних функций из родительских компонентов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-title function_\">useImperativeHandle</span>(\r\n<span data-reference=\"Первый аргумент - реф, получаемый от родительского компонента\" class=\"conspect__reference\">i</span>         ref,\r\n<span data-reference=\"Второй аргумент - функция, возвращающая объект с методами, которые будут доступны из родительского компонента\" class=\"conspect__reference\">i</span>         <span class=\"hljs-function\">() =&gt;</span> ({\r\n<span data-reference=\"Метод наведения фокуса\" class=\"conspect__reference\">i</span>            <span class=\"hljs-attr\">focus</span>: <span class=\"hljs-function\">() =&gt;</span> {     \r\n               inputRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">focus</span>();\r\n            }\r\n         })\r\n      );\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Привязываем реф компонента к элементу input\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputRef}</span> /&gt;</span></span>\r\n      )\r\n   }\r\n   \r\n<span data-reference=\"Создаем настроенную версию компонента с помощью forwardRef\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">InputFieldRefs</span> = <span class=\"hljs-title function_\">forwardRef</span>(<span class=\"hljs-title class_\">InputField</span>);\r\n   \r\n<span data-reference=\"Экспортируем настроенную версию компонента\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">InputFieldRefs</span>;\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Родительский компонент.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Form</span>(<span class=\"hljs-params\"></span>) {\r\n<span data-reference=\"Создаем реф, для связывания с дочерним элементом\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> inputRef = <span class=\"hljs-title function_\">useRef</span>();\r\n   \r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {    \r\n<span data-reference=\"Методы определенные в useImperativeHandle дочернего компонента, доступны как методы дочернего компонента, ссылка на который находится в inputRef.current\" class=\"conspect__reference\">i</span>         inputRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">focus</span>();\r\n      })\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span>Your name: \r\n<span data-reference=\"Отправляем созданный реф дочернему компоненту, реф будет связан в useImperativeHandle\" class=\"conspect__reference\">i</span>               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">InputFieldRefs</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputRef}</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span>         \r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\r\n      )\r\n   }\r\n</code></pre>",
         "title": "Хук ImperativeHandle"
      },
      "11-ref": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хук рефов\r\n   <a href=\"https://ru.reactjs.org/docs/hooks-reference.html#useref\" class=\"conspect__origin-link\" target=\"_blank\">➥</a>\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   useRef возвращает объект, свойство .current которого \r\n   инициализируется переданным аргументом (initialValue). \r\n   Возвращённый объект будет сохраняться в течение всего \r\n   времени жизни компонента. Используется для того чтобы\r\n   получить доступ к DOM элементам или для сохранения любого \r\n   мутируемого значения, по аналогии с тем, как вы используете \r\n   поля экземпляра в классах. Мутирование свойства .current \r\n   не вызывает повторный рендер компонента.\r\n</p>\r\n\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AnimatedText</span>(<span class=\"hljs-params\">props</span>) {\r\n<span data-reference=\"Создаем реф вызовом хука, инициализируя его пустым значением\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> textElement = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\r\n   \r\n      <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n<span data-reference=\"Анимируем текстовый элемент, получая ссылку на него из свойства current рефа\" class=\"conspect__reference\">i</span>         textElement.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">animate</span>(\r\n            [\r\n               {<span class=\"hljs-attr\">transform</span>: <span class=\"hljs-string\">&#x27;translateX(100px)&#x27;</span>, <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0</span>},        \r\n               {<span class=\"hljs-attr\">transform</span>: <span class=\"hljs-string\">&#x27;translateX(30px)&#x27;</span>, <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.2</span>},        \r\n               {<span class=\"hljs-attr\">transform</span>: <span class=\"hljs-string\">&#x27;translateX(0)&#x27;</span>, <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">1</span>}\r\n            ],\r\n            {\r\n               <span class=\"hljs-attr\">delay</span>: <span class=\"hljs-number\">100</span>,\r\n               <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">700</span>,\r\n               <span class=\"hljs-attr\">easing</span>: <span class=\"hljs-string\">&#x27;ease-out&#x27;</span>,\r\n               <span class=\"hljs-attr\">fill</span>: <span class=\"hljs-string\">&#x27;forwards&#x27;</span>\r\n            }\r\n         );\r\n      });\r\n   \r\n      <span class=\"hljs-keyword\">return</span> (\r\n<span data-reference=\"Прикрепляем реф к элементу\" class=\"conspect__reference\">i</span>         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{textElement}</span>&gt;</span>\r\n            {props.text}\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\r\n      );\r\n   }\r\n</code></pre>\r\n\r\n",
         "title": "Хук рефов"
      }
   },
   "keys": [
      {
         "sectionTitle": "Основные понятия",
         "pages": [
            "1-components-elements",
            "2-component-state",
            "3-composition",
            "4-conditional-rendering",
            "5-events-handling",
            "6-forms",
            "7-lists-and-keys",
            "8-thinking-in-react",
            "9-jsx",
            "10-lifting-state-up"
         ]
      },
      {
         "sectionTitle": "Продвинутые темы",
         "pages": [
            "1-a11ty",
            "2-context",
            "3-fragments",
            "4-error-boundaries",
            "5-HOC",
            "6-forwarding-refs",
            "7-portals",
            "8-render-props",
            "9-refs",
            "10-code-splitting",
            "11-optimizing-performance",
            "12-profiler",
            "13-reconciliation",
            "14-prop-types",
            "15-strict-mode",
            "16-uncontrolled-components"
         ]
      },
      {
         "sectionTitle": "Хуки React",
         "pages": [
            "1-custom",
            "2-effect",
            "3-layoutEffect",
            "4-rules",
            "5-state",
            "6-callback",
            "7-context",
            "8-reducer",
            "9-memo",
            "10-imperativeHandle",
            "11-ref"
         ]
      }
   ]
}
