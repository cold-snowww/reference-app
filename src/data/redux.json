{
   "pages": {
      "1-basics": {
         "data": "<h2 class=\"conspect__header\">\r\n   Основы работы с Redux\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Шаблон CRA:\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Использование готового шаблона CRA с Redux:<br>\r\n   <span class=\"conspect__marked-text\">\r\n      npx create-react-app my-app --template redux\r\n   </span><br>\r\n   <span class=\"conspect__marked-text\">\r\n      npx create-react-app my-app --template redux-typescript\r\n   </span><br>\r\n   <a href=\"https://github.com/reduxjs/cra-template-redux\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      репозиторий шаблона \r\n   </a>.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Этапы создания Redux приложения:\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Порядок действий: <a href=\"https://redux.js.org/tutorials/quick-start\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      ручная настройка приложения redux\r\n   </a>      \r\n</p>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Создать объекты исходного состояния для различных частей приложения,\r\n      если структура состояния представляет собой множество элементов со\r\n      свойством id, можно использовать функцию createEntityAdapter,  \r\n      изменяющую исходное состояние и генерурующую селекторы.\r\n   </li>\r\n   <li>\r\n      Создать слайс редьюсеры используя функцию createSlice, передав ей\r\n      начальное состояние, имя и функции редьюсеры. \r\n      Внутри функций редьюсеров можно изменять состояние, так как используется\r\n      библиотека Immer. Если был использован createEntityAdapter, можно\r\n      использовать функции хэлперы для создания функций редьюсеров.\r\n      Экспортировать сгенерированные функции создания действий\r\n      и слайс редьюсер.\r\n   </li>\r\n   <li>\r\n      Создать хранилище приложения используя функцию configureStore, которая\r\n      принимает объект конфигурации с функциями редьюсерами.\r\n   </li>\r\n   <li>\r\n      Подключить хранилище к приложению, для чего обернуть App в компонент \r\n      Provider и передать ему хранилище.\r\n   </li>\r\n   <li>\r\n      Создать селекторы для выделения данных из полного объекта состояния, \r\n      если селектор использует функции map, filter и т.д. для получения\r\n      состояния, его необходимо мемоизировать через функцию createSelector. \r\n      Если при создании исходного состояния использовался createEntityAdapter,\r\n      часть селекторов можно сгенерировать через todosAdapter.getSelectors.\r\n   </li>\r\n   <li>\r\n      Использовать состояние и отправку событий в компонентах React, \r\n      с помощью хуков useSelector и useDispatch.\r\n   </li>\r\n</ol>",
         "title": "Основы работы с Redux"
      },
      "2-initial-data": {
         "data": "<h2 class=\"conspect__header\">\r\n   Исходные данные.\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Для создания приложения, необходимы исходные данные.\r\n   Подготовка исходных данные и их планирование упрощает \r\n   создание приложения и уменьшает количество ошибок при его разработке.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Бизнес требования:\r\n</h3>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Будет ли это SPA или должны быть страницы,\r\n      между которыми будет перемещаться пользователь.\r\n   </li>\r\n   <li>\r\n      Если приложение имеет несколько страниц, \r\n      каковы маршруты приложения.\r\n   </li>\r\n   <li>\r\n      Из каких секций должен состоять пользовательский \r\n      интерфейс.\r\n   </li>\r\n   <li>\r\n      Какова функциональность каждой из\r\n      этих секций.\r\n   </li>\r\n   <li>\r\n      Как должны отображаться данные внутри \r\n      приложения.\r\n   </li>\r\n   <li>\r\n      Какие фильтры данных должны присутствовать\r\n   </li>\r\n</ol>\r\n\r\n<p class=\"conspect__text\">\r\n   В итоге необходимо сделать эскиз графического\r\n   интерфейса приложения, на котором выделить отдельные \r\n   компоненты и дать им имена. Набросать иерархическую\r\n   структуру компонентов приложения в виде списка.\r\n   Подумать о графическом дизайне на разных устройствах.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Данные приложения:\r\n</h3>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Определить минимальный набор данных, необходимых\r\n      каждому компоненту приложения.\r\n   </li> \r\n   <li>\r\n      Определить, какие компоненты будут получать данные напрямую\r\n      из глобального состояния, а какие в виде пропсов от\r\n      родительских компонентов.\r\n   </li>\r\n   <li>\r\n      Определить какие данные будут находиться в локальном\r\n      состоянии компонента, и в каких компонентах будет\r\n      храниться данное локальное состояние.\r\n   </li>\r\n</ol>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Структура состояния:\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Сформировать из глобальных данных компонентов\r\n   модель глобального состояния в виде плоского \r\n   JS объекта. Классы, функции, объекты Map, Set и т.д.\r\n   не допускаются, только простые объекты, массивы и элементарные\r\n   значения. Структура должна позволять легко получить доступ \r\n   к отдельным фрагментам данных, и обеспечивать удобство и скорость \r\n   работы с данными.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Проектирование действий:\r\n</h3>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Составить список действий, которые будут\r\n      выполняться для изменения состояния приложения.\r\n      В данном случае, действие это событие внутри приложения,\r\n      приводящее к изменениям внутри глобального состояния.\r\n   </li>\r\n   <li>\r\n      На основе списка действий, сформировать структуру\r\n      объектов действий, включая содержимое поля payload,\r\n      в котором может быть как примитивное значение, так и объект:  \r\n      {type: 'filters/changeStatus', payload: status}.\r\n   </li>\r\n</ol>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Приступить к программированию.\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Исходные данные подготовлены, можно приступить к написанию \r\n   кода Redux структуры, см. \"Основы работы с Redux\" а затем \r\n   React компонентов.\r\n</p>",
         "title": "Исходные данные."
      },
      "3-initia-state": {
         "data": "<h2 class=\"conspect__header\">Исходное состояние</h2>\r\n<p class=\"conspect__text\">\r\n   Исходное состояние на момент первой загрузки \r\n   приложения пользователем.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">initialTodosState.js</h3>\r\n<pre><code>\r\n<span data-reference=\"Начальное состояние отдельных записей при ручном создании\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> initialTodoState = {\r\n<span data-reference=\"Статус готовности даных в процессе загрузки\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n<span data-reference=\"Обьект с записями, использование объекта вместо массива упрощает доступ к отдельной записи\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">entities</span>: {\r\n<span data-reference=\"Отдельная запись данных, ключ соответствует уникальному идентификатору\" class=\"conspect__reference\">i</span>         <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n         <span class=\"hljs-number\">1</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span> },\r\n         <span class=\"hljs-number\">2</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span> },\r\n      },\r\n   };\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">initialFiltersState.js</h3>\r\n<pre><code>\r\n<span data-reference=\"Начальное состояние фильтров при ручном создании\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> initialFiltersState = {\r\n<span data-reference=\"Фильтр статуса\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;all&#x27;</span>,\r\n<span data-reference=\"Фильтр цветов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">colors</span>: [],\r\n   };\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">todosAdapter.js</h3>\r\n<p class=\"conspect__text\">\r\n   Создание начального состояния, для структур данных со множественными записями\r\n   с использованием адаптера данных, который выполняет их нормализацию. \r\n   Исходное состояние пустое, заполняется путем запроса данных с сервера.\r\n</p>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { createEntityAdapter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@reduxjs/toolkit&#x27;</span>;\r\n\r\n<span data-reference=\"Создание адаптера данных\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> todosAdapter = <span class=\"hljs-title function_\">createEntityAdapter</span>();\r\n<span data-reference=\"Создание пустого объекта нормализованной структуры данных\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> initialState = todosAdapter.<span class=\"hljs-title function_\">getInitialState</span>({\r\n<span data-reference=\"Дополнительное поле в создаваемой структуре\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n   });\r\n   \r\n   \r\n<span data-reference=\"Возвращаемая структура начального состояния\" class=\"conspect__reference\">i</span>   <span class=\"hljs-comment\">// initialState = {</span>\r\n<span data-reference=\"Массив с идентификаторами\" class=\"conspect__reference\">i</span>   <span class=\"hljs-comment\">//    ids: [],</span>\r\n<span data-reference=\"Объект с отдельными элементами, которые также являются объектами, ключь - их уникальный идентификатор\" class=\"conspect__reference\">i</span>   <span class=\"hljs-comment\">//    entities: {},</span>\r\n<span data-reference=\"Дополнительное поле\" class=\"conspect__reference\">i</span>   <span class=\"hljs-comment\">//    status: &quot;idle&quot;</span>\r\n   <span class=\"hljs-comment\">// }</span>\r\n\r\n</code></pre>\r\n\r\n",
         "title": "Исходное состояние"
      },
      "4-thunks": {
         "data": "<h2 class=\"conspect__header\">Thunk функции</h2>\r\n<p class=\"conspect__text\">\r\n   Thunk функции используются для выполнения асинхронных задач,\r\n   таких как запросы данных с сервера и т.д., и могут вызывать dispatch и getState в любое время. \r\n   При использовании, thunk функции не вызываются напрямую, а передаются методу store.dispatch().\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">todosThunks.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { createAsyncThunk } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@reduxjs/toolkit&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { client } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../../api/client&#x27;</span>;\r\n\r\n<span data-reference=\"createAsyncThunk генерирует thunk функцию\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> fetchTodos = <span class=\"hljs-title function_\">createAsyncThunk</span>(\r\n<span data-reference=\"Тип генерируемого события\" class=\"conspect__reference\">i</span>      <span class=\"hljs-string\">&#x27;todos/fetchTodos&#x27;</span>,\r\n<span data-reference=\"Асинхронная функция получающая данные, и возвращающая промис, в процессе выполнения которого генерируются события fetchTodos.pending/fulfilled/rejected (значения типа todos/fetchTodos/pending)\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">async</span> () =&gt; {\r\n         <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/fakeApi/todos&#x27;</span>);           \r\n<span data-reference=\"Возвращенное значение передается в action.payload, передаваемое в редьюсер fetchTodos.fullfilled\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">todos</span>;\r\n   });\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> saveNewTodo = <span class=\"hljs-title function_\">createAsyncThunk</span>(\r\n      <span class=\"hljs-string\">&#x27;todos/saveNewTodo&#x27;</span>,      \r\n<span data-reference=\"Асинхронной функции можно передать только один аргумент, для передачи нескольких можно использовать объект, вторым аргументом передается дополнительный объект с вспомогательными свойствами.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">async</span> (text, extraFunc) =&gt; {\r\n         <span class=\"hljs-keyword\">const</span> initialTodo = { text };\r\n         <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/fakeApi/todos&#x27;</span>, {\r\n            <span class=\"hljs-attr\">todo</span>: initialTodo,\r\n         });\r\n         <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">todo</span>;\r\n      }\r\n   );\r\n\r\n<span data-reference=\"Структура дополнительного объекта с вспомогательными свойствами, передаваемого вторым аргументом\" class=\"conspect__reference\">i</span>   <span class=\"hljs-comment\">// extraFunc = {</span>\r\n   <span class=\"hljs-comment\">//    dispatch: ƒ dispatch(),</span>\r\n   <span class=\"hljs-comment\">//    fulfillWithValue: ƒ (value, meta),</span>\r\n   <span class=\"hljs-comment\">//    getState: ƒ getState(),</span>\r\n   <span class=\"hljs-comment\">//    rejectWithValue: ƒ (value, meta),</span>\r\n   <span class=\"hljs-comment\">//    signal: AbortSignal {aborted: false, onabort: null},</span>\r\n   <span class=\"hljs-comment\">//    extra: undefined</span>\r\n   <span class=\"hljs-comment\">//    requestId: &quot;fwpsLzakgHXHocCwnR6vL&quot;</span>\r\n   <span class=\"hljs-comment\">// }</span>\r\n</code></pre>",
         "title": "Thunk функции"
      },
      "5-create-slices": {
         "data": "<h2 class=\"conspect__header\">Слайс редьюсеры</h2>\r\n<p class=\"conspect__text\">\r\n   Слайс редьюсеры используются для обработки \r\n   отправляемых событий, каждый из них работает\r\n   со своей частью состояния.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">todosSlice.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> { createSlice } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@reduxjs/toolkit&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { initialState, todosAdapter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./todosAdapter&#x27;</span>;  \r\n   <span class=\"hljs-keyword\">import</span> { fetchTodos, saveNewTodo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./todosThunks&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">const</span> todosSlice = <span class=\"hljs-title function_\">createSlice</span>({\r\n<span data-reference=\"Преффикс для генерируемых событий\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;todos&#x27;</span>,\r\n<span data-reference=\"Начальное состояние из адаптера, поэтому можно использовать вспомогательные ф-ции адаптера\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">initialState</span>: initialState,\r\n<span data-reference=\"Объект, в котором свойства - функции редьюсеры для обработки событий конкретного типа\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">reducers</span>: {\r\n<span data-reference=\"Редъюсер для обработки события 'todos/toggleTodo', аргументы - часть объекта состояния, и объект действия\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">toggleTodo</span>(<span class=\"hljs-params\">state, action</span>) {\r\n<span data-reference=\"При вызове создателя действия с одним аргументом, аргумент будет доступен в action.payload\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> id = action.<span class=\"hljs-property\">payload</span>;\r\n            <span class=\"hljs-keyword\">const</span> todo = state.<span class=\"hljs-property\">entities</span>[id];\r\n<span data-reference=\"Внутри createSlice можно изменять объект состояния, так как используется библиотека Immer\" class=\"conspect__reference\">i</span>            todo.<span class=\"hljs-property\">completed</span> = !todo.<span class=\"hljs-property\">completed</span>;\r\n         },\r\n\r\n<span data-reference=\"Вариант редъюсера с подготовкой объекта в action.payload\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">changeTodoColor</span>: {\r\n<span data-reference=\"Подготовка, создатель действия можно вызвать с несколькими аргументами, из которых будет сформирован объект action.payload\" class=\"conspect__reference\">i</span>            <span class=\"hljs-title function_\">prepare</span>(<span class=\"hljs-params\">todoId, color</span>) {\r\n               <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">payload</span>: { todoId, color } };\r\n            },\r\n<span data-reference=\"Непосредственно редъюсер, работающий с подготовленным action.payload\" class=\"conspect__reference\">i</span>            <span class=\"hljs-title function_\">reducer</span>(<span class=\"hljs-params\">state, action</span>) {\r\n               <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">todoId</span>: id, color } = action.<span class=\"hljs-property\">payload</span>;\r\n               state.<span class=\"hljs-property\">entities</span>[id].<span class=\"hljs-property\">color</span> = color;\r\n            },\r\n         },\r\n\r\n<span data-reference=\"Редьюсер для удаления записи, создаваемый вручную\" class=\"conspect__reference\">i</span>         <span class=\"hljs-comment\">// deleteTodo(state, action) {</span>\r\n         <span class=\"hljs-comment\">//    const id = action.payload;</span>\r\n         <span class=\"hljs-comment\">//    delete state.entities[id];</span>\r\n         <span class=\"hljs-comment\">// },</span>\r\n\r\n<span data-reference=\"Редьюсер для удаления записи, с использованием встроенной ф-ции адаптера\" class=\"conspect__reference\">i</span>         <span class=\"hljs-attr\">deleteTodo</span>: todosAdapter.<span class=\"hljs-property\">removeOne</span>,\r\n\r\n         <span class=\"hljs-title function_\">completeAllTodos</span>(<span class=\"hljs-params\">state, action</span>) {\r\n            <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(state.<span class=\"hljs-property\">entities</span>).<span class=\"hljs-title function_\">forEach</span>(\r\n               <span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =&gt;</span> (todo.<span class=\"hljs-property\">completed</span> = <span class=\"hljs-literal\">true</span>)\r\n            );\r\n         },\r\n\r\n<span data-reference=\"Редъюсер для удаления выполненных записей\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">clearCompletedTodos</span>(<span class=\"hljs-params\">state, action</span>) {\r\n<span data-reference=\"Обработка вручную\" class=\"conspect__reference\">i</span>            <span class=\"hljs-comment\">// Object.keys(state.entities).forEach((id) =&gt; {</span>\r\n            <span class=\"hljs-comment\">//    if (state.entities[id].completed) {</span>\r\n            <span class=\"hljs-comment\">//       delete state.entities[id];</span>\r\n            <span class=\"hljs-comment\">//    }</span>\r\n            <span class=\"hljs-comment\">// });</span>\r\n\r\n<span data-reference=\"С использованием вспомогательных ф-ций адаптера\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> idsForDeleting = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(state.<span class=\"hljs-property\">entities</span>)\r\n               .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =&gt;</span> todo.<span class=\"hljs-property\">completed</span>)\r\n               .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =&gt;</span> todo.<span class=\"hljs-property\">id</span>);\r\n            todosAdapter.<span class=\"hljs-title function_\">removeMany</span>(state, idsForDeleting);          \r\n         },\r\n      },\r\n<span data-reference=\"Добавление асинхронных редъюсеров из thunk функций\" class=\"conspect__reference\">i</span>      <span class=\"hljs-attr\">extraReducers</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">builder</span>) =&gt;</span> {\r\n         builder.<span class=\"hljs-title function_\">addCase</span>(\r\n<span data-reference=\"Тип события - по факту 'todos/fetchTodos/pending\" class=\"conspect__reference\">i</span>            fetchTodos.<span class=\"hljs-property\">pending</span>,\r\n<span data-reference=\"Соответствующая функция редъюсер\" class=\"conspect__reference\">i</span>            <span class=\"hljs-function\">(<span class=\"hljs-params\">state, actions</span>) =&gt;</span> {      \r\n               state.<span class=\"hljs-property\">status</span> = <span class=\"hljs-string\">&#x27;loading&#x27;</span>;\r\n            }\r\n         );\r\n         builder.<span class=\"hljs-title function_\">addCase</span>(\r\n            fetchTodos.<span class=\"hljs-property\">fulfilled</span>, \r\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> {\r\n<span data-reference=\"Добавление новых записей, полученных с сервера вручную\" class=\"conspect__reference\">i</span>               <span class=\"hljs-comment\">// const newEntities = {};</span>\r\n<span data-reference=\"Полученные с сервера данные находятся в action.payload\" class=\"conspect__reference\">i</span>               <span class=\"hljs-comment\">// action.payload.forEach((todo) =&gt; {</span>\r\n               <span class=\"hljs-comment\">//    newEntities[todo.id] = todo;</span>\r\n               <span class=\"hljs-comment\">// });</span>\r\n               <span class=\"hljs-comment\">// state.entities = newEntities;</span>\r\n\r\n<span data-reference=\"To же но с использованием вспомогательных ф-ций адаптера\" class=\"conspect__reference\">i</span>               todosAdapter.<span class=\"hljs-title function_\">setAll</span>(state, action.<span class=\"hljs-property\">payload</span>);\r\n               state.<span class=\"hljs-property\">status</span> = <span class=\"hljs-string\">&#x27;idle&#x27;</span>;\r\n            }\r\n         );\r\n\r\n         builder.<span class=\"hljs-title function_\">addCase</span>(\r\n            saveNewTodo.<span class=\"hljs-property\">pending</span>, \r\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> {\r\n               state.<span class=\"hljs-property\">status</span> = <span class=\"hljs-string\">&#x27;loading&#x27;</span>;\r\n            }\r\n         );\r\n\r\n         <span class=\"hljs-comment\">// builder.addCase(</span>\r\n<span data-reference=\"Добавление новой звписи в состояние, обработанной сервером вручную\" class=\"conspect__reference\">i</span>         <span class=\"hljs-comment\">//    saveNewTodo.fulfilled,</span>\r\n         <span class=\"hljs-comment\">//    (state, action) =&gt; {</span>\r\n         <span class=\"hljs-comment\">//       const todo = action.payload;</span>\r\n         <span class=\"hljs-comment\">//       state.entities[todo.id] = todo;</span>\r\n         <span class=\"hljs-comment\">//       state.status = &#x27;idle&#x27;;</span>\r\n         <span class=\"hljs-comment\">//    }</span>\r\n         <span class=\"hljs-comment\">// );</span>\r\n\r\n         builder.<span class=\"hljs-title function_\">addCase</span>(\r\n<span data-reference=\"То же, но с использованием встроенной ф-ции адаптера\" class=\"conspect__reference\">i</span>            saveNewTodo.<span class=\"hljs-property\">fulfilled</span>,\r\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> {\r\n               todosAdapter.<span class=\"hljs-title function_\">addOne</span>(state, action.<span class=\"hljs-property\">payload</span>);\r\n               state.<span class=\"hljs-property\">status</span> = <span class=\"hljs-string\">&#x27;idle&#x27;</span>;\r\n            }\r\n         );\r\n      },\r\n   });\r\n\r\n<span data-reference=\"Экспорт сгенерированных функций для создания объектов действий\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> {\r\n      toggleTodo,\r\n      changeTodoColor,\r\n      deleteTodo,\r\n      completeAllTodos,\r\n      clearCompletedTodos,\r\n   } = todosSlice.<span class=\"hljs-property\">actions</span>;\r\n\r\n<span data-reference=\"Экспорт слайс редъюсера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> todosSlice.<span class=\"hljs-property\">reducer</span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">filterSlice.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">const</span> filtersSlice = <span class=\"hljs-title function_\">createSlice</span>({\r\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;filters&#x27;</span>,\r\n      <span class=\"hljs-attr\">initialState</span>: initialFiltersState,                       \r\n      <span class=\"hljs-attr\">reducers</span>: {\r\n<span data-reference=\"Обработка события изменения статуса\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">changeFilterStatus</span>(<span class=\"hljs-params\">state, action</span>) {\r\n            state.<span class=\"hljs-property\">status</span> = action.<span class=\"hljs-property\">payload</span>;\r\n         },\r\n<span data-reference=\"Обработка события изменения цветовых фильтров\" class=\"conspect__reference\">i</span>         <span class=\"hljs-title function_\">changeFilterColor</span>(<span class=\"hljs-params\">state, action</span>) {\r\n            <span class=\"hljs-keyword\">const</span> color = action.<span class=\"hljs-property\">payload</span>;\r\n            <span class=\"hljs-keyword\">const</span> colors = state.<span class=\"hljs-property\">colors</span>;\r\n<span data-reference=\"Определить, присутствует ли цвет в массиве фильтров\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">const</span> contains = colors.<span class=\"hljs-title function_\">includes</span>(color);\r\n   \r\n<span data-reference=\"Если от там есть, удалить его\" class=\"conspect__reference\">i</span>            <span class=\"hljs-keyword\">if</span> (contains) {\r\n               state.<span class=\"hljs-property\">colors</span> = colors.<span class=\"hljs-title function_\">filter</span>(\r\n                  <span class=\"hljs-function\">(<span class=\"hljs-params\">existingColor</span>) =&gt;</span> existingColor !== color\r\n               );\r\n<span data-reference=\"Если его там нет, добавить\" class=\"conspect__reference\">i</span>            } <span class=\"hljs-keyword\">else</span> {\r\n               colors.<span class=\"hljs-title function_\">push</span>(color);\r\n            }\r\n         },\r\n      },\r\n   });\r\n</code></pre>\r\n\r\n<p class=\"conspect__text\">\r\n   Справка по  <a href=\"https://redux-toolkit.js.org/api/createEntityAdapter#return-value\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      вспомогательным функциям адаптера\r\n   </a>.\r\n</p>",
         "title": "Слайс редьюсеры"
      },
      "6-create-store": {
         "data": "<h2 class=\"conspect__header\">Хранилище</h2>\r\n<p class=\"conspect__text\">\r\n   Хранилище создается с использованием функции \r\n   configureStore, после чего подключается к \r\n   приложению в компоненте App.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">store.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> todosReducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../reducers/todos/todosSlice&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> filtersReducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../reducers/filters/filterSlice&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { configureStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@reduxjs/toolkit&#x27;</span>;\r\n\r\n<span data-reference=\"Создание хранилища\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">configureStore</span>({\r\n      <span class=\"hljs-attr\">reducer</span>: {\r\n         <span class=\"hljs-attr\">todos</span>: todosReducer,\r\n         <span class=\"hljs-attr\">filters</span>: filtersReducer,\r\n      },\r\n   });\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">index.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>DOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./index.css&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./redux/store/store&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./api/server&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Provider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { fetchTodos } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./redux/reducers/todos/todosThunks&#x27;</span>;\r\n\r\n<span data-reference=\"Отправка действия для загрузки начальных данных с сервера с использованием thunk функции\" class=\"conspect__reference\">i</span>   store.<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">fetchTodos</span>());\r\n\r\n   <span class=\"hljs-title class_\">React</span>DOM.<span class=\"hljs-title function_\">render</span>(\r\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">React.StrictMode</span>&gt;</span>\r\n<span data-reference=\"Подключение хранилища к приложению\" class=\"conspect__reference\">i</span>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.StrictMode</span>&gt;</span></span>,\r\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>)\r\n   );\r\n</code></pre>\r\n",
         "title": "Хранилище"
      },
      "7-selectors": {
         "data": "<h2 class=\"conspect__header\">Селекторы</h2>\r\n<p class=\"conspect__text\">\r\n   Селекторы используются для извлечения данных\r\n   из хранилища, внутри React компонентов. Мемоизированные селекторы \r\n   полезны только когда вы получаете дополнительные значения из \r\n   исходных данных (map, filter возвращающие новые массивы каждый раз и т.д.). \r\n   Если вы только просматриваете и возвращаете существующее значение, \r\n   вы можете оставить селектор как простую функцию.\r\n</p>\r\n\r\n<p class=\"conspect__text\">\r\n   Селектор - это функция, которая принимает в качестве аргумента \r\n   все состояние хранилища Redux, считывает некоторое значение из \r\n   состояния и возвращает этот результат.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">todosSelectors.js</h3>\r\n<pre><code>\r\n<span data-reference=\"Функция используется для создания мемоизированных селекторов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { createSelector } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@reduxjs/toolkit&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { todosAdapter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./todosAdapter&#x27;</span>;\r\n\r\n<span data-reference=\"Получение встроенных селекторов из адаптера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> {\r\n      <span class=\"hljs-attr\">selectAll</span>: selectTodos,                   \r\n      <span class=\"hljs-attr\">selectById</span>: selectTodoById \r\n   } = todosAdapter.<span class=\"hljs-title function_\">getSelectors</span>(\r\n<span data-reference=\"Функция для извлечения начального среза, содержащего нормализованное состояние\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">todos</span>\r\n   );\r\n\r\n<span data-reference=\"Функция возвращает мемоизированный селектор, который изменяется только при изменении данных входящих селекторов, предотвращая дополнительные рендеры компонентов\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> selectTodoIds = <span class=\"hljs-title function_\">createSelector</span>(\r\n<span data-reference=\"Входящий селектор\" class=\"conspect__reference\">i</span>      selectTodos,\r\n<span data-reference=\"Исходящий селектор, принимает данные возвращенные входящими селекторами\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">(<span class=\"hljs-params\">todos</span>) =&gt;</span> todos.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =&gt;</span> todo.<span class=\"hljs-property\">id</span>)\r\n   );\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> selectFilteredTodos = <span class=\"hljs-title function_\">createSelector</span>(\r\n<span data-reference=\"Входящий селектор\" class=\"conspect__reference\">i</span>      selectTodos,\r\n<span data-reference=\"Входящий селектор\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">filters</span>,\r\n<span data-reference=\"Исходящий селектор, принимающий аргументы от предыдущих селекторов\" class=\"conspect__reference\">i</span>      <span class=\"hljs-function\">(<span class=\"hljs-params\">todos, filters</span>) =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> { status, colors } = filters;\r\n         <span class=\"hljs-keyword\">const</span> showAll = status === <span class=\"hljs-string\">&#x27;all&#x27;</span>;\r\n\r\n         <span class=\"hljs-keyword\">if</span> (colors.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span> &amp;&amp; showAll) <span class=\"hljs-keyword\">return</span> todos;\r\n\r\n         <span class=\"hljs-keyword\">const</span> showcompleted = status === <span class=\"hljs-string\">&#x27;completed&#x27;</span>;\r\n         <span class=\"hljs-keyword\">return</span> todos.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =&gt;</span> {\r\n            <span class=\"hljs-keyword\">const</span> statusControl = showAll || todo.<span class=\"hljs-property\">completed</span> === showcompleted;\r\n            <span class=\"hljs-keyword\">const</span> colorControl =\r\n               colors.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span> || colors.<span class=\"hljs-title function_\">includes</span>(todo.<span class=\"hljs-property\">color</span>);\r\n            <span class=\"hljs-keyword\">return</span> statusControl &amp;&amp; colorControl;\r\n         });\r\n      }\r\n   );\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> selectFilteredTodoIds = <span class=\"hljs-title function_\">createSelector</span>(\r\n      selectFilteredTodos,\r\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">filteredTodos</span>) =&gt;</span> filteredTodos.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =&gt;</span> todo.<span class=\"hljs-property\">id</span>)\r\n   );\r\n\r\n<span data-reference=\"Простой селектор, не использующий map, filter и т.д. не нужно мемоизировать\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectStatus</span> = (<span class=\"hljs-params\">state</span>) =&gt; state.<span class=\"hljs-property\">todos</span>.<span class=\"hljs-property\">status</span>;\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> remainingTodos = <span class=\"hljs-title function_\">createSelector</span>(\r\n      selectFilteredTodos,\r\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">filteredTodos</span>) =&gt;</span> filteredTodos.<span class=\"hljs-property\">length</span>\r\n   );\r\n\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">filtersSelectors.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectColors</span> = (<span class=\"hljs-params\">state</span>) =&gt; state.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">colors</span>;\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectStatus</span> = (<span class=\"hljs-params\">state</span>) =&gt; state.<span class=\"hljs-property\">filters</span>.<span class=\"hljs-property\">status</span>;\r\n</code></pre>",
         "title": "Селекторы"
      },
      "8-hooks": {
         "data": "<h2 class=\"conspect__header\">Хуки в компонентах</h2>\r\n<p class=\"conspect__text\">\r\n   Для взаимодействия компонентов React со структурой\r\n   Redux используются хуки из библиотеки react-redux.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">Header.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { useDispatch, useSelector } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>;\r\n<span data-reference=\"Импорт селектора для получения статуса\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { selectStatus } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../redux/reducers/todos/todosSelectors&#x27;</span>;\r\n<span data-reference=\"Импорт асинхроной thunk функции для отправки данных на сервер\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { saveNewTodo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../redux/reducers/todos/todosThunks&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Header</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> [text, setText] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n<span data-reference=\"Хук вызывает функцию селектора и возвращает ее результат, подписывает компонент на изменение store и повторно запускает селектор каждый раз при отправке любого действия. Если результат селектора изменяется, useSelector вызывает повторный рендер компонента.\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> loadingStatus = <span class=\"hljs-title function_\">useSelector</span>(selectStatus);\r\n<span data-reference=\"Хук возвращает оригинальную функцию store.dispatch, которую можно вызвать внутри компонента\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>();\r\n\r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleTextChange</span> = (<span class=\"hljs-params\">e</span>) =&gt; <span class=\"hljs-title function_\">setText</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\r\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleKeyDown</span> = (<span class=\"hljs-params\">e</span>) =&gt; {\r\n         <span class=\"hljs-keyword\">const</span> trimmedText = text.<span class=\"hljs-title function_\">trim</span>();\r\n         <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">key</span> === <span class=\"hljs-string\">&#x27;Enter&#x27;</span> &amp;&amp; trimmedText) {\r\n<span data-reference=\"Отправка действия с использованием thunk функции\" class=\"conspect__reference\">i</span>            <span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">saveNewTodo</span>(trimmedText));\r\n            <span class=\"hljs-title function_\">setText</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\r\n         }\r\n      };\r\n\r\n<span data-reference=\"Использование данных полученных из селектора\" class=\"conspect__reference\">i</span>      <span class=\"hljs-keyword\">const</span> isLoading = loadingStatus === <span class=\"hljs-string\">&#x27;loading&#x27;</span>;\r\n\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\r\n               <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\r\n               <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{isLoading</span> ? &#x27;<span class=\"hljs-attr\">Loading...</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">What</span> <span class=\"hljs-attr\">needs</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">be</span> <span class=\"hljs-attr\">done...</span>?&#x27;}\r\n               <span class=\"hljs-attr\">autoFocus</span>=<span class=\"hljs-string\">{true}</span>\r\n               <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{text}</span>\r\n               <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextChange}</span>\r\n               <span class=\"hljs-attr\">onKeyDown</span>=<span class=\"hljs-string\">{handleKeyDown}</span>\r\n            /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Header</span>;\r\n</code></pre>\r\n\r\n<h3 class=\"conspect__subheader\">Footer.js</h3>\r\n<pre><code>\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">RemainingTodos</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./RemainingTodos&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">StatusFilter</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./StatusFilter&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ColorFilters</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ColorFilters&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { useDispatch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-redux&#x27;</span>;\r\n   <span class=\"hljs-keyword\">import</span> { \r\n      clearCompletedTodos,\r\n      completeAllTodos,\r\n   } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../redux/reducers/todos/todosSlice&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Footer</span>(<span class=\"hljs-params\"></span>) {\r\n      <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>();\r\n      <span class=\"hljs-keyword\">return</span> (\r\n         <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;actions&quot;</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>Actions:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\r\n                  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span>\r\n<span data-reference=\"Отправка действия с использованием функции для создания объекта действий\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> dispatch(completeAllTodos())}\r\n               &gt;\r\n                  Mark all completed\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n               <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\r\n                  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span>\r\n<span data-reference=\"Отправка действия с использованием функции для создания объекта действий\" class=\"conspect__reference\">i</span>                  <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> dispatch(clearCompletedTodos())}\r\n               &gt;\r\n                  Clear completed\r\n               <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RemainingTodos</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StatusFilter</span> /&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorFilters</span> /&gt;</span>\r\n         <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span>\r\n      );\r\n   }\r\n\r\n   <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Footer</span>;\r\n</code></pre>\r\n\r\n",
         "title": "Хуки в компонентах"
      },
      "9-links": {
         "data": "<h2 class=\"conspect__header\">\r\n   Полезные ссылки\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      <a href=\"https://redux.js.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Redux\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://redux.js.org/tutorials/fundamentals/part-1-overview\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Руководство Redux Fundamentals\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://redux-toolkit.js.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Redux Toolkit\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://react-redux.js.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         React Redux\r\n      </a>\r\n   </li>\r\n</ul>",
         "title": "Полезные ссылки"
      },
      "1-overview": {
         "data": "<h2 class=\"conspect__header\">\r\n   Обзор Redux\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Redux - библиотека для управления глобальным состоянием приложения:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Redux обычно используется с библиотекой react-redux \r\n            для интеграции технологий Redux и React.\r\n         </li>\r\n         <li>\r\n            Основной путь написания логики redux приложения - \r\n            использование библиотеки redux-toolkit\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Redux использует несколько типов кода:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Actions, или действия - простые объекты, содержащие \r\n            поле type, и описывающие, что происходит в приложении.\r\n         </li>\r\n         <li>\r\n            Reducers, или редьюсеры - функции, вычисляющие новое\r\n            состояние на основе объектов действий и исходного состояния.\r\n         </li>\r\n         <li>\r\n            Store, или хранилище - содержит текущее состояние, и \r\n            запускает корневой редьюсер при получении объекта действия.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Обзор Redux"
      },
      "2-data-flow": {
         "data": "<h2 class=\"conspect__header\">\r\n   Концепции и поток данных\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Основные принцыпы Redux:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Глобальное состояние приложения хранится в хранилище.\r\n         </li>\r\n         <li>\r\n            Глобальное состояние приложения доступно только \r\n            для чтения во всем приложении.\r\n         </li>\r\n         <li>\r\n            Функция редьюсер используется для обновления состояние,\r\n            в ответ на отправку действия.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Redux использует структуру \r\n      <span class=\"conspect__marked-text\">\r\n         однонаправленного потока данных\r\n      </span>:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Состояние описывает состояние всего приложения\r\n            в данный момент времени, а графический интерфейс\r\n            рендерит данные текущего состояния.\r\n         </li>\r\n         <li>\r\n            Когда что либо происходит в приложении:\r\n            <ul class=\"conspect__list\">\r\n               <li>Графический интерфейс отправляет событие.</li>\r\n               <li>Хранилище запускает редьюсер и обновляет состояние.</li>\r\n               <li>\r\n                  Хранилище уведомляет компоненты графического интерфейса\r\n                  об изменении состояния.\r\n               </li>\r\n            </ul>\r\n         </li>\r\n         <li>\r\n            Графический интерфейс производит повторный рендер, \r\n            на основе обновленного состояния.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Концепции и поток данных"
      },
      "3-redux-elements": {
         "data": "<h2 class=\"conspect__header\">\r\n   Элементы Redux приложения\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Приложение Redux использует простые JS обьекты, \r\n      массивы и примитивные значения как элементы состояния.\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Корневое состояне должно быть простым объектом JS.\r\n         </li>\r\n         <li>\r\n            Состояние должно содержать <span class=\"conspect__marked-text\">наименьший</span> объем данных, \r\n            необходимых для работы приложения.\r\n         </li>\r\n         <li>\r\n            Классы, промисы, функции и другие сложные значения \r\n            не должны использоваться в состоянии Redux.\r\n         </li>\r\n         <li>\r\n            Редукторы должны быть чистыми функциями, и не должны \r\n            создавать случайные значения, такие как Math.random или Date.now.\r\n         </li>\r\n         <li>\r\n            Рядом с глобальным состоянием Redux можно использовать \r\n            локальные состояния компонентов React, которых не \r\n            будет в глобальном состоянии.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Действия - это простые объекты с полем type, описывающим, что произошло.\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Поле action.type должно быть читаемой строкой и обычно \r\n            записывается как 'feature/eventName'.\r\n         </li>\r\n         <li>\r\n            Действия могут содержать другие значения, \r\n            которые обычно хранятся в поле action.payload.\r\n         </li>\r\n         <li>\r\n            Действия должны содержать наименьший объем данных, \r\n            необходимых для описания того, что произошло.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Редукторы - это функции, которые выглядят \r\n      как (state, action) => newState, и следуют правилам:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Вычислять новое состояние только на основе \r\n            аргументов состояния и действия.\r\n         </li>\r\n         <li>\r\n            Никогда не изменяют существующее состояние\r\n             - всегда работают с его копией.\r\n         </li>\r\n         <li>\r\n            Не имеют никаких побочных эффектов, таких как \r\n            вызовы AJAX или асинхронная логика.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Редукторы следует разделять, чтобы их было легче читать:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Редукторы обычно разделяются на основе ключей \r\n            состояния верхнего уровня используя фрагменты состояния.\r\n         </li>\r\n         <li>\r\n            Редукторы обычно находятся в отдельных файлах keySlice.js, \r\n            внутри папок features.\r\n         </li>\r\n         <li>\r\n            Сборку редукторов в корневой редуктор можно осуществлять \r\n            с помощью функции combineReducers.\r\n         </li>\r\n         <li>\r\n            Имена ключей, передаваемые для в combineReducers, \r\n            определяют ключи объекта состояния верхнего уровня.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Элементы Redux приложения"
      },
      "4-store": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хранилище\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Приложения Redux всегда имеют единственное хранилище:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Хранилища создаются с помощью функции createStore.\r\n         </li>\r\n         <li>\r\n            В хранилище может быть только одина корневая\r\n            функция редьюсер.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      У хранилища есть три основных метода:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            getState возвращает текущее состояние.\r\n         </li>\r\n         <li>\r\n            dispatch отправляет действия функции редьюсеру\r\n            для обновления состояния.\r\n         </li>\r\n         <li>\r\n            subscribe принимает колбэк, оповещающий\r\n            слушателя, который запускается каждый раз, \r\n            когда отправляется действие.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Enhancers позволяют нам настраивать магазин при его создании:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Энхенсеры оборачивают хранилище и могут \r\n            переопределять его методы.\r\n         </li>\r\n         <li>\r\n            createStore принимает в качестве аргумента \r\n            только один энхенсер.\r\n         </li>\r\n         <li>\r\n            Несколько энхенсеров могут быть объединены \r\n            вместе с помощью Compose API.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Middleware - это основной способ настройки хранилища:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Добавляется с помощью энхенсера applyMiddleware.\r\n         </li>\r\n         <li>\r\n            Представляет собой три вложенные друг в друга функции.\r\n         </li>\r\n         <li>\r\n            Запускается каждый раз при отправке действия.\r\n         </li>\r\n         <li>\r\n            Может выполнять побочные эффекты.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Расширение Redux DevTools позволяет прозрачно \r\n      наблюдать за состоянием приложения и его изменениями:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Расширение устанавливается в браузере.\r\n         </li>\r\n         <li>\r\n            В хранилище необходимо добавить энхенсер DevTools, \r\n            используя composeWithDevTools вместо compose при \r\n            объединении энхенсеров.\r\n         </li>\r\n         <li>\r\n            DevTools показывает отправленные действия и \r\n            изменения состояния с течением времени.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Хранилище"
      },
      "5-react": {
         "data": "<h2 class=\"conspect__header\">\r\n   Графический интерфейс\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Redux можно использовать с любым графическим интерфейсом,\r\n      так как интерфейс просто подписывается на обновление состояния,\r\n      и перерисовывает себя при его изменении.\r\n   </li>\r\n   <li>\r\n      React-Redux это официальная библиотека интерфейса Redux для React,\r\n      она устаноавливается отдельно от Redux.\r\n   </li>\r\n   <li>\r\n      Хук useSelector позволяет компонентам React получать данные из хранилища:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            useSelector вызывает переданную функцию-селектор и возвращает результат.\r\n         </li>\r\n         <li>\r\n            Функция-селектор принимает все состояние хранилища целиком, \r\n            в качестве аргумента и возвращает значение, полученное из состояния.\r\n         </li>\r\n         <li>\r\n            useSelector подписывается на обновления хранилища,\r\n            и повторно запускает селектор каждый раз при отправке действия.\r\n         </li>\r\n         <li>\r\n            Всякий раз, когда результат селектора изменяется, \r\n            useSelector вызывает повторный рендер компонента с новыми данными.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Хук useDispatch позволяет компонентам React отправлять действия в хранилище:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            useDispatch возвращает фактическую функцию store.dispatch\r\n         </li>\r\n         <li>\r\n            Можно вызывать dispatch(action) внутри ваших компонентов, для\r\n            отправки действий в хранилище.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Компонент Provider делает хранилище доступным для других компонентов React,\r\n      для этого поместите компонент App в компонент Provider, и передайте ему\r\n      хранилище.\r\n   </li>\r\n</ul>\r\n",
         "title": "Графический интерфейс"
      },
      "6-data-fetching": {
         "data": "<h2 class=\"conspect__header\">\r\n   Загрузка данных\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Код middleware был разработан для выполнения логики с побочными эффектами.\r\n      Побочные эффекты - это изменение состояния, поведения вне функции, \r\n      например вызовы AJAX, изменение аргументов функции или генерацию случайных значений.\r\n   </li>\r\n   <li>\r\n      Middleware добавляет дополнительный шаг к стандартному потоку данных Redux:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Может перехватывать значения, передаваемые через dispatch\r\n         </li>\r\n         <li>\r\n            Имеет доступ к dispatch и getState, поэтому они может отправлять \r\n            другие действия, как часть асинхронной логики.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Redux Thunk позволяет передавать функции в dispatch:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Thunk функции передаваемые в dispatch позволяют нам \r\n            заранее писать асинхронную логику, не зная, какое хранилище \r\n            Redux используется.\r\n         </li>\r\n         <li>\r\n            Thunk функция получает dispatch и getState в качестве аргументов \r\n            и может отправлять действия, например при получении данных по сети.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Загрузка данных"
      },
      "7-redux-patterns": {
         "data": "<h2 class=\"conspect__header\">\r\n   Стандартные паттерны\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Функции для создания действий, инкапсулируют подготовку объектов \r\n      действий и thunk функций. Они могут принимать аргументы и содержать \r\n      логику настройки, а также возвращать конечный объект действия или thunk функцию.\r\n   </li>\r\n   <li>\r\n      Мемоизированные селекторы помогают повысить производительность приложения:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Библиотека Reselect имеет функцию createSelector, \r\n            которая генерирует мемоизированные селекторы.\r\n         </li>\r\n         <li>\r\n            Мемоизированные селекторы возвращают одну и ту \r\n            же ссылку на результат при одинаковых входных данных.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Статус запроса должен храниться в виде текстового значения, а не логического. \r\n      Использование текста, например 'idle' и 'loading', помогает последовательно \r\n      отслеживать изменение статуса.\r\n   </li>\r\n   <li>\r\n      Стандартные действия Flux - это общепринятое соглашение об организации \r\n      объектов действий. Действия используют поле payload для данных, \r\n      поле meta для дополнительных описаний и error для ошибок.\r\n   </li>\r\n   <li>\r\n      Нормализованное состояние упрощает поиск записей по идентификатору. \r\n      Нормализованные данные хранятся в объектах, а не в массивах, \r\n      с идентификаторами элементов в качестве ключей.\r\n   </li>\r\n   <li>\r\n      Thunk функции могут возвращать промисы из метода dispatch.\r\n      Компоненты могут ждать завершения асинхронных функций, \r\n      а затем выполнить дополнительную работу.\r\n   </li>\r\n</ul>",
         "title": "Стандартные паттерны"
      },
      "8-redux-toolkit": {
         "data": "<h2 class=\"conspect__header\">\r\n   Redux Toolkit\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Redux Toolkit (RTK) - стандартный способ написания логики Redux:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            RTK включает API, которые упрощают большую часть кода Redux.\r\n         </li>\r\n         <li>\r\n            RTK оборачивает ядро ​​Redux и включает другие полезные пакеты.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция configureStore настраивает хранилище Redux с \r\n      оптимальными значениями по умолчанию:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Автоматически комбинирует фрагменты редьюсеров для создания корневого редьюсера.\r\n         </li>\r\n         <li>\r\n            Автоматически настраивает расширение Redux DevTools и промежуточное ПО для отладки.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция createSlice упрощает написание действий и фрагментов редьюсеров:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Автоматически генерирует функции для создания действий \r\n            на основе имен фрагментов и редукторов.\r\n         </li>\r\n         <li>\r\n            Позволяет редьюсерам мутировать состояние внутри \r\n            createSlice с помощью библиотеки Immer.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция createAsyncThunk генерирует thunk функции для асинхронных запросов:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Автоматически генерирует thunk функцию + функцию создатель \r\n            действия для состояний pending/fulfilled/rejected.\r\n         </li>\r\n         <li>\r\n            Отправка thunk функции в dispatch запускает асинхронную функцию \r\n            для создания payload, и отправляет новые действия по мере выполнения\r\n            асинхронной функции.\r\n         </li>\r\n         <li>\r\n            Thunk функции добавляются к редьюсеру в методе createSlice,\r\n            в поле extraReducers объекта конфигурации.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция createEntityAdapter генерирует редьюсеры и селекторы \r\n      для работы с нормализованным состоянием:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Генерирует функции редьюсеры для общих задач, таких как \r\n            добавление, обновление, удаление элементов.\r\n         </li>\r\n         <li>\r\n            Создает мемоизированные селекторы для selectAll и selectById\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Redux Toolkit"
      },
      "1-testing": {
         "data": "<h2 class=\"conspect__header\">Тестирование</h2>\r\n<p class=\"conspect__text\">\r\n   Тестирование логики redux происходит через\r\n   написание тестов, все дополнительные библиотеки\r\n   для тестирования уже установлены.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\"></h3>\r\n<pre><code>\r\n<span data-reference=\"Импорт функций для создания действий\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./todosSlice&#x27;</span>;\r\n<span data-reference=\"Импорт функции редьюсера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> reducer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./todosSlice&#x27;</span>;\r\n<span data-reference=\"Импорт начального состояния\" class=\"conspect__reference\">i</span>   <span class=\"hljs-keyword\">import</span> { initialTodoState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./initiaTodosState&#x27;</span>;\r\n\r\n   <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">&#x27;example&#x27;</span>;\r\n   <span class=\"hljs-keyword\">const</span> todoId = <span class=\"hljs-number\">8</span>;\r\n   <span class=\"hljs-keyword\">const</span> completed = <span class=\"hljs-literal\">false</span>;\r\n   <span class=\"hljs-keyword\">const</span> todo = { <span class=\"hljs-attr\">id</span>: todoId, text, completed };\r\n   <span class=\"hljs-keyword\">const</span> color = <span class=\"hljs-string\">&#x27;red&#x27;</span>;\r\n   <span class=\"hljs-keyword\">const</span> newEntities = [\r\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;example one&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;example two&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> },\r\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;example three&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n   ];\r\n\r\n<span data-reference=\"Тестирование функций для создания действий\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing actions creators:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing addTodo:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/addTodo&#x27;</span>, <span class=\"hljs-attr\">payload</span>: todo };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">addTodo</span>(todo)).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing toggleTodo:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/toggleTodo&#x27;</span>, <span class=\"hljs-attr\">payload</span>: todoId };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">toggleTodo</span>(todoId)).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing changeTodoColor:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = {\r\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/changeTodoColor&#x27;</span>,\r\n            <span class=\"hljs-attr\">payload</span>: { color, todoId },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">changeTodoColor</span>(todoId, color)).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing deleteTodo:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/deleteTodo&#x27;</span>, <span class=\"hljs-attr\">payload</span>: todoId };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">deleteTodo</span>(todoId)).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing completeAllTodos:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/completeAllTodos&#x27;</span> };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">completeAllTodos</span>()).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing clearCompletedTodos:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/clearCompletedTodos&#x27;</span> };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">clearCompletedTodos</span>()).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing setLoadingTodos:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/setLoadingTodos&#x27;</span> };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">setLoadingTodos</span>()).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing todosIsLoaded:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultAction = {\r\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;todos/todosIsLoaded&#x27;</span>,\r\n            <span class=\"hljs-attr\">payload</span>: initialTodoState,\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(a.<span class=\"hljs-title function_\">todosIsLoaded</span>(initialTodoState)).<span class=\"hljs-title function_\">toEqual</span>(resultAction);\r\n      });\r\n   });\r\n\r\n<span data-reference=\"Тестирование функции редьюсера\" class=\"conspect__reference\">i</span>   <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing reducer:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with addTodo:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span>,\r\n               },\r\n               <span class=\"hljs-number\">2</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>,\r\n               },\r\n               [todoId]: todo,\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">addTodo</span>(todo))).<span class=\"hljs-title function_\">toEqual</span>(resultState);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with toggleTodo:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span>,\r\n               },\r\n               <span class=\"hljs-number\">2</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>,\r\n               },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">toggleTodo</span>(<span class=\"hljs-number\">1</span>))).<span class=\"hljs-title function_\">toEqual</span>(resultState);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with changeTodoColor:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;red&#x27;</span>,\r\n               },\r\n               <span class=\"hljs-number\">2</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>,\r\n               },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">changeTodoColor</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;red&#x27;</span>))).<span class=\"hljs-title function_\">toEqual</span>(\r\n            resultState\r\n         );\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with deleteTodo:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span>,\r\n               },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">deleteTodo</span>(<span class=\"hljs-number\">2</span>))).<span class=\"hljs-title function_\">toEqual</span>(resultState);\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with completeAllTodos:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span>,\r\n               },\r\n               <span class=\"hljs-number\">2</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>,\r\n               },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">completeAllTodos</span>())).<span class=\"hljs-title function_\">toEqual</span>(\r\n            resultState\r\n         );\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with clearCompletedTodos:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span>,\r\n               },\r\n               <span class=\"hljs-number\">2</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>,\r\n               },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">clearCompletedTodos</span>())).<span class=\"hljs-title function_\">toEqual</span>(\r\n            resultState\r\n         );\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with setLoadingTodos:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;loading&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn React&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Redux&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;purple&#x27;</span>,\r\n               },\r\n               <span class=\"hljs-number\">2</span>: {\r\n                  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\r\n                  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build some fun!&#x27;</span>,\r\n                  <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span>,\r\n                  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>,\r\n               },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">setLoadingTodos</span>())).<span class=\"hljs-title function_\">toEqual</span>(\r\n            resultState\r\n         );\r\n      });\r\n\r\n      <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Testing reducer with todosIsLoaded:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n         <span class=\"hljs-keyword\">const</span> resultState = {\r\n            <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;idle&#x27;</span>,\r\n            <span class=\"hljs-attr\">entities</span>: {\r\n               <span class=\"hljs-number\">0</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;example one&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n               <span class=\"hljs-number\">1</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;example two&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">false</span> },\r\n               <span class=\"hljs-number\">2</span>: { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;example three&#x27;</span>, <span class=\"hljs-attr\">completed</span>: <span class=\"hljs-literal\">true</span> },\r\n            },\r\n         };\r\n         <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">reducer</span>(initialTodoState, a.<span class=\"hljs-title function_\">todosIsLoaded</span>(newEntities))).<span class=\"hljs-title function_\">toEqual</span>(\r\n            resultState\r\n         );\r\n      });   \r\n   });\r\n\r\n</code></pre>",
         "title": "Тестирование"
      }
   },
   "keys": [
      {
         "sectionTitle": "Основы",
         "pages": [
            "1-basics",
            "2-initial-data",
            "3-initia-state",
            "4-thunks",
            "5-create-slices",
            "6-create-store",
            "7-selectors",
            "8-hooks",
            "9-links"
         ]
      },
      {
         "sectionTitle": "Руководство Redux Fundamentals",
         "pages": [
            "1-overview",
            "2-data-flow",
            "3-redux-elements",
            "4-store",
            "5-react",
            "6-data-fetching",
            "7-redux-patterns",
            "8-redux-toolkit"
         ]
      },
      {
         "sectionTitle": "Дополнительно",
         "pages": [
            "1-testing"
         ]
      }
   ]
}