{
   "pages": {
      "1-basics": {
         "data": "<h2 class=\"conspect__header\">\r\n   Основы работы с Redux\r\n</h2>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Шаблон CRA:\r\n</h3>\r\n<p class=\"conspect__text\">\r\n   Использование готового шаблона CRA с Redux:<br>\r\n   <span class=\"conspect__marked-text\">\r\n      npx create-react-app my-app --template redux\r\n   </span><br>\r\n   <span class=\"conspect__marked-text\">\r\n      npx create-react-app my-app --template redux-typescript\r\n   </span><br>\r\n   <a href=\"https://github.com/reduxjs/cra-template-redux\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      репозиторий шаблона \r\n   </a>.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Этапы создания Redux приложения:\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Порядок действий: <a href=\"https://redux.js.org/tutorials/quick-start\" class=\"conspect__outside-link\" target=\"_blank\">\r\n      ручная настройка приложения redux\r\n   </a>      \r\n</p>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Создать объекты исходного состояния для различных частей приложения,\r\n      если структура состояния представляет собой множество элементов со\r\n      свойством id, можно использовать функцию createEntityAdapter, \r\n      изменяющую исходное состояние и генерурующую селекторы.\r\n   </li>\r\n   <li>\r\n      Создать слайс редьюсеры используя функцию createSlice, передав ей\r\n      начальное состояние, имя и функции редьюсеры. \r\n      Внутри функций редьюсеров можно изменять состояние, так как используется\r\n      библиотека Immer. Если был использован createEntityAdapter, можно\r\n      использовать функции хэлперы для создания функций редьюсеров.\r\n      Экспортировать сгенерированные функции создания действий\r\n      и слайс редьюсер.\r\n   </li>\r\n   <li>\r\n      Создать хранилище приложения используя функцию configureStore, которая\r\n      принимает объект конфигурации с функциями редьюсерами.\r\n   </li>\r\n   <li>\r\n      Подключить хранилище к приложению, для чего обернуть App в компонент \r\n      Provider и передать ему хранилище.\r\n   </li>\r\n   <li>\r\n      Создать селекторы для выделения данных из полного объекта состояния, \r\n      если селектор использует функции map, filter и т.д. для получения\r\n      состояния, его необходимо мемоизировать через функцию createSelector. \r\n      Если при создании исходного состояния использовался createEntityAdapter,\r\n      часть селекторов можно сгенерировать через todosAdapter.getSelectors.\r\n   </li>\r\n   <li>\r\n      Использовать состояние и отправку событий в компонентах React, \r\n      с помощью хуков useSelector и useDispatch.\r\n   </li>\r\n</ol>",
         "title": "Основы работы с Redux"
      },
      "2-initial-data": {
         "data": "<h2 class=\"conspect__header\">\r\n   Исходные данные.\r\n</h2>\r\n\r\n<p class=\"conspect__text\">\r\n   Для создания приложения, необходимы исходные данные.\r\n   Подготовка исходных данные и их планирование упрощает \r\n   создание приложения и уменьшает количество ошибок при его разработке.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Бизнес требования:\r\n</h3>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Будет ли это SPA или должны быть страницы,\r\n      между которыми будет перемещаться пользователь.\r\n   </li>\r\n   <li>\r\n      Если приложение имеет несколько страниц, \r\n      каковы маршруты приложения.\r\n   </li>\r\n   <li>\r\n      Из каких секций должен состоять пользовательский \r\n      интерфейс.\r\n   </li>\r\n   <li>\r\n      Какова функциональность каждой из\r\n      этих секций.\r\n   </li>\r\n   <li>\r\n      Как должны отображаться данные внутри \r\n      приложения.\r\n   </li>\r\n   <li>\r\n      Какие фильтры данных должны присутствовать\r\n   </li>\r\n</ol>\r\n\r\n<p class=\"conspect__text\">\r\n   В итоге необходимо сделать эскиз графического\r\n   интерфейса приложения, на котором выделить отдельные \r\n   компоненты и дать им имена. Набросать иерархическую\r\n   структуру компонентов приложения в виде списка.\r\n   Подумать о графическом дизайне на разных устройствах.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Данные приложения:\r\n</h3>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Определить минимальный набор данных, необходимых\r\n      каждому компоненту приложения.\r\n   </li>\r\n   <li>\r\n      Определить, какие компоненты будут получать данные напрямую\r\n      из глобального состояния, а какие в виде пропсов от\r\n      родительских компонентов.\r\n   </li>\r\n   <li>\r\n      Определить какие данные будут находиться в локальном\r\n      состоянии компонента, и в каких компонентах будет\r\n      храниться данное локальное состояние.\r\n   </li>\r\n</ol>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Структура состояния:\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Сформировать из глобальных данных компонентов\r\n   модель глобального состояния в виде плоского \r\n   JS объекта. Классы, функции, объекты Map, Set и т.д.\r\n   не допускаются, только простые объекты, массивы и элементарные\r\n   значения. Структура должна позволять легко получить доступ \r\n   к отдельным фрагментам данных, и обеспечивать удобство и скорость \r\n   работы с данными.\r\n</p>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Проектирование действий:\r\n</h3>\r\n\r\n<ol class=\"conspect__list\">\r\n   <li>\r\n      Составить список действий, которые будут\r\n      выполняться для изменения состояния приложения.\r\n      В данном случае, действие это событие внутри приложения,\r\n      приводящее к изменениям внутри глобального состояния.\r\n   </li>\r\n   <li>\r\n      На основе списка действий, сформировать структуру\r\n      объектов действий, включая содержимое поля payload,\r\n      в котором может быть как примитивное значение, так и объект:  \r\n      {type: 'filters/changeStatus', payload: status}.\r\n   </li>\r\n</ol>\r\n\r\n<h3 class=\"conspect__subheader\">\r\n   Приступить к программированию.\r\n</h3>\r\n\r\n<p class=\"conspect__text\">\r\n   Исходные данные подготовлены, можно приступить к написанию \r\n   кода Redux структуры, см. \"Основы работы с Redux\" а затем \r\n   React компонентов.\r\n</p>",
         "title": "Исходные данные."
      },
      "3-links": {
         "data": "<h2 class=\"conspect__header\">\r\n   Полезные ссылки\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      <a href=\"https://redux.js.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Redux\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://redux.js.org/tutorials/fundamentals/part-1-overview\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Руководство Redux Fundamentals\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://redux-toolkit.js.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         Redux Toolkit\r\n      </a>\r\n   </li>\r\n   <li>\r\n      <a href=\"https://react-redux.js.org/\" class=\"conspect__outside-link\" target=\"_blank\">\r\n         React Redux\r\n      </a>\r\n   </li>\r\n</ul>",
         "title": "Полезные ссылки"
      },
      "1-overview": {
         "data": "<h2 class=\"conspect__header\">\r\n   Обзор Redux\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Redux - библиотека для управления глобальным состоянием приложения:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Redux обычно используется с библиотекой react-redux \r\n            для интеграции технологий Redux и React.\r\n         </li>\r\n         <li>\r\n            Основной путь написания логики redux приложения - \r\n            использование библиотеки redux-toolkit\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Redux использует несколько типов кода:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Actions, или действия - простые объекты, содержащие \r\n            поле type, и описывающие, что происходит в приложении.\r\n         </li>\r\n         <li>\r\n            Reducers, или редьюсеры - функции, вычисляющие новое\r\n            состояние на основе объектов действий и исходного состояния.\r\n         </li>\r\n         <li>\r\n            Store, или хранилище - содержит текущее состояние, и \r\n            запускает корневой редьюсер при получении объекта действия.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Обзор Redux"
      },
      "2-data-flow": {
         "data": "<h2 class=\"conspect__header\">\r\n   Концепции и поток данных\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Основные принцыпы Redux:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Глобальное состояние приложения хранится в хранилище.\r\n         </li>\r\n         <li>\r\n            Глобальное состояние приложения доступно только \r\n            для чтения во всем приложении.\r\n         </li>\r\n         <li>\r\n            Функция редьюсер используется для обновления состояние,\r\n            в ответ на отправку действия.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Redux использует структуру \r\n      <span class=\"conspect__marked-text\">\r\n         однонаправленного потока данных\r\n      </span>:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Состояние описывает состояние всего приложения\r\n            в данный момент времени, а графический интерфейс\r\n            рендерит данные текущего состояния.\r\n         </li>\r\n         <li>\r\n            Когда что либо происходит в приложении:\r\n            <ul class=\"conspect__list\">\r\n               <li>Графический интерфейс отправляет событие.</li>\r\n               <li>Хранилище запускает редьюсер и обновляет состояние.</li>\r\n               <li>\r\n                  Хранилище уведомляет компоненты графического интерфейса\r\n                  об изменении состояния.\r\n               </li>\r\n            </ul>\r\n         </li>\r\n         <li>\r\n            Графический интерфейс производит повторный рендер, \r\n            на основе обновленного состояния.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Концепции и поток данных"
      },
      "3-redux-elements": {
         "data": "<h2 class=\"conspect__header\">\r\n   Элементы Redux приложения\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Приложение Redux использует простые JS обьекты, \r\n      массивы и примитивные значения как элементы состояния.\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Корневое состояне должно быть простым объектом JS.\r\n         </li>\r\n         <li>\r\n            Состояние должно содержать <span class=\"conspect__marked-text\">наименьший</span> объем данных, \r\n            необходимых для работы приложения.\r\n         </li>\r\n         <li>\r\n            Классы, промисы, функции и другие сложные значения \r\n            не должны использоваться в состоянии Redux.\r\n         </li>\r\n         <li>\r\n            Редукторы должны быть чистыми функциями, и не должны \r\n            создавать случайные значения, такие как Math.random или Date.now.\r\n         </li>\r\n         <li>\r\n            Рядом с глобальным состоянием Redux можно использовать \r\n            локальные состояния компонентов React, которых не \r\n            будет в глобальном состоянии.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Действия - это простые объекты с полем type, описывающим, что произошло.\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Поле action.type должно быть читаемой строкой и обычно \r\n            записывается как 'feature/eventName'.\r\n         </li>\r\n         <li>\r\n            Действия могут содержать другие значения, \r\n            которые обычно хранятся в поле action.payload.\r\n         </li>\r\n         <li>\r\n            Действия должны содержать наименьший объем данных, \r\n            необходимых для описания того, что произошло.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Редукторы - это функции, которые выглядят \r\n      как (state, action) => newState, и следуют правилам:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Вычислять новое состояние только на основе \r\n            аргументов состояния и действия.\r\n         </li>\r\n         <li>\r\n            Никогда не изменяют существующее состояние\r\n             - всегда работают с его копией.\r\n         </li>\r\n         <li>\r\n            Не имеют никаких побочных эффектов, таких как \r\n            вызовы AJAX или асинхронная логика.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Редукторы следует разделять, чтобы их было легче читать:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Редукторы обычно разделяются на основе ключей \r\n            состояния верхнего уровня используя фрагменты состояния.\r\n         </li>\r\n         <li>\r\n            Редукторы обычно находятся в отдельных файлах keySlice.js, \r\n            внутри папок features.\r\n         </li>\r\n         <li>\r\n            Сборку редукторов в корневой редуктор можно осуществлять \r\n            с помощью функции combineReducers.\r\n         </li>\r\n         <li>\r\n            Имена ключей, передаваемые для в combineReducers, \r\n            определяют ключи объекта состояния верхнего уровня.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Элементы Redux приложения"
      },
      "4-store": {
         "data": "<h2 class=\"conspect__header\">\r\n   Хранилище\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Приложения Redux всегда имеют единственное хранилище:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Хранилища создаются с помощью функции createStore.\r\n         </li>\r\n         <li>\r\n            В хранилище может быть только одина корневая\r\n            функция редьюсер.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      У хранилища есть три основных метода:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            getState возвращает текущее состояние.\r\n         </li>\r\n         <li>\r\n            dispatch отправляет действия функции редьюсеру\r\n            для обновления состояния.\r\n         </li>\r\n         <li>\r\n            subscribe принимает колбэк, оповещающий\r\n            слушателя, который запускается каждый раз, \r\n            когда отправляется действие.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Enhancers позволяют нам настраивать магазин при его создании:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Энхенсеры оборачивают хранилище и могут \r\n            переопределять его методы.\r\n         </li>\r\n         <li>\r\n            createStore принимает в качестве аргумента \r\n            только один энхенсер.\r\n         </li>\r\n         <li>\r\n            Несколько энхенсеров могут быть объединены \r\n            вместе с помощью Compose API.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Middleware - это основной способ настройки хранилища:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Добавляется с помощью энхенсера applyMiddleware.\r\n         </li>\r\n         <li>\r\n            Представляет собой три вложенные друг в друга функции.\r\n         </li>\r\n         <li>\r\n            Запускается каждый раз при отправке действия.\r\n         </li>\r\n         <li>\r\n            Может выполнять побочные эффекты.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Расширение Redux DevTools позволяет прозрачно \r\n      наблюдать за состоянием приложения и его изменениями:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Расширение устанавливается в браузере.\r\n         </li>\r\n         <li>\r\n            В хранилище необходимо добавить энхенсер DevTools, \r\n            используя composeWithDevTools вместо compose при \r\n            объединении энхенсеров.\r\n         </li>\r\n         <li>\r\n            DevTools показывает отправленные действия и \r\n            изменения состояния с течением времени.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Хранилище"
      },
      "5-react": {
         "data": "<h2 class=\"conspect__header\">\r\n   Графический интерфейс\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Redux можно использовать с любым графическим интерфейсом,\r\n      так как интерфейс просто подписывается на обновление состояния,\r\n      и перерисовывает себя при его изменении.\r\n   </li>\r\n   <li>\r\n      React-Redux это официальная библиотека интерфейса Redux для React,\r\n      она устаноавливается отдельно от Redux.\r\n   </li>\r\n   <li>\r\n      Хук useSelector позволяет компонентам React получать данные из хранилища:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            useSelector вызывает переданную функцию-селектор и возвращает результат.\r\n         </li>\r\n         <li>\r\n            Функция-селектор принимает все состояние хранилища целиком, \r\n            в качестве аргумента и возвращает значение, полученное из состояния.\r\n         </li>\r\n         <li>\r\n            useSelector подписывается на обновления хранилища,\r\n            и повторно запускает селектор каждый раз при отправке действия.\r\n         </li>\r\n         <li>\r\n            Всякий раз, когда результат селектора изменяется, \r\n            useSelector вызывает повторный рендер компонента с новыми данными.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Хук useDispatch позволяет компонентам React отправлять действия в хранилище:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            useDispatch возвращает фактическую функцию store.dispatch\r\n         </li>\r\n         <li>\r\n            Можно вызывать dispatch(action) внутри ваших компонентов, для\r\n            отправки действий в хранилище.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Компонент Provider делает хранилище доступным для других компонентов React,\r\n      для этого поместите компонент App в компонент Provider, и передайте ему\r\n      хранилище.\r\n   </li>\r\n</ul>\r\n",
         "title": "Графический интерфейс"
      },
      "6-data-fetching": {
         "data": "<h2 class=\"conspect__header\">\r\n   Загрузка данных\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Код middleware был разработан для выполнения логики с побочными эффектами.\r\n      Побочные эффекты - это изменение состояния, поведения вне функции, \r\n      например вызовы AJAX, изменение аргументов функции или генерацию случайных значений.\r\n   </li>\r\n   <li>\r\n      Middleware добавляет дополнительный шаг к стандартному потоку данных Redux:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Может перехватывать значения, передаваемые через dispatch\r\n         </li>\r\n         <li>\r\n            Имеет доступ к dispatch и getState, поэтому они может отправлять \r\n            другие действия, как часть асинхронной логики.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Redux Thunk позволяет передавать функции в dispatch:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Thunk функции передаваемые в dispatch позволяют нам \r\n            заранее писать асинхронную логику, не зная, какое хранилище \r\n            Redux используется.\r\n         </li>\r\n         <li>\r\n            Thunk функция получает dispatch и getState в качестве аргументов \r\n            и может отправлять действия, например при получении данных по сети.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Загрузка данных"
      },
      "7-redux-patterns": {
         "data": "<h2 class=\"conspect__header\">\r\n   Стандартные паттерны\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Функции для создания действий, инкапсулируют подготовку объектов \r\n      действий и thunk функций. Они могут принимать аргументы и содержать \r\n      логику настройки, а также возвращать конечный объект действия или thunk функцию.\r\n   </li>\r\n   <li>\r\n      Мемоизированные селекторы помогают повысить производительность приложения:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Библиотека Reselect имеет функцию createSelector, \r\n            которая генерирует мемоизированные селекторы.\r\n         </li>\r\n         <li>\r\n            Мемоизированные селекторы возвращают одну и ту \r\n            же ссылку на результат при одинаковых входных данных.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Статус запроса должен храниться в виде текстового значения, а не логического. \r\n      Использование текста, например 'idle' и 'loading', помогает последовательно \r\n      отслеживать изменение статуса.\r\n   </li>\r\n   <li>\r\n      Стандартные действия Flux - это общепринятое соглашение об организации \r\n      объектов действий. Действия используют поле payload для данных, \r\n      поле meta для дополнительных описаний и error для ошибок.\r\n   </li>\r\n   <li>\r\n      Нормализованное состояние упрощает поиск записей по идентификатору. \r\n      Нормализованные данные хранятся в объектах, а не в массивах, \r\n      с идентификаторами элементов в качестве ключей.\r\n   </li>\r\n   <li>\r\n      Thunk функции могут возвращать промисы из метода dispatch.\r\n      Компоненты могут ждать завершения асинхронных функций, \r\n      а затем выполнить дополнительную работу.\r\n   </li>\r\n</ul>",
         "title": "Стандартные паттерны"
      },
      "8-redux-toolkit": {
         "data": "<h2 class=\"conspect__header\">\r\n   Redux Toolkit\r\n</h2>\r\n\r\n<ul class=\"conspect__list\">\r\n   <li>\r\n      Redux Toolkit (RTK) - стандартный способ написания логики Redux:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            RTK включает API, которые упрощают большую часть кода Redux.\r\n         </li>\r\n         <li>\r\n            RTK оборачивает ядро ​​Redux и включает другие полезные пакеты.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция configureStore настраивает хранилище Redux с \r\n      оптимальными значениями по умолчанию:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Автоматически комбинирует фрагменты редьюсеров для создания корневого редьюсера.\r\n         </li>\r\n         <li>\r\n            Автоматически настраивает расширение Redux DevTools и промежуточное ПО для отладки.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция createSlice упрощает написание действий и фрагментов редьюсеров:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Автоматически генерирует функции для создания действий \r\n            на основе имен фрагментов и редукторов.\r\n         </li>\r\n         <li>\r\n            Позволяет редьюсерам мутировать состояние внутри \r\n            createSlice с помощью библиотеки Immer.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция createAsyncThunk генерирует thunk функции для асинхронных запросов:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Автоматически генерирует thunk функцию + функцию создатель \r\n            действия для состояний pending/fulfilled/rejected.\r\n         </li>\r\n         <li>\r\n            Отправка thunk функции в dispatch запускает асинхронную функцию \r\n            для создания payload, и отправляет новые действия по мере выполнения\r\n            асинхронной функции.\r\n         </li>\r\n         <li>\r\n            Thunk функции добавляются к редьюсеру в методе createSlice,\r\n            в поле extraReducers объекта конфигурации.\r\n         </li>\r\n      </ul>\r\n   </li>\r\n   <li>\r\n      Функция createEntityAdapter генерирует редьюсеры и селекторы \r\n      для работы с нормализованным состоянием:\r\n      <ul class=\"conspect__list\">\r\n         <li>\r\n            Генерирует функции редьюсеры для общих задач, таких как \r\n            добавление, обновление, удаление элементов.\r\n         </li>\r\n         <li>\r\n            Создает мемоизированные селекторы для selectAll и selectById\r\n         </li>\r\n      </ul>\r\n   </li>\r\n</ul>",
         "title": "Redux Toolkit"
      }
   },
   "keys": [
      {
         "sectionTitle": "Основы",
         "pages": [
            "1-basics",
            "2-initial-data",
            "3-links"
         ]
      },
      {
         "sectionTitle": "Руководство Redux Fundamentals",
         "pages": [
            "1-overview",
            "2-data-flow",
            "3-redux-elements",
            "4-store",
            "5-react",
            "6-data-fetching",
            "7-redux-patterns",
            "8-redux-toolkit"
         ]
      }
   ]
}